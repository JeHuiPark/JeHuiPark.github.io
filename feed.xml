<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

  <channel>
    <title>JH Blog</title>
    <description>developer JH website.</description>
    <link>https://jehuipark.github.io/</link>
    <atom:link href="https://jehuipark.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 18 Apr 2020 21:37:43 +0900</pubDate>
    <lastBuildDate>Sat, 18 Apr 2020 21:37:43 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>디자인 패턴 : 추상 팩토리</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#정의&quot; id=&quot;markdown-toc-정의&quot;&gt;정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#특징&quot; id=&quot;markdown-toc-특징&quot;&gt;특징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#구조&quot; id=&quot;markdown-toc-구조&quot;&gt;구조&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#예제코드&quot; id=&quot;markdown-toc-예제코드&quot;&gt;예제코드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#예제코드-클래스-다이어그램&quot; id=&quot;markdown-toc-예제코드-클래스-다이어그램&quot;&gt;예제코드 클래스 다이어그램&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;객체 생성과 구성(협력관계)을 추상화 시킨 패턴으로 서버 코드와 클라이언트 코드의 결합도를 낮춘 디자인 패턴&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;클라이언트 코드에서는 구현체가 아닌 인터페이스에 의존한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트는 추상화 레이어에 의존하기 때문에
    &lt;ul&gt;
      &lt;li&gt;구현체와의 결합도가 낮아진다.&lt;/li&gt;
      &lt;li&gt;구현체를 교체하는 비용이 낮아진다.&lt;/li&gt;
      &lt;li&gt;대부분의 행위가 동적 바인딩으로 이루어지기 때문에 정적인 코드만으로는 내부적으로 어떻게 동작하는지 추적하기가 힘들다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구현체의 응집도가 높아진다.
    &lt;ul&gt;
      &lt;li&gt;구현체의 생명주기가 팩토리 생성자에 의해 제어된다.&lt;/li&gt;
      &lt;li&gt;구현체 사이의 일관성이 높다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;추상 팩토리에 대한 의존성으로 인하여 확장에 패널티를 갖는다.
    &lt;ul&gt;
      &lt;li&gt;표준화 인터페이스를 공유하는 특화 모듈을 구현할 때 마다, 추상 팩토리에서 요구하는 스펙을 모두 구현해야 한다.&lt;/li&gt;
      &lt;li&gt;스펙 복잡도가 올라갈 수록, 모듈 추가비용이 상승한다.&lt;/li&gt;
      &lt;li&gt;새로운 기능을 추가하려면, 기존에 구현된 특화 모듈에도 새로운 기능을 구현하는 과정이 요구된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구조&quot;&gt;구조&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;추상화 레이어 (표준 인터페이스)
    &lt;ul&gt;
      &lt;li&gt;추상 팩토리 레이어&lt;/li&gt;
      &lt;li&gt;인터페이스 레이어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구체 레이어 (특화 모듈)
    &lt;ul&gt;
      &lt;li&gt;구체 팩토리 레이어 (모듈 생성 제어)&lt;/li&gt;
      &lt;li&gt;인터페이스 구현 레이어 (모듈)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예제코드&quot;&gt;예제코드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/design-pattern/tree/master/src/main/java/com/example/jehuipark/abstract_factory&quot;&gt;Java Sample Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;예제코드-클래스-다이어그램&quot;&gt;예제코드 클래스 다이어그램&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/JeHuiPark/design-pattern/blob/master/image/abstract_factory.png?raw=true&quot; alt=&quot;imgae&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;GoF의 디자인 패턴 p132 - p143&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 18 Apr 2020 18:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/abstract-factory-pattern</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/abstract-factory-pattern</guid>
        
        <category>디자인패턴</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>Vim 어린이가 만든 GitHub Co-Author Vim Plugin</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#github-co-author&quot; id=&quot;markdown-toc-github-co-author&quot;&gt;GitHub Co-Author?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#난-이-기능이-좋다&quot; id=&quot;markdown-toc-난-이-기능이-좋다&quot;&gt;난 이 기능이 좋다.&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#co-author-표시하기&quot; id=&quot;markdown-toc-co-author-표시하기&quot;&gt;Co-Author 표시하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#막상-작성을-해보려고-하면&quot; id=&quot;markdown-toc-막상-작성을-해보려고-하면&quot;&gt;막상 작성을 해보려고 하면?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vim-을-이용하자&quot; id=&quot;markdown-toc-vim-을-이용하자&quot;&gt;vim 을 이용하자&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#기획&quot; id=&quot;markdown-toc-기획&quot;&gt;기획&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#사전학습&quot; id=&quot;markdown-toc-사전학습&quot;&gt;사전학습&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#vimscript-연습&quot; id=&quot;markdown-toc-vimscript-연습&quot;&gt;vimscript 연습&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#배열-다루기&quot; id=&quot;markdown-toc-배열-다루기&quot;&gt;배열 다루기&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#파일-읽기&quot; id=&quot;markdown-toc-파일-읽기&quot;&gt;파일 읽기&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#키맵핑-하기&quot; id=&quot;markdown-toc-키맵핑-하기&quot;&gt;키맵핑 하기&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#개발완료&quot; id=&quot;markdown-toc-개발완료&quot;&gt;개발완료&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;github-co-author&quot;&gt;GitHub Co-Author?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Co-Author&lt;/code&gt; 의 사전적 의미를 네이버에 검색하면 공동저자라고 나온다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77842393-8f51ef00-71cc-11ea-94fb-005522612e99.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub 는 이렇게 하나의 커밋에 2명 이상의 기여자가 존재할 경우에 누가 이 커밋에 기여했는지 UI로 표현해주는 기능을 제공한다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77842434-06878300-71cd-11ea-846c-2f2ad3e8407e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;난-이-기능이-좋다&quot;&gt;난 이 기능이 좋다.&lt;/h2&gt;
&lt;p&gt;현재 회사에서는 코드를 작성하면 모든 코드는 빠짐없이 PR 과정을 거치게 된다.&lt;br /&gt;
그렇다보니, 내 코드에 다른 사람의 의견이 반영되는 경우도 빈번하게 발생 하는데, 이런 경우에 GitHub 에서 지원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Co-Author&lt;/code&gt; 기능을 이용하면 해당 변경사항에 어떤 사람이 기여했는지 기록을 남기는 동시에 UI 로 표시까지 해주니 금상첨화다.&lt;/p&gt;

&lt;h3 id=&quot;co-author-표시하기&quot;&gt;Co-Author 표시하기&lt;/h3&gt;
&lt;p&gt;간단하다&lt;em&gt;(귀찮다)&lt;/em&gt; 커밋 메시지를 작성할 때 GitHub 에서 &lt;a href=&quot;https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors&quot;&gt;가이드&lt;/a&gt; 하는 포멧에 맞추어 작성하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;막상-작성을-해보려고-하면&quot;&gt;막상 작성을 해보려고 하면?&lt;/h3&gt;
&lt;p&gt;간단한데, 막상 작성하려고 하면 되게 귀찮은 작업이다. 
팀원의 GitHub 계정명도 알아야하고, 이메일정보도 알아야 하는데 어디에 복사해 두고 하자니 커밋 메시지 작성하는데 한 세월이 걸릴 것 같은 느낌적인 느낌이 들었다. (완전 노가다)
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77842923-d0e59880-71d2-11ea-8124-28bcd51cb7d7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서, 커밋 메시지에 컨트리뷰터 작성할 때 꿀팁이 있는지 &lt;a href=&quot;https://johngrib.github.io/&quot;&gt;기계인간 존그립&lt;/a&gt;님에게 질문해보았다.&lt;/p&gt;

&lt;p&gt;존그립 님이 이런 답변을 주었다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;vim 의 자동완성 기능을 이용하면 될듯하다. 만들어두면 쓸만하겠는데요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;vim-을-이용하자&quot;&gt;vim 을 이용하자&lt;/h2&gt;
&lt;p&gt;존그립 님이 과거에 커밋메시지 관련하여 만든 &lt;a href=&quot;https://github.com/johngrib/vim-git-msg-wheel&quot;&gt;플러그인&lt;/a&gt;을 참고하면 도움이 될 거라고 하였다.&lt;/p&gt;

&lt;h3 id=&quot;기획&quot;&gt;기획&lt;/h3&gt;

&lt;p&gt;내가 만드려고 기획한 플러그인의 사용 시나리오는 이렇다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;커밋 메시지 입력 화면으로 이동한다.&lt;/li&gt;
  &lt;li&gt;공동저자 입력을 위해 단축키를 누른다&lt;/li&gt;
  &lt;li&gt;팀원 목록이 리스트로 출력된다.&lt;/li&gt;
  &lt;li&gt;팀원을 선택한다.&lt;/li&gt;
  &lt;li&gt;선택한 팀원정보로 공동저자 정보가 커밋메시지에 추가된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;팀원 리스트는 설정 파일로 관리한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;사전학습&quot;&gt;사전학습&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vimscript&lt;/code&gt; 의 문법을 모르는 상태이기 때문에 &lt;a href=&quot;https://devhints.io/vimscript&quot;&gt;여기에서&lt;/a&gt; 도움을 많이 받았다.&lt;/p&gt;

&lt;h4 id=&quot;vimscript-연습&quot;&gt;vimscript 연습&lt;/h4&gt;

&lt;h5 id=&quot;배열-다루기&quot;&gt;배열 다루기&lt;/h5&gt;
&lt;p&gt;이 스크립트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;team&lt;/code&gt; 이라는 변수를 배열로 초기화 하고, 배열에 값을 추가하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; TestFunction&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; team &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; team &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;team&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'박제희'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; team &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;team&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'존그립'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  echo team
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77843363-6f73f880-71d7-11ea-83c5-f23595e8c9df.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;파일-읽기&quot;&gt;파일 읽기&lt;/h5&gt;
&lt;p&gt;이 스크립트는 현재경로에 존재하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;example&lt;/code&gt; 이라는 파일을 읽어서 라인별로 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 를 하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; TestFunction&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; fileAbsolutePath &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%:p:h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; records &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; readfile&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;fileAbsolutePath &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/example'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; record &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; records
    echo record
  &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77843575-6be17100-71d9-11ea-8fdc-88df9fe273dd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;키맵핑-하기&quot;&gt;키맵핑 하기&lt;/h5&gt;
&lt;p&gt;이 코드는 vim 편집모드에서 ctrl + l 키를 입력할 시 TestFunction을 실행하라는 코드이다.&lt;br /&gt;
기대 하는 결과는 편집모드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Co-Authored-By: jehuipark &amp;lt;email&amp;gt;&lt;/code&gt; 텍스트가 입력될 것이다.&lt;/p&gt;
&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; TestFunction&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Co-Authored-By: jehuipark &amp;lt;email&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R&lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt;TestFunction&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77843700-af88aa80-71da-11ea-820e-2884d8a10d8d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개발완료&quot;&gt;개발완료&lt;/h3&gt;
&lt;p&gt;이렇게 단위별로 기능을 작성하는 연습을 끝낸 후에 본격적으로 내가 원하는 플러그인을 만들기 위해 개발을 시작하였고, 조악한 코드지만 어찌어찌 완성을 하였다!&lt;/p&gt;

&lt;p&gt;이렇게 만든 스크립트는 &lt;a href=&quot;https://github.com/JeHuiPark/github-co-author-vim-plugin&quot;&gt;GitHub 저장소&lt;/a&gt;에 올려두었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;설정파일의 내용&lt;/strong&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77854220-de773e80-7223-11ea-9608-cdbe1d7506c7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자! 이제 사용을 해보자 
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77853939-11203780-7222-11ea-8414-48b336fed2a8.gif&quot; alt=&quot;github-co-plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하하하하하 잘된다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/johngrib/vim-git-msg-wheel&quot;&gt;기계인간 존그립 님의 포스팅1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://johngrib.github.io/wiki/vim-auto-completion/&quot;&gt;기계인간 존그립 님의 포스팅2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/johngrib/vim-git-msg-wheel&quot;&gt;박준근 님의 vim-plug&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://devhints.io/vimscript&quot;&gt;vim script cheatsheet&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://blog.semanticart.com/2017/01/05/lets-write-a-basic-vim-plugin/&quot;&gt;어떤 외국인의 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 29 Mar 2020 14:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/vim-plugin-create</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/vim-plugin-create</guid>
        
        <category>vim</category>
        
        <category>github</category>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>JPA 에서 UUID 사용할 때 주의할 점</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#uuid로-조회가-안된다&quot; id=&quot;markdown-toc-uuid로-조회가-안된다&quot;&gt;UUID로 조회가 안된다.&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#혼란이-온다&quot; id=&quot;markdown-toc-혼란이-온다&quot;&gt;혼란이 온다.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#성공적인-구글링&quot; id=&quot;markdown-toc-성공적인-구글링&quot;&gt;성공적인 구글링&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#왜-그럴까&quot; id=&quot;markdown-toc-왜-그럴까&quot;&gt;왜 그럴까?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#한줄-요약&quot; id=&quot;markdown-toc-한줄-요약&quot;&gt;한줄 요약&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#확인-해보자&quot; id=&quot;markdown-toc-확인-해보자&quot;&gt;확인 해보자&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;uuid로-조회가-안된다&quot;&gt;UUID로 조회가 안된다.&lt;/h2&gt;

&lt;p&gt;최근에 엔티티를 만들면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Id&lt;/code&gt; 컬럼의 타입을 UUID 로 지정하면서 경험했던 이슈가 있다.&lt;/p&gt;

&lt;p&gt;평소처럼 엔티티를 클래스를 작성하고, 기본적인 비즈니스 로직(1번 로직)을 구현하고, 비즈니스 로직에 대응하는 TC 를 작성하고 문제없이 동작하는 것을 확인한 후에 나는 다음 비즈니스 로직(2번 로직)을 구현하였다.&lt;/p&gt;

&lt;p&gt;그런데, 다음 비즈니스 로직을 구현하고 검증하는 과정에서 문제가 발생했다.&lt;/p&gt;

&lt;p&gt;2번 로직은 요약하면 이런 구성이였다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UUID 값을 전달받는다.
    &lt;ol&gt;
      &lt;li&gt;UUID 값이 없다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; 을 &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt; 한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;UUID 값을 이용해 조회후 값을 변경한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;검증하는 과정에서는 정상적인 컨텍스트에서 실행을 했기 때문에 이 메소드는 예외를 발생시키지 않고 정상 리턴되야 했는데 이상하게 UUID 값이 없다는 예외를 발생시키고 있엇다.&lt;/p&gt;

&lt;h3 id=&quot;혼란이-온다&quot;&gt;혼란이 온다.&lt;/h3&gt;

&lt;p&gt;원인 파악을 위해 2번째 로직을 작성하기 전에 1번째 로직과 1번째 로직을 검증하는 TC 를 찬찬히 살펴보았다.&lt;br /&gt;
이상하게도 1번째 로직과 TC 에는 아무런 문제가 없었고, 혹시나 하는 마음에 TC 의 검증로직을 다르게 작성해보기도 했지만, 당연하게도 테스트 검증결과에는 녹색불이 들어왔다.&lt;/p&gt;

&lt;p&gt;다만, 1번 로직과 2번로직을 검증하는 환경에는 한 가지 차이점이 존재했다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1번 로직을 테스트할 때는 H2 인메모리 데이터베이스&lt;/strong&gt;를 사용했다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2번 로직을 테스할 때는 개발 데이터베이스&lt;/strong&gt;를 사용했다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;성공적인-구글링&quot;&gt;성공적인 구글링&lt;/h3&gt;
&lt;p&gt;혹시나 해서 구글링을 해보니 &lt;a href=&quot;https://phauer.com/2016/uuids-hibernate-mysql/&quot;&gt;이런 글&lt;/a&gt;을 확인할 수 있었고, 중간에 몇 가지 문구가 눈에 들어왔다.&lt;br /&gt;
“&lt;em&gt;UUID 에는 16 바이트가 필요합니다&lt;/em&gt;”&lt;br /&gt;
“&lt;em&gt;UUID 를 저장할 땐 &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;BINARY(16)&lt;/code&gt; 컬럼을 이용하세요&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;그리고 개발 데이터베이스를 확인해보니 UUID 를 저장하는 컬럼이 &lt;code class=&quot;highlighter-rouge&quot;&gt;BINARY(255)&lt;/code&gt; 으로 설정된 것을 확인할 수 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://phauer.com/2016/uuids-hibernate-mysql/&quot;&gt;이 글&lt;/a&gt;에서 전하고자 하는 내용의 주제가 내가 필요로 하는 주제는 아니였지만, 문구 하나가 나에게는 많은 도움이 되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일단 테이블 컬럼을 직접 수정하는 방법도 있지만, 개발 단계이기 때문에(?) 그냥 테이블을 삭제시켜 버리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt; 클래스의 메타정보를 수정하기로 결정하였다. (그게 더 깔끔하다고 판단)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;수정전&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GenericGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;수정후&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GenericGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columnDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BINARY(16)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;수정후 2번 로직을 테스트해보니 예상하던 결과가 떨어지는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;1번 로직을 구현하고 테스트하는 시점에 이 문제를 알았다면, 더 좋았을텐데 라는 생각이 든다. 나는 이 문제를 &lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt; 타입을 처리하는 DBMS의 차이(H2와 MySQL)로 이런 결과가 생긴것이라고 &lt;strong&gt;추측&lt;/strong&gt;하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;왜-그럴까&quot;&gt;왜 그럴까?&lt;/h2&gt;
&lt;p&gt;해결은 했지만, 이렇게 두루뭉술하게 넘어가기엔 너무 찝찝하다. 그래서 자료조사를 조금 더 해보았고, &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html&quot;&gt;오피셜 문서&lt;/a&gt;를 발견하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77825064-49544700-714a-11ea-98bb-6298edda3a10.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;한줄-요약&quot;&gt;한줄 요약&lt;/h3&gt;
&lt;p&gt;저장할 때 남는 길이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;RPAD&lt;/code&gt; 처리하고 저장한다. (아 이래서 조회를 못한거구나?)&lt;/p&gt;

&lt;h3 id=&quot;확인-해보자&quot;&gt;확인 해보자&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;검증을 위해 (잘못된?) 테이블을 생성하자
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BINARY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트용 데이터를 만들자.
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8f886d50-70ff-11ea-b498-02dd0a2dce82&lt;/code&gt; 라는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UUID&lt;/code&gt; 를 생성했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;UUID의 길이를 확인해보자.&lt;br /&gt;
UUID의 길이는 16바이트의 길이를 요구한다고 하였다. 눈으로 직접 확인해보자
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8f886d50-70ff-11ea-b498-02dd0a2dce82'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77825438-acdf7400-714c-11ea-9fae-955273b19a67.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
약속대로 16 이라는 길이가 나온다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터를 저장해보자&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; 에서 가이드 하는대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 를 공백으로 치환하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt; 타입으로 변경하여 데이터를 밀어 넣자.
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8f886d50-70ff-11ea-b498-02dd0a2dce82'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;조회를 해보자&lt;br /&gt;
 레퍼런스에서는 남는 공간은 패딩처리 한다고 했다.&lt;br /&gt;
 그러니까 나는 16바이트의 길이를 가진 데이터를 저장했지만, 실제로는 255 길이를 소유한 데이터가 있어야 한다.&lt;br /&gt;
 &lt;br /&gt;
 그걸 눈으로 확인하기 위해 아래와 같은 쿼리를 날렸다.
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77825566-6fc7b180-714d-11ea-8b53-c417115a261a.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;레퍼런스에서 설명한대로 우측에 패딩값이 들어간 것을 확인할 수 있다.&lt;br /&gt;
 미리 생성해둔 UUID 로 조회를 시도해보자&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;내가 경험한 이슈를 흉내낸 것이다&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8f886d50-70ff-11ea-b498-02dd0a2dce82'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;조회가 안된다.&lt;br /&gt;
 패딩값 때문에 당연한 결과일 것이다.
 &lt;br /&gt;
 &lt;strong&gt;그렇다면 조회조건에 패딩값을 포함하면 조회가 되야 되겠지?&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUBSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin_uuid&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8f886d50-70ff-11ea-b498-02dd0a2dce82'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;예상대로 조회가 되는 것을 확인할 수 있다.&lt;br /&gt;
 &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77825850-47d94d80-714f-11ea-94f2-4068c05b2f1e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 22:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/java/my-sql-binary-reference</link>
        <guid isPermaLink="true">https://jehuipark.github.io/java/my-sql-binary-reference</guid>
        
        <category>mysql</category>
        
        <category>uuid</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>3항 연산자와 Unboxing 그리고 NullPointException</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#떡밥&quot; id=&quot;markdown-toc-떡밥&quot;&gt;떡밥&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#왜-nullpointexception-&quot; id=&quot;markdown-toc-왜-nullpointexception-&quot;&gt;왜 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; ?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#어떻게-알아내었는가&quot; id=&quot;markdown-toc-어떻게-알아내었는가&quot;&gt;어떻게 알아내었는가&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#unboxing-의-동작방식이-궁금해&quot; id=&quot;markdown-toc-unboxing-의-동작방식이-궁금해&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 의 동작방식이 궁금해&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1짤-요약&quot; id=&quot;markdown-toc-1짤-요약&quot;&gt;1짤 요약&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#후기&quot; id=&quot;markdown-toc-후기&quot;&gt;후기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;떡밥&quot;&gt;떡밥&lt;/h2&gt;

&lt;p&gt;얼마전에 팀 내에서 재밌는 이슈가 나왔다.&lt;br /&gt;
대충 아래와 같은 방식으로 리턴하는 메소드가 존재하였는데.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booleanExpression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primitiveValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integerObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;booleanExpression&lt;/code&gt; 의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 일 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;integerObj&lt;/code&gt; 의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 이면 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; 오류가 터지는 문제였다.&lt;/p&gt;

&lt;p&gt;언뜻 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;booleanExpression&lt;/code&gt; 의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 이면, &lt;code class=&quot;highlighter-rouge&quot;&gt;integerObj&lt;/code&gt; 의 값이 무엇이던 그대로 반환할 것 같은 메소드이지만, 알고보면 그렇지 않다.&lt;/p&gt;

&lt;p&gt;이 오류를 재현하기 위해 간단한 테스트를 작성하고, 실행 해보자&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NullPointerException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;예상되는 에러&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;테스트 결과&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/76698396-bb0da900-66e5-11ea-9b27-9ef98bcbdacd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;왜-nullpointexception-&quot;&gt;왜 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; ?&lt;/h3&gt;

&lt;p&gt;결론부터 말하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 과 관련된 이슈였다.&lt;/p&gt;

&lt;p&gt;요악하면 변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 를 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 하는 과정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; 이 발생한다.&lt;/p&gt;

&lt;h4 id=&quot;어떻게-알아내었는가&quot;&gt;어떻게 알아내었는가&lt;/h4&gt;

&lt;p&gt;머릿속에 여러 생각이 들었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;이펙티브 자바&lt;/code&gt; 책의 한 구절이 떠올랐다.
    &lt;blockquote&gt;
      &lt;p&gt;컴파일러로 인해 개발자가 작성한 코드가 예상과 다르게 동작할 수 있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; 예외가 발생할 수 있는 포인트가 3항 연산자 이외에는 보이지 않는다.&lt;/li&gt;
  &lt;li&gt;3항 연산자의 2항의 반환 타입이 &lt;code class=&quot;highlighter-rouge&quot;&gt;primitive&lt;/code&gt; 인게 걸린다.&lt;/li&gt;
  &lt;li&gt;혹시 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 로 초기화 된 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 를 언박싱 하려고 하니?&lt;/li&gt;
  &lt;li&gt;만약 2항의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;boxing object&lt;/code&gt; 이면 에러없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 을 반환할까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나름의 정보를 종합하여, 한가지 가설을 세우고 바로 테스트를 작성해 보았다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;테스트 결과&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/76698556-bfd35c80-66e7-11ea-84cb-b4754df909f0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;내가 세운 가설&lt;/strong&gt;은 이랬다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2항의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;primitive&lt;/code&gt; 이기 때문에, 3항의 &lt;code class=&quot;highlighter-rouge&quot;&gt;boxing object&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt;이 되는 것은 아닐까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 나는 테스트 코드를 통해 이번 3항 연산자 떡밥은 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 과 관련이 있다는 것이 증명 되었다고 판단하였다.&lt;/p&gt;

&lt;h3 id=&quot;unboxing-의-동작방식이-궁금해&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 의 동작방식이 궁금해&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boxing&lt;/code&gt; 이라던지 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 키워드는 정말 지겹도록 들어봤을 것이며, 이것을 설명하는 것은 주제를 넘어가니 생략한다.&lt;/p&gt;

&lt;p&gt;당시에, 나는 2가지의 키워드가 의미하는 바가 무엇인지는 알고 있었지만, 솔직히 말하면 실제로 어떻게 동작하는지에 대해서는 구체적으로 알고 있는 상태는 아니였다.&lt;/p&gt;

&lt;p&gt;이때의 계기로 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 이 어떻게 동작하는지 알아보고 싶어져서 &lt;code class=&quot;highlighter-rouge&quot;&gt;바이트 코드&lt;/code&gt; 를 읽어보기로 결정하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/76698970-c5cb3c80-66eb-11ea-8627-85a41970551e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지에 보이는 자바코드 두줄은 바이트 코드로 이렇게 표현되고 있었다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;L0&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;LINENUMBER&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;L0&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;ACONST_NULL&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;ASTORE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;L3&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;LINENUMBER&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;L3&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;ALOAD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;INVOKEVIRTUAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;INVOKESTATIC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ljava&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;ASTORE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;천천히 순서대로 읽어보자. (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.astore&quot;&gt;오라클 문서&lt;/a&gt;와 같이 보면 도움이 된다.)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LO&lt;/code&gt; 은 자바코드 12번 라인에 대응하는 코드이다.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ASTORE 1&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 이라는 상수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;로컬 참조변수 저장소&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;에 저장한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L3&lt;/code&gt; 은 자바코드 13번 라인에 대응하는 코드이다.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALOAD 1&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;로컬 참조변수 저장소&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;에서 객체를 로드 해라. (&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 예상)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INVOKEVIRTUAL java/lang/Integer.intValue ()I&lt;/code&gt; -&amp;gt; 로드한 객체를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;intValue&lt;/code&gt; 메소드를 실행해라. (&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 참조 상태이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;intValue()&lt;/code&gt; 메소드를 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; 이 발생&lt;/strong&gt;한다.)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;valueOf&lt;/code&gt;라는 정적 메소드를 실행하면서 I를 넘겨라. 정적 메소드의 반환 타입은 &lt;code class=&quot;highlighter-rouge&quot;&gt;java/lang/Integer&lt;/code&gt; 이다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ASTORE 2&lt;/code&gt; -&amp;gt; 반환값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;로컬 참조변수 저장소&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;에 저장하라&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;바이트 코드에서 보면 13번 라인의 3항 연산자가 삭제된 것을 확인할 수 있는데, 이것은 1항의 값이 컴파일 시점에 이미 결정되어 있기 때문에 실행시점에는 2항의 값이 쓸모없는 값이 되어 버린다 그렇기 때문에, 컴파일러가 최적화한 결과라고 생각하면 되며, 이 글에서 중요하지 않는 부분이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;바이트 코드를 읽어보니 언박싱이 어떻게 동작하는 건지 알 수 있을것 같다.&lt;br /&gt;
바이트 코드 분석중 2-2 를 확인해보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;INVOKEVIRTUAL java/lang/Integer.intValue ()I&lt;/code&gt; 이 부분이 박싱 객체를 언박싱하는 과정으로 보이는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 참조를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;intValue()&lt;/code&gt; 메소드를 실행하려고 시도하니 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; 이 발생한 것이였다.&lt;/p&gt;

&lt;h2 id=&quot;1짤-요약&quot;&gt;1짤 요약&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/76700066-e9e04b00-66f6-11ea-9263-1f4f049917a3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;
&lt;p&gt;퇴근 직전에 재밌는 떡밥이였다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 이슈는 알고보니 아주 유명한 이슈라고 한다.
    &lt;ul&gt;
      &lt;li&gt;이것도 자바 스펙중 하나로 오라클에 &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.25&quot;&gt;오피셜 문서&lt;/a&gt;가 존재한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3항 연산자에 박싱 객체와 언박싱 객체가 공존할 때, 언박싱 객체를 박싱객체로 변환하는 방법도 있을법 하지만, 컴파일러는 언박싱 처리를 하도록 하고 있다. 이유가 뭘까?
    &lt;ul&gt;
      &lt;li&gt;그냥 단순히 객체 생성 비용을 아끼기 위해서 일까? 다른 이유가 있을까?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 15 Mar 2020 15:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/java/java-conditional-operator</link>
        <guid isPermaLink="true">https://jehuipark.github.io/java/java-conditional-operator</guid>
        
        <category>java</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Github Action 을 이용하여 Github 블로그 배포하기</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#시작하기-전에&quot; id=&quot;markdown-toc-시작하기-전에&quot;&gt;시작하기 전에&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github-action-이-딱이네&quot; id=&quot;markdown-toc-github-action-이-딱이네&quot;&gt;Github Action 이 딱이네&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#github-action-은&quot; id=&quot;markdown-toc-github-action-은&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Github Action&lt;/code&gt; 은&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github-action-을-만들어보자&quot; id=&quot;markdown-toc-github-action-을-만들어보자&quot;&gt;Github Action 을 만들어보자&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#github-action-생성&quot; id=&quot;markdown-toc-github-action-생성&quot;&gt;Github Action 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#github-action-몸빵으로-배우기&quot; id=&quot;markdown-toc-github-action-몸빵으로-배우기&quot;&gt;Github Action 몸빵으로 배우기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#완성된-github-action-dsl&quot; id=&quot;markdown-toc-완성된-github-action-dsl&quot;&gt;완성된 Github Action DSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#깃헙액션-동작-결과&quot; id=&quot;markdown-toc-깃헙액션-동작-결과&quot;&gt;깃헙액션 동작 결과&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시작하기-전에&quot;&gt;시작하기 전에&lt;/h2&gt;

&lt;p&gt;Github Action을 이용하기 전에 나는 블로그를 이런식으로 운영하고 있었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;블로그의 빌드방식을 github 의존 방식이 아닌 로컬 빌드방식을 이용&lt;/li&gt;
  &lt;li&gt;블로그를 배포하는 방법으로 루비 Rakefile 스크립트 이용&lt;/li&gt;
  &lt;li&gt;블로그 개발환경을 도커로 구성
    &lt;blockquote&gt;

      &lt;p&gt;&lt;a href=&quot;https://jehuipark.github.io/blog/blog-publish&quot;&gt;배포 자동화&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://jehuipark.github.io/blog/blog-env-setting-with-docker&quot;&gt;블로그 개발환경 도커로 구성하기&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;블로그 개발환경을 도커 구성으로 변경하면서, 기존 배포방식에 문제가 발생 하면서 문제점이 보이기 시작했다.&lt;/p&gt;

&lt;p&gt;배포를 Rakefile 태스크에 의존하다 보니, 배포 또한 도커를 이용하게 되었는데 컨테이너 환경에서는 github 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 하기 위한 권한이 없기 때문에 아래와 같은 추가적인 작업이 필요한 상황이 발생한 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;basic credentials 으로 직접 로그인 - &lt;strong&gt;귀찮음&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;컨테이너에 ssh 설정 - &lt;strong&gt;배포환경이 달라질 때 마다 설정을 해줘야 함&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결정적으로 나는 &lt;strong&gt;개발환경 구축이 되어 있지 않더라도, 배포가 가능한 환경을 원했다.&lt;/strong&gt;&lt;br /&gt;
이런 환경이라면, 단순한 수정은 인터넷만 가능하다면 퀵 하게 처리가 가능할 테니까&lt;/p&gt;

&lt;h2 id=&quot;github-action-이-딱이네&quot;&gt;Github Action 이 딱이네&lt;/h2&gt;
&lt;p&gt;내 요구사항을 처리하기에 딱 좋은 녀석은 얼마전에 회사에서 공유 받은적이 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Action&lt;/code&gt; 이 딱이라고 생각하였다.&lt;br /&gt;
나도 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Action&lt;/code&gt; 을 사용해본 경험은 없기 때문에, 사전조사를 간략하게 진행 하였다.&lt;/p&gt;

&lt;h3 id=&quot;github-action-은&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Github Action&lt;/code&gt; 은&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;깃헙 레파지토리에서 발생하는 이벤트를 받아서 처리할 수 있게 인터페이스 제공&lt;/li&gt;
  &lt;li&gt;레파지토리별 가상 서버를 깃헙에서 제공
    &lt;ul&gt;
      &lt;li&gt;자체 호스팅 서버를 이용도 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;깃헙에서 제공하는 가상서버에는 해당 레파지토리에 대한 접근권한 설정이 미리 되어있는 상태&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GITHUB_TOKEN&lt;/code&gt; 을 이용한다고 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 정도의 정보를 갖고 행동으로 옮겼고, 삽질 끝에 배포 자동화 환경을 구축했다.&lt;/p&gt;

&lt;p&gt;배포 과정을 요약하면 이렇다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;github 저장소의 &lt;code class=&quot;highlighter-rouge&quot;&gt;work&lt;/code&gt; 브랜치에 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;를 한다.&lt;/li&gt;
  &lt;li&gt;원격지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드&lt;/code&gt;를 수행한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;빌드&lt;/code&gt; output을 github 저장소의 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 한다. (&lt;strong&gt;배포완료&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;github-action-을-만들어보자&quot;&gt;Github Action 을 만들어보자&lt;/h2&gt;

&lt;h3 id=&quot;github-action-생성&quot;&gt;Github Action 생성&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75607351-8b816d00-5b39-11ea-9a42-447925b85cbe.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성 버튼을 누르니 깃헙설정 경로에 &lt;code class=&quot;highlighter-rouge&quot;&gt;yml&lt;/code&gt; 파일이 생성되는 걸 보니 &lt;strong&gt;DSL&lt;/strong&gt; 의 느낌이 온다.
그래서 &lt;a href=&quot;https://help.github.com/en/actions&quot;&gt;Github Action Help&lt;/a&gt; 레퍼런스를 잠깐 읽었는데 머리도 아프고 역시 몸빵이 최고인 것 같아서 레퍼런스를 켜두고 일단 시작했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/actions&quot;&gt;Github Action Help&lt;/a&gt; 어디에선가 발췌한 Hello World 스크립트를 갖고 바로 몸빵을 시작하기로 결정했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hello World 스크립트&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Greet Everyone&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This workflow is triggered on pushes to the repository.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Job name is Greeting&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Greeting&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This job runs on Linux&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This step uses GitHub's hello-world-javascript-action: https://github.com/actions/hello-world-javascript-action&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Hello world&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/hello-world-javascript-action@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;who-to-greet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Mona&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Octocat'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This step prints an output (time) from the previous step's action.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Echo the greeting's time&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo 'The time was $.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;github-action-몸빵으로-배우기&quot;&gt;Github Action 몸빵으로 배우기&lt;/h3&gt;

&lt;p&gt;깃헙 액션을 몸빵으로 체득하다 보면 커밋 히스토리가 지저분해질게 뻔히 보여서 일단 리모트 &lt;strong&gt;브랜치를 분리&lt;/strong&gt;하는 작업을 먼저 진행 하였다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;work-flow-test 브랜치 생성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;분리된 브랜치에서 깃헙액션 DSL 을 생성하고, 사전에 찾아뒀던 Hello World 스크립트를 저장하였다.&lt;br /&gt;
저장하는 순간 github 에 push 이벤트가 발생하였고, 아래와 같이 깃헙 액션 실행결과를 확인할 수 있었다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75607494-20389a80-5b3b-11ea-901c-e98d3204e967.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;깃헙액션의 실행결과를 눈으로 확인하고 나서 바로 든 생각은 &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;신기하네 약간 도커같은 느낌인걸?&lt;/code&gt;&lt;/em&gt; 이였다.&lt;/p&gt;

&lt;p&gt;그리고 job 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 을 하나씩 단계별로 구성하면 내가 하려던 작업을 충분히 할 수 있겠다고 직감했고 깃헙 액션을 조금씩 채워나가기 시작했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;소스 체크아웃 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기
이런저런 삽질을 해보다가 이정도는 이미 만들어져 있지 않을까 해서 찾아보니 &lt;a href=&quot;https://github.com/actions/checkout&quot;&gt;깃헙에서 제공&lt;/a&gt;하고 있어서 그걸 사용했다.&lt;/li&gt;
  &lt;li&gt;ruby 설치하기 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기
지킬 블로그는 ruby 패키지에 의존하여 동작하기 때문에 필수적으로 필요한 요소이다.&lt;br /&gt;
이것도 &lt;a href=&quot;https://github.com/actions/setup-ruby&quot;&gt;깃헙에서 제공&lt;/a&gt;한다.&lt;/li&gt;
  &lt;li&gt;gem 설치하기 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기&lt;br /&gt;
지킬 블로그에 빌드에 필요한 gem 을 설치해야 한다. (내 로컬과 동일하게)&lt;br /&gt;
여기서 삽질을 좀 했다.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;이 존재하지 않아서 gem 설치가 순서대로 되지 않아서 오류 발생&lt;/li&gt;
      &lt;li&gt;젬 디펜던시 설치가 너무 오래 걸림 (액션이 돌때마다 새로 설치)&lt;br /&gt;
 이에 대한 솔루션도 &lt;a href=&quot;https://github.com/actions/cache&quot;&gt;깃헙에서 제공&lt;/a&gt;하고 있어서 몇번 삽질 후에 성공적으로 적용하였다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;블로그 빌드 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기&lt;br /&gt;
&lt;a href=&quot;https://github.com/actions/cache&quot;&gt;기존에 프로덕션 배포시 사용하던 Rakefile을 일부 활용&lt;/a&gt;하였다. &lt;code class=&quot;highlighter-rouge&quot;&gt;rake site:generate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;블로그 배포 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기&lt;br /&gt;
쉘 스크립트 작성에 능숙치 못해서 여기에서 가장 많은 시간을 소요했다&lt;br /&gt;
대충 요악하면 여기에서 진행하려고 하던 작업은 이렇다.
    &lt;ol&gt;
      &lt;li&gt;블로그 빌드 결과물을 임시 디렉토리로 이동&lt;/li&gt;
      &lt;li&gt;작업 브랜치를 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치로 이동&lt;/li&gt;
      &lt;li&gt;블로그 빌드 결과물 적용&lt;/li&gt;
      &lt;li&gt;변경사항 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 내용을 github 저장소의 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치로 push&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;완성된-github-action-dsl&quot;&gt;완성된 Github Action DSL&lt;/h2&gt;

&lt;p&gt;내가 삽질하면서 작성한 Github Action DSL 은 &lt;a href=&quot;https://github.com/JeHuiPark/JeHuiPark.github.io/pull/3&quot;&gt;여기서&lt;/a&gt; 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;캐시경로를 상대 경로로 설정 하였던 부분이 &lt;strong&gt;블로그 배포 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기&lt;/strong&gt; 부분의 작업내용과 충돌하는 부분이 있어서, &lt;code class=&quot;highlighter-rouge&quot;&gt;cache hit&lt;/code&gt; 를 하지 못하는 이슈가 발생해서 아래와 같은 스텝으로 조치하였다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JeHuiPark/JeHuiPark.github.io/pull/11&quot;&gt;캐시 강제업데이트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JeHuiPark/JeHuiPark.github.io/pull/13&quot;&gt;캐시경로 변경&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;깃헙액션-동작-결과&quot;&gt;깃헙액션 동작 결과&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75608419-9391da80-5b42-11ea-87ed-498fc2f5a657.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Feb 2020 22:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/blog-publish-with-github-action</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/blog-publish-with-github-action</guid>
        
        <category>github</category>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>Github 다중계정 관리</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#깃헙-계정이-여러개일-땐-어떻게-해야할까&quot; id=&quot;markdown-toc-깃헙-계정이-여러개일-땐-어떻게-해야할까&quot;&gt;깃헙 계정이 여러개일 땐 어떻게 해야할까?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh-키-생성&quot; id=&quot;markdown-toc-ssh-키-생성&quot;&gt;ssh 키 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh-공개키를-깃헙-설정에-추가&quot; id=&quot;markdown-toc-ssh-공개키를-깃헙-설정에-추가&quot;&gt;ssh 공개키를 깃헙 설정에 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh-비공개키를-ssh-agent에-등록&quot; id=&quot;markdown-toc-ssh-비공개키를-ssh-agent에-등록&quot;&gt;ssh 비공개키를 ssh-agent에 등록&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh-agent-설정에-github-호스트-추가&quot; id=&quot;markdown-toc-ssh-agent-설정에-github-호스트-추가&quot;&gt;ssh-agent 설정에 Github 호스트 추가&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#remote-저장소-등록&quot; id=&quot;markdown-toc-remote-저장소-등록&quot;&gt;remote 저장소 등록&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#무엇이-다른가&quot; id=&quot;markdown-toc-무엇이-다른가&quot;&gt;무엇이 다른가?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참조&quot; id=&quot;markdown-toc-참조&quot;&gt;참조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;깃헙-계정이-여러개일-땐-어떻게-해야할까&quot;&gt;깃헙 계정이 여러개일 땐 어떻게 해야할까?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Basic Credentials&lt;/code&gt; 방식을 이용할 할 때는 레파지토리별로 로그인이 가능하기 때문에 별문제가 되지 않는다.&lt;br /&gt;
하지만, ssh 방식을 이용하게 된다면?? 아래와 같이 추가적인 작업이 필요하다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ssh 키 생성&lt;/li&gt;
  &lt;li&gt;ssh 공개키를 깃헙 설정에 추가&lt;/li&gt;
  &lt;li&gt;ssh 비공개키를 ssh-agent에 등록&lt;/li&gt;
  &lt;li&gt;ssh-agent 설정에 Github 호스트 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ssh-키-생성&quot;&gt;ssh 키 생성&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa -C &quot;pjh2359@gmail.com&quot; -f ~/.ssh/example_key&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75110717-eb2cd380-5674-11ea-91fb-a8d09dae6e6b.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;example_key&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;example_key.pub&lt;/code&gt; 이 생성된다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75110735-419a1200-5675-11ea-8c7a-9cd6ec51e514.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;비공개키&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;공개키&lt;/code&gt;로 이해하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;ssh-공개키를-깃헙-설정에-추가&quot;&gt;ssh 공개키를 깃헙 설정에 추가&lt;/h3&gt;
&lt;p&gt;우선 두가지 방법이 있는듯 하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;계정 설정에서 ssh 키 추가하기&lt;/li&gt;
  &lt;li&gt;레파지토리 설정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy key&lt;/code&gt; 설정하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나는 두가지 계정 설정에 ssh 키를 추가하는 방법을 선택하여 진행했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75110801-ff250500-5675-11ea-8abf-2bfa5cbb37bc.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75110827-4a3f1800-5676-11ea-8bef-60f11f2452bf.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75110840-85414b80-5676-11ea-8540-c5c9a0281753.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;제목은 편하게 작성하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;입력란에 미리 복사해둔 공개키를 붙여놓고 저장한다.&lt;/p&gt;

&lt;h3 id=&quot;ssh-비공개키를-ssh-agent에-등록&quot;&gt;ssh 비공개키를 ssh-agent에 등록&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-add example_key&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75110921-92ab0580-5677-11ea-8376-b5da817c72c9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ssh-agent-설정에-github-호스트-추가&quot;&gt;ssh-agent 설정에 Github 호스트 추가&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.ssh
vi config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt;&lt;/strong&gt; 파일 작성 (ssh-agent 설정파일)&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 회사계정&lt;/span&gt;
Host github.com
    HostName github.com
    User git
    IdentityFile another_key
&lt;span class=&quot;c&quot;&gt;# 개인계정&lt;/span&gt;
Host github-jehuipark
    HostName github.com
    User git
    IdentityFile example_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;remote-저장소-등록&quot;&gt;remote 저장소 등록&lt;/h2&gt;
&lt;p&gt;ssh 인증방식을 이용할 때는 원격 저장소 위치를 ssh 규격에 맞추어 작성하게 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;회사계정으로 접근가능한 레파지토리를 등록하자&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add ${remote-name} git@github.com:${github-username}/${github-reponame}&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개인계정으로 접근가능한 레파지토리를 등록하자&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add ${remote-name} git@github-jehuipark:${github-username}/${github-reponame}&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;무엇이-다른가&quot;&gt;무엇이 다른가?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git@github.com&lt;/code&gt;: github.com 으로 포워딩 하며, &lt;code class=&quot;highlighter-rouge&quot;&gt;another_key&lt;/code&gt; 키를 사용하도록 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git@github-jehuipark.com&lt;/code&gt;: github.com 으로 포워딩 하며, &lt;code class=&quot;highlighter-rouge&quot;&gt;example_key&lt;/code&gt; 키를 사용하도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;https://medium.com/@therajanmaurya/git-push-pull-with-two-different-account-and-two-different-user-on-same-machine-a85f9ee7ec61&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 23 Feb 2020 11:42:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/github-multiple-accounts-manage</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/github-multiple-accounts-manage</guid>
        
        <category>ssh</category>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>Github 블로그 개발 환경을 Docker로 구성하자</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#블로그를-방치했던-가장-큰-이유&quot; id=&quot;markdown-toc-블로그를-방치했던-가장-큰-이유&quot;&gt;블로그를 방치했던 가장 큰 이유&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#환경-구성이-귀찮았던-이유&quot; id=&quot;markdown-toc-환경-구성이-귀찮았던-이유&quot;&gt;환경 구성이 귀찮았던 이유&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#내-블로그-살리자&quot; id=&quot;markdown-toc-내-블로그-살리자&quot;&gt;내 블로그 살리자&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#계획&quot; id=&quot;markdown-toc-계획&quot;&gt;계획&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#실행-고군분투기&quot; id=&quot;markdown-toc-실행-고군분투기&quot;&gt;실행 (고군분투기)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#보너스&quot; id=&quot;markdown-toc-보너스&quot;&gt;보너스&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마치며&quot; id=&quot;markdown-toc-마치며&quot;&gt;마치며&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#앞으로-할-일&quot; id=&quot;markdown-toc-앞으로-할-일&quot;&gt;앞으로 할 일&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;몇 가지 이유로 나는 이 블로그를 거의 1년간 방치하고 있었다. (&lt;del&gt;&lt;em&gt;사실 핑계&lt;/em&gt;&lt;/del&gt;)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2019년 06월 이직&lt;/li&gt;
  &lt;li&gt;지킬 블로그 개발환경 구성이 너무나 귀찮다&lt;/li&gt;
  &lt;li&gt;올바른 객체지향 설계를 위한 개념 잡기에 몰두&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;블로그를-방치했던-가장-큰-이유&quot;&gt;블로그를 방치했던 가장 큰 이유&lt;/h1&gt;
&lt;p&gt;개발환경 구성이 너무나 귀찮다는 점이다.&lt;/p&gt;

&lt;h2 id=&quot;환경-구성이-귀찮았던-이유&quot;&gt;환경 구성이 귀찮았던 이유&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;운영환경으로 부터 독립적이지 못함 (여기서 운영환경은 지킬서버가 돌아가는 환경을 말함 -&amp;gt; 개발환경)&lt;/li&gt;
  &lt;li&gt;깃헙에게 지킬 빌드를 위임하는 방식이 아닌 로컬 빌드 방식을 택함 (그 이유는 &lt;a href=&quot;https://jehuipark.github.io/blog/blog-publish&quot;&gt;여기에&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내-블로그-살리자&quot;&gt;내 블로그 살리자&lt;/h1&gt;
&lt;p&gt;일단 기존의 문제점은 내가 가장 잘 알고있는 상태이기 때문에 어떻게 살릴지에 대한 추상적은 계획은 세워두었다.&lt;/p&gt;

&lt;h2 id=&quot;계획&quot;&gt;계획&lt;/h2&gt;
&lt;p&gt;아주 간단하다 도커를 활용하여 운영환경에서 분리하여 손쉽게 개발환경 구축이 가능하게 만들면 된다.&lt;br /&gt;
다만, 나는 도커에 자신이 없다. (걸음마 수준)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;그래서 나는 &lt;a href=&quot;https://www.44bits.io/ko/post/how-docker-image-work&quot;&gt;이 글&lt;/a&gt;을 참고하여 작업했다. (감사합니다 ❤️)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;실행-고군분투기&quot;&gt;실행 (고군분투기)&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;가장 먼저 jekyll 이미지를 땡겨 받자.  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull jekyll/jekyll&lt;/code&gt;&lt;br /&gt;
&lt;a href=&quot;https://hub.docker.com&quot;&gt;도커허브&lt;/a&gt;에서 jekyll을 검색하면 pull command를 확인할 수 있으며, 기초적인 레퍼런스도 확인이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git에서 내 블로그 소스코드를 clone하자.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 블라블라블라블라&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;터미널에서 내 블로그 소스코드 위치로 이동하자.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605023-56bbf180-5107-11ea-8605-3a9851342ce3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;레퍼런스에 있는 커맨드를 그대로 일단 터미널에 때리자
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.8
docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll:&lt;span class=&quot;nv&quot;&gt;$JEKYLL_VERSION&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;때리고 나서 확인해보니 현재 경로를 컨테이너의 &lt;code class=&quot;highlighter-rouge&quot;&gt;/srv/jekyll&lt;/code&gt; 경로로 마운팅 시킨다는 옵션이 있는걸 확인했다. (&lt;del&gt;제대로 했군ㅋ&lt;/del&gt;)&lt;br /&gt;
명령어를 확인해보면 3.8 버전을 사용하도록 하고 있는데, 지킬 블로그 구성할 때 지킬 버전이 몇이였는지 기억이 안난다. 문제생기면 확인 하기로 하고 일단 수정하지 않기로 했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오류가 난다… 역시 한번에 되면 섭하지&lt;br /&gt;
  오류 내용은 이랬다. -&amp;gt; 대충 &lt;code class=&quot;highlighter-rouge&quot;&gt;지킬 빌드에 필요한 어떤 디펜던시가 존재하지 않는다&lt;/code&gt; 라는 내용&lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605184-034aa300-5109-11ea-81dd-4cbe7e65a2c9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;처방전을 내리자.&lt;br /&gt;
  &lt;em&gt;여기선 이렇게 간단하게 쓰지만 지킬을 너무 오랜만에 접해서 기억을 더듬느라 힘들었음&lt;/em&gt;&lt;br /&gt;
  과거의 내가 왜 그랬는지 기억이 나질 않지만 루비 모듈 의존성을 관리하는 Gemfile을 과거에 삭제해서 생긴 문제이다.
    &lt;ol&gt;
      &lt;li&gt;Gemfile을 일단 생성하자.
        &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-sitemap&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;또 오류가 난다.&lt;br /&gt;
 여기서 지킬 블로그 설정을 관리하는 파일을 확인 해야겠다는 생각이 들었다. &lt;br /&gt;
 &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605336-a5b75600-510a-11ea-8fcd-f14aa01099e8.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 오류 내용과 플러그인 리스트가 일치하는 거 보니 내 예상이 맞는듯 하다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Gemfile을 지킬 설정과 동기화 시키자.
        &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-sitemap&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-mentions&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-seo-tag&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-gist&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-redirect-from&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jemoji&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이제 레퍼런스에 있는 커맨드를 그대로 일단 터미널에 때리자&lt;br /&gt;
  오오오오 뭔가 되는듯 하다가 오류없이 작업이 종료 되었다. (엥?)&lt;br /&gt;
  내가 원하는건 4000 포트로 로컬서버가 구동되는건데?&lt;br /&gt;
  커맨드를 자세히 보니 컨테이너 구동완료후 실행할 명령어가 내가 원하는 명령어가 아니였다&lt;br /&gt;
  레퍼런스 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;, &lt;strong&gt;내가 원하는 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;명령어를 수정하자 (1차)
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;오 이번엔 뭔가 된 것 같다?&lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605502-e9f72600-510b-11ea-97ff-28c307d10a26.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
  &lt;strong&gt;아니다 안된다&lt;/strong&gt;&lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605875-29734180-510f-11ea-9aeb-5a0e8bd001f5.png&quot; alt=&quot;image&quot; /&gt; 
  서버가 올라갔는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;으로 접속을 못하는 이유는 컨테이너와 호스트 포트 바인딩 문제라고 판단했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;명령어를 수정하자 (2차)
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;잘 된다&lt;/strong&gt;&lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605870-1c565280-510f-11ea-934d-2c695bfc4746.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
  잘 되지만 지금 상태에서는 &lt;strong&gt;문제점&lt;/strong&gt;이 있다.&lt;br /&gt;
  docker run을 할 때마다 루비 모듈을 처음부터 내려 받느라 엄청난 시간을 소요함&lt;br /&gt;
  도커허브의 jekyll 이미지 레퍼런스를 확인하니 &lt;a href=&quot;https://github.com/envygeeks/jekyll-docker/blob/master/README.md#caching&quot;&gt;이런내용&lt;/a&gt;이 존재했다.&lt;br /&gt;
  대충 &lt;code class=&quot;highlighter-rouge&quot;&gt;컨테이너의 루비 모듈 설치경로와 호스트의 볼륨을 마운팅 시켜라&lt;/code&gt;라는 내용&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;docker run할 때 컨테이너 이름을 지정하여 docker start와 stop을 이용하는 방법도 존재하며,&lt;br /&gt;
  이 방법은 컨테이너를 새로 생성할 경우에 루비 모듈을 처음부터 내려 받아야 한다&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;명령어를 수정하자 (3차)
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cache/bundle:/usr/local/bundle&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; blog &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll:3.8 
  jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;컨테이너의 루비 모듈 설치경로와 호스트 경로의 볼륨을 마운팅 하라는 옵션을 추가하고, 컨테이너 이름을 blog로 지정했다.&lt;br /&gt;
  추가로 루비 모듈 캐시경로를 git에서 추적하지 않도록 설정을 추가했다.&lt;br /&gt;
  이제 컨테이너를 지우고 다시 생성해도 &lt;code class=&quot;highlighter-rouge&quot;&gt;.cache&lt;/code&gt; 디렉토리에 미리 설치된 루비 모듈이 존재하니, &lt;strong&gt;한번이라도 환경구성을 했다면&lt;/strong&gt; 컨테이너 구동이 이전보다는 굉장히 빨라졌다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;docekr-compose를 작성하자&lt;br /&gt;
  최초 환경 구동시에 더 편하게 환경울 구성하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;을 작성했다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;보너스&quot;&gt;보너스&lt;/h2&gt;
&lt;p&gt;최초 환경 구동시에 더 편하게 환경울 구성하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;을 작성했다.&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;blog&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll/jekyll:3.8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4000:4000&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$PWD:/srv/jekyll&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$PWD/.cache/bundle:/usr/local/bundle&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll serve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;
&lt;p&gt;이 작업으로 나는 이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 블라블라블라&lt;/code&gt; 명령어와 도커를 이용하여 블로그 개발환경을 구성할 수 있게 되었다.&lt;br /&gt;
하지만 아직도 개선할 점은 남아있다.&lt;/p&gt;

&lt;h2 id=&quot;앞으로-할-일&quot;&gt;앞으로 할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CD 구성하기&lt;br /&gt;
  이건 과거에 윈도우 환경에서 &lt;a href=&quot;https://jehuipark.github.io/blog/blog-publish&quot;&gt;배포자동화&lt;/a&gt;를 위해 사용하던 Rakefile을 참고하면 될 듯 하다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 16 Feb 2020 16:26:00 +0900</pubDate>
        <link>https://jehuipark.github.io/blog/blog-env-setting-with-docker</link>
        <guid isPermaLink="true">https://jehuipark.github.io/blog/blog-env-setting-with-docker</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>오브젝트</title>
        <description>&lt;p&gt;오브젝트&lt;/p&gt;

&lt;p&gt;책을 보기위한 기본소양을 갖추기 위하여 아래와 같은 내용을 소개
개발자들은 코딩을 왜 할까? motivation = 돈
왜 그렇게 짰어? 돈이 덜드니까.. 이렇게 하면 돈을 버니까 왜 ???&lt;/p&gt;

&lt;h2 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h2&gt;
&lt;p&gt;철학에 관한 이야기&lt;/p&gt;

&lt;p&gt;켄트백은 생각하는 코드의 틀로 3가지를 제안&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Value 가치
    &lt;ul&gt;
      &lt;li&gt;Communication 소통하기 쉬운 코드&lt;/li&gt;
      &lt;li&gt;Simplicity 간단한 코드&lt;/li&gt;
      &lt;li&gt;Flexibility 유연한 코드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Principle 원칙 - 예외적인 상황을 즉각적으로 파악할 수 있게 한다.
    &lt;ul&gt;
      &lt;li&gt;Local consequenes 생명주기는 되도록이면 짧게&lt;/li&gt;
      &lt;li&gt;Minimize repetition 중복은 최소화 (중복은 발견되는 것)&lt;/li&gt;
      &lt;li&gt;Symmetry 짝을 맞추어라&lt;/li&gt;
      &lt;li&gt;Convention&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pattern 패턴 (가치와 원칙을 베이스로 하는 반복되는 유형 )
Xoriented // 이게뭐지? 어떠한 유형의 사고의 틀?
OOP: SOLID, DRY
Functional,
Reactive,
…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q. 강의에서 아래 내용은 왜 나온것일까??&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Relativism: 토마스 쿤 (과학혁명의 구조)
  과학은 절대적인 진리가 아닌 상대적이다.&lt;br /&gt;
  현재 우리가 알고 있는 과학은 어떻게 보면 종교와 비슷하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rationalism: 러커토시 임레(수학적 발견의 논리: 증명과 반박)
  과학은 합리적이다라며 근거를 제시&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A. 합리주의를 통해 기준을 도출하고 기준점을 토대로 상대성을 갖는다
상대주의와 합리주의를 공존, 사고방식을 넓혀라&lt;/p&gt;

&lt;p&gt;시시각각 변화하는 요구사항을 계속 수렴하면서 납기일을 지켰다.
  어떻게? 그게 바로 이책의 주제
유연성, 격리성, 견고성&lt;/p&gt;

&lt;p&gt;변화에 따른 격리, 어떻게?
현재 객체지향 방법론에서 도메인을 격리시킬 유일한 수단은 역활모델
역활모델을 이해하고 OOP 세계에 입문해야 한다
역활모델 설계를 잘하려면? 추상화를 잘 해야한다.&lt;/p&gt;

&lt;h2 id=&quot;abstraction&quot;&gt;Abstraction&lt;/h2&gt;
&lt;p&gt;Generalization: 일반화 - modeling, function, algorithm
Association: 연관화 - reference, dependence
Aggregation: 집단화 - group, category&lt;/p&gt;

&lt;p&gt;데이터 추상화
  모델링: 어떤 목적에 맞추어서 필요한 정보를 추려내는 작업
  카테고리 분류
  공통분모&lt;/p&gt;

&lt;p&gt;절차(함수) 추상화
  일반화
    함수의 개수가 줄어든다 « 공통점을 찾아서 인터페이스를 추출&lt;/p&gt;

&lt;p&gt;캡슐화 (캡슐화에 대한 정의는 여러가지가 존재)
    캡슐화 개념이 왜 나왔을까?
      캡슐화에 실패한다면 복잡성이 노출되며 사용자의 지능이 높아져야한다. » 휴먼에러가 높아진다, (사용성이 낮아진다)
      캡슐화에 성공한다면 사용자의 사용성이 높아진다. » 휴먼에러가 낮아진다 (사용성이 높아진다)&lt;/p&gt;

&lt;p&gt;객체 추상화
  Generalization
  Realization
  Dependency
  Association
  ..&lt;/p&gt;

&lt;p&gt;객체지향이 어려운 이유는?? 실제로 코드레벨에 이러한 개념을 실제로 적용하는건 상당히 어렵다
이해하고 코드레벨에 적용이 된다면 유연성, 격리성, 견고성을 확보하게 될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;program--timing&quot;&gt;Program &amp;amp; Timing&lt;/h2&gt;
&lt;p&gt;프로그램 생명주기? (스크립트는 생략)
  LANGUAGE CODE // LINT TIME
  MACHINE LANGUAGE // COMPILE TIME
  FILE
  LOAD
  RUN  // RUN TIME
  TERMINATE&lt;/p&gt;

&lt;p&gt;폰 노이만 머신 (동기화 명령)
메모리 영역에 명령이 적재된 순서대로 실행
Runtime
  Loading
    메모리 명령세트와, 값세트가 로드
  Instruction Fetch &amp;amp; Decoding
    CPU 제어유닛(디코더), 연산유닛(제어정보), 데이터유닛(메모리 계수기) « 외부버스
    디코더는 메모리영역에 있는 명령을 페칭 후 디코딩 (메모리 영역에 있는 명령을 CPU가 이해할 수 있는 명령으로 변경하는 단계)
    그리고 연산유닛으로 명령을 전달
  execution
    연산유닛은 명령 실행을 위한 값을 데이터유닛으로 부터 전달 받고 실행후 결과값 데이터유닛에게 전달, 데이터유닛은 메모리의 특정영역에 값을 전달&lt;/p&gt;

&lt;p&gt;loading 과정을 좀 더 디테일하게 (언어마다 상이한점은 존재하지만 유사)
  essential definition loading 프로그램을 구동하기 위한 기초적인 정의부터 로딩 (컴파일러가 처리)
  vtable mapping 변수와 메모리가 매핑될 수 있는 이유 » 가상 메모리와 실제 메모리를 매핑하는 표를 생성
  run
  runtime definition loading 자바의 클래스로더를 생각하면 된다. (c는 해당 개념이 존재하지 않는다)
  run&lt;/p&gt;

&lt;p&gt;Runtime은 상대적이다, 유연하다, 애매모호&lt;/p&gt;

&lt;h2 id=&quot;pointer-of-pointer&quot;&gt;Pointer of Pointer&lt;/h2&gt;
&lt;p&gt;특정 포인터를 직접 가리키지 않고, 어떤 값을 얻기 위해서 포인터를 찾은 후 그 포인터를 보고 포인터를 다시 찾는다
a = “TEST”  // a의 주소는 11이라고 가정
b = &amp;amp;a      // b는 a의 주소인 11이라는 주소값을 갖겠지? 포인터b는 “TEST”가 될것이고
c = b, d = b // c와 d도 b가 가리키고 있는 a의 주소를 갖게 될꺼야
k = “ABC”   // k의 주소가 28이라고 가정
b = &amp;amp;k      // 여기부터 b는 k의 주소인 28을 가리키게 될꺼야&lt;/p&gt;

&lt;p&gt;여기서 발생하는 문제는????
c와 d는 b와 같은것이라고 착각하게 만든다 (직접참조의 문제) c,d != b&lt;/p&gt;

&lt;p&gt;b = {a: &amp;amp;b, v:3} // 참조에 참조 개념 (간접참조)
c = b, d = b
b.a = &amp;amp;k&lt;/p&gt;

&lt;p&gt;이러한 개념은 interface에 활용된다고 함&lt;/p&gt;

&lt;h1 id=&quot;value--identifier&quot;&gt;Value &amp;amp; Identifier&lt;/h1&gt;
&lt;p&gt;객체지향에서 객체의 동질성을 평가하는 방법은? 객체의 식별자&lt;/p&gt;

&lt;h1 id=&quot;polymoriphism&quot;&gt;Polymoriphism&lt;/h1&gt;
&lt;p&gt;Substituion 대체가능성
Internal identity 내적동질성&lt;/p&gt;

&lt;p&gt;대체 가능성에 대한 설명
객체의 다양성은 공짜가 아니다.
그만큼의 연산이 추가된다&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Worker implements Runnable {
  @Override public void run(){
    //..
  }
}
Runnable worker = new Worker();
worker.run();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해당 코드가 동작되는 실제 과정은 이렇다.
Runnable이라는 인터페이스 안에 있는 포인터안에서 run이라는 포인터를 찾고, 그대로 쓸 수없으니
구현체의 메소드의 포인터를 찾은 후 실행된다.
이러한 과정은 컴파일 타임에 개별 포인터 참조 구조체들을 데피니션 타임에 로딩 (이것은 C++베이스 코드 기반)&lt;/p&gt;

&lt;p&gt;내적 동질성을 설명하는 코드&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Worker implements Runnable {
  @Override public void run(){
    //..
  }
  public void print(){
    run();
  }
}
class HardWorker extends Worker {
  @Override void run(){
    // ...
  }
}
Runnable worker = new HardWorker();
worker.print();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 22 Jul 2019 00:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/object-chapter1</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/object-chapter1</guid>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>책봐라 제희야</title>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;제목&lt;/th&gt;
      &lt;th&gt;저자&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;이펙티브 자바&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt;조슈아 블로&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;클린코드 애자일 소프트웨어 장인정신&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt;로버트C. 마틴&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;도메인 주도 설계&lt;/td&gt;
      &lt;td&gt;에릭 에반스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;자바 ORM 표준 JPA 프로그래밍&lt;/td&gt;
      &lt;td&gt;김영한&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;오브젝트&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt;조양호&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;헤드퍼스트 디자인패턴&lt;/td&gt;
      &lt;td&gt;이거먼저 보고&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GOF의 디자인패턴&lt;/td&gt;
      &lt;td&gt;이거보는거 추천&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;켄트 벡의 구현 패턴&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Sun, 16 Jun 2019 17:26:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/book-read-plan</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/book-read-plan</guid>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>트랜잭션이 동작하지 않는다.</title>
        <description>&lt;p&gt;팀장님으로부터 어떤 업무를 처리할 서버앱을 데모형태로 먼저 개발해달란 요청이 들어왔고, 여느때와 다름없이 springboot를 이용하여 빠르게 구축하였다.&lt;/p&gt;

&lt;p&gt;프로젝트에서 사용될 핵심 의존성은 대충 아래와 같았다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;의존성&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;querydsl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-data-jpa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mariadb&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;문제는 데이터 레이어 개발을 끝내고 테스트 진행중에 발생하였다……ㅠㅠ&lt;/p&gt;

&lt;h2 id=&quot;이슈-발견&quot;&gt;이슈 발견&lt;/h2&gt;

&lt;p&gt;Test를 위해 스프링부트에서 지원하는 DataJpaTest 어노테이션을 이용하여 슬라이싱 테스트를 진행하였고 몇번의 시행착오를 겪으며 테스트를 통과시킨 후 데이터베이스를 확인해봤는데, &lt;strong&gt;롤백됬어야 될 데이터들이 차곡차곡 쌓이고 있엇다..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;원래라면 DataJpaTest 어노테이션을 이용하여 테스트를 진행할경우 Transaction 옵션이 자동으로 활성화되며 JUnit Test에서 Transaction 옵션이 활성화 될 경우에 단위 테스트가 종료될 때마다 테스트 도중에 변경되었던 데이터는 자동으로 Rollback처리 되어야한다. 이게 기본 옵션이다.&lt;/p&gt;

&lt;h2 id=&quot;어떤-이슈&quot;&gt;어떤 이슈?&lt;/h2&gt;
&lt;p&gt;그럼에도 불구하고 데이터베이스에는 단위테스트에서 생성되고 있던 데이터가 차곡차곡 쌓이고 있었다.
&lt;strong&gt;여기에서 나는 트랜잭션이 정상적으로 동작하고 있지 않다고 판단했다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제가-없는데&quot;&gt;문제가 없는데?&lt;/h2&gt;
&lt;p&gt;이상해서 다시 테스트를 돌리며 로그를 자세히 확인해봤지만, 로그상으로는 전혀 문제가 없었다. 평소와 다름없이 트랜잭션이 열리고, 롤백처리되는 것 까지 전부 정상적인 로그뿐이였다.
&lt;strong&gt;여기서부터 멘붕이 오기 시작했다…&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;이유가-뭘까&quot;&gt;이유가 뭘까?????&lt;/h2&gt;
&lt;p&gt;데모 프로젝트는 아래처럼 멀티 프로젝트 구조를 가지고 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;root &lt;br /&gt;
└ module-a        (core, root에 의존) &lt;br /&gt;
└ module-b        (core, root에 의존) &lt;br /&gt;
└ module-core     (root에 의존) &lt;br /&gt;
└ &lt;strong&gt;module-demo&lt;/strong&gt; (root에 의존)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제일 먼저 module-core에서도 DataJpaTest 어노테이션을 이용하여 테스트를 진행 했었기 때문에, 혹시몰라서 테스트코드에 트랜잭션 롤백처리 테스트 코드도 추가를 하고 테스트를 진행 하였지만 아무 문제가 없었다.&lt;/p&gt;

&lt;p&gt;module-demo는 다른 node 수준의 프로젝트와는 무관한 프로젝트라고 생각하고 시작했지만, 막상 테스트도중 아무 문제가 없는거 같은데, 아니 없어야 되는데 이슈가 터지다보니 제정신이 아니였나보다… 여기서 내 자신을 의심하기 시작했다 ㅋㅋㅋㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;&lt;del&gt;혹시나 module-a와 module-demo에서 사용중인 restdoc플러그인 때문에??? 아니면 module-core와 module-demo에서 사용중인 querydsl플러그인 때문에??? 부끄럽다.. 진짜 의심할 수 있는 모든것을 의심하며 3일을 소비했다…&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;원인을-찾았고-해결했다&quot;&gt;원인을 찾았고 해결했다.&lt;/h2&gt;
&lt;p&gt;결론부터 말하면 &lt;strong&gt;데이터베이스 저장소 엔진이 문제였다.&lt;/strong&gt; &lt;del&gt;지식이 부족했음&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;MariaDB를 사용중이였는데, MySQL계열 데이터베이스에는 대표적인 StorageEngine으로 &lt;strong&gt;MyISAM&lt;/strong&gt; 엔진과 &lt;strong&gt;InnoDB&lt;/strong&gt;엔진이 있다고 한다. 여기서 &lt;strong&gt;MyISAM엔진은 트랜잭션을 지원하지 않는 엔진&lt;/strong&gt;인데 &lt;strong&gt;데모앱에서 액세스한 테이블만 MyISAM엔진&lt;/strong&gt;으로 설정이 되있었다…
(나머지는 다 InnoDB엔진 아니……. 왜? ㅋㅋㅋㅋㅋㅋㅋㅋ 그래서 다른 엔티티로 트랜잭션 테스트를 할땐 잘됬던……….)&lt;/p&gt;

&lt;p&gt;물론 데이터베이스 설정자체를 의심하지 않은것은 아니였다. 의심을 하긴 했지만, Global설정만 확인하여 문제점을 빠르게 찾지 못했던것 같았다. &lt;strong&gt;테이블별로 저장소 엔진 설정이 가능하다는 점을 알았어야 됬는데…&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어쩐지 프로젝트 구조 똑같이 새로만들어서 H2 DB 임베디드해서 테스트하니까 잘되더라 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 02 Jun 2019 20:26:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/transaction-do-not-work-issue</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/transaction-do-not-work-issue</guid>
        
        <category>database</category>
        
        
        <category>note</category>
        
      </item>
    
  </channel>
</rss>
