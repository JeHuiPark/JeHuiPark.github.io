<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

  <channel>
    <title>JH Blog</title>
    <description>developer JH website.</description>
    <link>https://jehuipark.github.io/</link>
    <atom:link href="https://jehuipark.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 01 May 2020 22:37:49 +0900</pubDate>
    <lastBuildDate>Fri, 01 May 2020 22:37:49 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>디자인 패턴 : Singleton</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#정의&quot; id=&quot;markdown-toc-정의&quot;&gt;정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#특징&quot; id=&quot;markdown-toc-특징&quot;&gt;특징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#예제코드&quot; id=&quot;markdown-toc-예제코드&quot;&gt;예제코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;클래스에 대한 인스턴스를 하나로 제한하는 패턴&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;인스턴스의 개수가 1개임을 보장&lt;/li&gt;
  &lt;li&gt;access point 제한&lt;/li&gt;
  &lt;li&gt;유일한 인스턴스이면서 서브 클래싱으로 확장을 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예제코드&quot;&gt;예제코드&lt;/h2&gt;
&lt;p&gt;생성자를 은닉시키고, 객체 생성을 제한하여 인스턴스가 1개임을 보장하는 것에 초점을 맞춘다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;간단한 싱글톤&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;thread-safe&lt;/code&gt; 요구사항이 없다면 아래와 같은 구현으로 충분하다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicSingleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BasicSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// thread non safe&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;안전한 싱글톤&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;thread safe&lt;/code&gt; 요구사항이 있다면 생성자 구현에 좀현 더 신경을 써야한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThreadSafeSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;safetyInitialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safetyInitialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;서브클래싱을 지원하는 싱글톤&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceRegistry&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE_REGISTRY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SuperSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;INSTANCE_REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookupInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookupInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookupInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE_REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;REGISTRY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/tree/master/design-pattern/src/main/java/com/example/jehuipark/singleton&quot;&gt;예제코드&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/tree/master/design-pattern/src/test/java/com/example/jehuipark/singleton&quot;&gt;예제코드 테스트&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;GoF의 디자인 패턴 p181 - p190&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 01 May 2020 20:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/singleton-pattern</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/singleton-pattern</guid>
        
        <category>디자인 패턴</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>디자인 패턴 : Prototype Design Pattern</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#정의&quot; id=&quot;markdown-toc-정의&quot;&gt;정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#효과&quot; id=&quot;markdown-toc-효과&quot;&gt;효과&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#구조&quot; id=&quot;markdown-toc-구조&quot;&gt;구조&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#적용예시&quot; id=&quot;markdown-toc-적용예시&quot;&gt;적용예시&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#고려-사항&quot; id=&quot;markdown-toc-고려-사항&quot;&gt;고려 사항&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;원본 객체를 사용하여 새로운 사본 객체를 생성하는 패턴&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;복사 객체의 타입은 서브 클래스에서 정의&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;효과&quot;&gt;효과&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트에서 같은 상태의 객체를 생성하기 위해 알아야 할 정보가 줄어든다.&lt;/li&gt;
  &lt;li&gt;팩토리 메소드와 다르게 객체 생성에 대한 책임을 클라이언트에게 일부 위임하기 때문에 인스턴스를 쉽게 다양화 시킬 수 있다.
    &lt;blockquote&gt;
      &lt;p&gt;서브 클래싱 감소&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스의 인스턴스들이 서로 다른 상태 조합중 하나일 때 유용하다.
    &lt;blockquote&gt;
      &lt;p&gt;프로토 타입 인스턴스를 기반으로 동적으로 클래스에 따라 설정을 변경하여 사용&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구조&quot;&gt;구조&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/tree/master/design-pattern/src/main/java/com/example/jehuipark/prototype_pattern&quot;&gt;예제코드&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/blob/master/design-pattern/src/test/java/com/example/jehuipark/prototype_pattern/ClientTest.java&quot;&gt;예제코드 테스트&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80703013-f5f46080-8b1c-11ea-9dc0-f8b4d0aa94b1.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;적용예시&quot;&gt;적용예시&lt;/h2&gt;
&lt;p&gt;Java 에서 json 처리를 위해 자주 사용되는 라이브러리 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jackson&lt;/code&gt; 라이브러리를 살펴보면 원형패턴이 적용된 예시가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80708450-a4e96a00-8b26-11ea-9cc1-72b14688e92f.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80704003-c2b2d100-8b1e-11ea-95ac-491969cb41d4.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectMapper&lt;/code&gt; 에서 의존하는 몇몇 추상화 클래스들은 구현체에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; 메소드를 구현할 수 있도록 하여, &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectMapper&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; 메소드를 지원한다.&lt;/p&gt;

&lt;h2 id=&quot;고려-사항&quot;&gt;고려 사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;깊은 복사와 얕은 복사 타겟 설정
    &lt;blockquote&gt;
      &lt;p&gt;보통 상태머신 객체는 깊은 복사를, &lt;code class=&quot;highlighter-rouge&quot;&gt;stateless&lt;/code&gt; 객체는 얕은 복사를 하면 될 듯 하다&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;복사를 지원하지 않는 객체를 다수 포함하고 있다면, 복사기능을 구현하기 힘들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;GoF의 디자인 패턴 p169 - p180&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 30 Apr 2020 20:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/prototype_design_pattern</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/prototype_design_pattern</guid>
        
        <category>디자인 패턴</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>IntelliJ 잘 쓰기 Tip</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#no-newline-at-end-of-file&quot; id=&quot;markdown-toc-no-newline-at-end-of-file&quot;&gt;No newline at end of file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#보일러-플레이트-해결하기&quot; id=&quot;markdown-toc-보일러-플레이트-해결하기&quot;&gt;보일러 플레이트 해결하기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#livetemplate&quot; id=&quot;markdown-toc-livetemplate&quot;&gt;LiveTemplate&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#템플릿-만들기&quot; id=&quot;markdown-toc-템플릿-만들기&quot;&gt;템플릿 만들기&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#템플릿-적용위치-설정하기&quot; id=&quot;markdown-toc-템플릿-적용위치-설정하기&quot;&gt;템플릿 적용위치 설정하기&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#사용-예시&quot; id=&quot;markdown-toc-사용-예시&quot;&gt;사용 예시&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#filetemplate&quot; id=&quot;markdown-toc-filetemplate&quot;&gt;FileTemplate&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#터미널에서-intellij-실행하기&quot; id=&quot;markdown-toc-터미널에서-intellij-실행하기&quot;&gt;터미널에서 Intellij 실행하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;no-newline-at-end-of-file&quot;&gt;No newline at end of file&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;intelliJ&lt;/code&gt; 에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;커맨드&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; 단축키를 이용하여 테스트 클래스를 자동생성할 수 있는데, 이 기능을 그냥 이용하게 되면 거슬리는게 하나 있다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79998744-0b9ed000-84f6-11ea-845c-b0e5f621453b.gif&quot; alt=&quot;test_gen&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;소스트리&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80000609-4f92d480-84f8-11ea-81b9-685007f3347f.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;깃헙&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80001543-73a2e580-84f9-11ea-9614-1f321e55f53a.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;터미널&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79999509-f37b8080-84f6-11ea-9b31-2604fd811578.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EOF 전에 공백 라인이 없어서 생기는 문제인데, &lt;strong&gt;마지막 라인에 공백라인 하나만 추가&lt;/strong&gt;하면 해결된다.&lt;/p&gt;

&lt;p&gt;그런데 테스트 코드를 생성할 때 마다 공백라인을 추가하는 행위를 하자니 너무 원시적이며, 되게 자주 까먹는다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;PR 2번중에 1번꼴로 하는 실수였다.
이렇게 실수를 자주하다가 현타가와서 도구를 활용하기로 했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;더블 쉬프트 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;file and code templates&lt;/code&gt; 입력&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80002548-bfa25a00-84fa-11ea-866a-9af093ce17d1.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기에서 자주 사용하는 테스트 도구를 선택&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80002583-caf58580-84fa-11ea-8bc9-5889d91a3471.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;공백 라인을 추가한다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80002993-596a0700-84fb-11ea-9173-b05e93c795cf.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;끝!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;보일러-플레이트-해결하기&quot;&gt;보일러 플레이트 해결하기&lt;/h2&gt;
&lt;p&gt;코딩을 하다보면 보일러 플레이트가 상당히 많이 발생하는데 툴에서 지원하는 기능을 적절히 이용하면, 좀 더 스마트하게 작업을 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;livetemplate&quot;&gt;LiveTemplate&lt;/h3&gt;
&lt;p&gt;Example Java Test Code boilerplate&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences &amp;gt; Editor &amp;gt; Live Templates&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80306715-e06ef600-87ff-11ea-9cd5-541f0d5694a6.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;템플릿-만들기&quot;&gt;템플릿 만들기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80306796-668b3c80-8800-11ea-8a18-d0f53e5b3f51.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expression&lt;/code&gt; 에서는 이런식으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;groovy&lt;/code&gt; 문법을 지원한다.
    &lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;groovyScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_editor.getDocument().getText().split(\&quot;@.*Test\&quot;).length-1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;템플릿-적용위치-설정하기&quot;&gt;템플릿 적용위치 설정하기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80307282-fd58f880-8802-11ea-87ef-295d50537179.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java 파일에서 선언문 작성시에 라이브템플릿을 활성화 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;사용-예시&quot;&gt;사용 예시&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80307461-275eea80-8804-11ea-8634-69ea9ff0304c.gif&quot; alt=&quot;live_template&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filetemplate&quot;&gt;FileTemplate&lt;/h3&gt;
&lt;p&gt;Example Vue boilerplate&lt;br /&gt;
뷰로 프론트 작업을 한적이 있는데, 보일러플레이트 코드가 상당히 많아서 파일 템플릿을 적절하게 수정하여 작업 효율성을 높였다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences &amp;gt; Editor &amp;gt; file and code templates&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80306590-34c5a600-87ff-11ea-81be-af466056dfc0.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;터미널에서-intellij-실행하기&quot;&gt;터미널에서 Intellij 실행하기&lt;/h2&gt;
&lt;p&gt;작업을 하다보면 &lt;strong&gt;터미널에서 intellij 를 실행하고 싶을 때&lt;/strong&gt;가 자주있다.&lt;br /&gt;
그럴땐 이런 설정을 이용하면 된다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79994673-3d616800-84f1-11ea-9bc7-60151edc62ee.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79996611-9c27e100-84f3-11ea-81c2-c80c3b7c8152.gif&quot; alt=&quot;idea_open_in_terminal&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Apr 2020 23:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/use-intellij-more-well</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/use-intellij-more-well</guid>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>디자인 패턴 : 팩토리 메소드</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#정의&quot; id=&quot;markdown-toc-정의&quot;&gt;정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#내-생각&quot; id=&quot;markdown-toc-내-생각&quot;&gt;내 생각&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;GoF의 디자인 패턴(p156)에서는 팩토리 메소드에 대한 패턴을 이렇게 정의한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;객체 생성을 위한 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할 지에 대한 결정은 서브클래스가 내리도록 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;내-생각&quot;&gt;내 생각&lt;/h2&gt;
&lt;p&gt;이 문구를 보고 이상한 점을 느꼈다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;그렇다면 팩토리 메소드 패턴과 추상 팩토리 패턴의 차이는 뭐지? 말장난인가?&lt;br /&gt;
아직 나의 식견이 좁아서 그런 걸 수도 있다. 다음에 이 생각에 변화가 생긴다면, 이 문서를 갱신할 계획이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어쨌든, 이 패턴을 이용하여 이루고자 하는 목적은 이렇다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;마찬가지로 어플리케이션 코드와 결합도를 줄이기 위해서 추상화 타입을 반환한다.&lt;/li&gt;
  &lt;li&gt;생성에 대한 책임을 구체 클래스를 가장 잘 아는 클래스에게 위임한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예제코드도 작성해보려고 시도해보았지만, 예제 코드를 작성할 수록 머릿속에서 충돌이 일어나서 결국 작성중이던 예제코드를 지웠다.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2020 22:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/factory-method</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/factory-method</guid>
        
        <category>디자인 패턴</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>JUnit5 DisplayName 이 동작하지 않을 때</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#displayname-이-동작하지-않아요&quot; id=&quot;markdown-toc-displayname-이-동작하지-않아요&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@DisplayName&lt;/code&gt; 이 동작하지 않아요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#해결&quot; id=&quot;markdown-toc-해결&quot;&gt;해결&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@DisplayName&lt;/code&gt; of junit5 in intellij do not working&lt;/p&gt;

&lt;h2 id=&quot;displayname-이-동작하지-않아요&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@DisplayName&lt;/code&gt; 이 동작하지 않아요&lt;/h2&gt;

&lt;p&gt;JUnit5 를 이용하여 아래와 같은 테스트를 작성하고&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JunitExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;when coding enjoy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Context_Sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i am happy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이런 결과를 기대했지만?&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79642932-3974d380-81db-11ea-885d-0d5f033561b1.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런 화면이 나온다면..😭&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79642973-780a8e00-81db-11ea-9a50-73fbc778b980.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Run tests using&lt;/code&gt; 옵션을 변경 &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;intellij&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79643067-0ed74a80-81dc-11ea-95bd-2a163e6b1bbf.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Apr 2020 01:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/displayname-do-not-work-in-intellij</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/displayname-do-not-work-in-intellij</guid>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>디자인 패턴 : 추상 팩토리</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#정의&quot; id=&quot;markdown-toc-정의&quot;&gt;정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#특징&quot; id=&quot;markdown-toc-특징&quot;&gt;특징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#구조&quot; id=&quot;markdown-toc-구조&quot;&gt;구조&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#예제코드&quot; id=&quot;markdown-toc-예제코드&quot;&gt;예제코드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#예제코드-클래스-다이어그램&quot; id=&quot;markdown-toc-예제코드-클래스-다이어그램&quot;&gt;예제코드 클래스 다이어그램&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#관련-패턴&quot; id=&quot;markdown-toc-관련-패턴&quot;&gt;관련 패턴&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;객체 생성과 구성(협력관계)을 추상화 시킨 패턴으로 서버 코드와 클라이언트 코드의 결합도를 낮춘 디자인 패턴&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;클라이언트 코드에서는 구현체가 아닌 인터페이스에 의존한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트는 추상화 레이어에 의존하기 때문에
    &lt;ul&gt;
      &lt;li&gt;구현체와의 결합도가 낮아진다.&lt;/li&gt;
      &lt;li&gt;구현체를 교체하는 비용이 낮아진다.&lt;/li&gt;
      &lt;li&gt;대부분의 행위가 동적 바인딩으로 이루어지기 때문에 정적인 코드만으로는 내부적으로 어떻게 동작하는지 추적하기가 힘들다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구현체의 응집도가 높아진다.
    &lt;ul&gt;
      &lt;li&gt;구현체의 생명주기가 팩토리 생성자에 의해 제어된다.&lt;/li&gt;
      &lt;li&gt;구현체 사이의 일관성이 높다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;추상 팩토리에 대한 의존성으로 인하여 확장에 패널티를 갖는다.
    &lt;ul&gt;
      &lt;li&gt;표준화 인터페이스를 공유하는 특화 모듈을 구현할 때 마다, 추상 팩토리에서 요구하는 스펙을 모두 구현해야 한다.&lt;/li&gt;
      &lt;li&gt;스펙 복잡도가 올라갈 수록, 모듈 추가비용이 상승한다.&lt;/li&gt;
      &lt;li&gt;새로운 기능을 추가하려면, 기존에 구현된 특화 모듈에도 새로운 기능을 구현하는 과정이 요구된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구조&quot;&gt;구조&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;추상화 레이어 (표준 인터페이스)
    &lt;ul&gt;
      &lt;li&gt;추상 팩토리 레이어&lt;/li&gt;
      &lt;li&gt;인터페이스 레이어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구체 레이어 (특화 모듈)
    &lt;ul&gt;
      &lt;li&gt;구체 팩토리 레이어 (모듈 생성 제어)&lt;/li&gt;
      &lt;li&gt;인터페이스 구현 레이어 (모듈)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예제코드&quot;&gt;예제코드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/blob/master/design-pattern/src/main/java/com/example/jehuipark/abstract_factory&quot;&gt;Java Sample Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;예제코드-클래스-다이어그램&quot;&gt;예제코드 클래스 다이어그램&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/JeHuiPark/java-sample/blob/master/design-pattern/image/abstract_factory.png?raw=true&quot; alt=&quot;imgae&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;관련-패턴&quot;&gt;관련 패턴&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;팩토리 메소드 패턴&lt;/li&gt;
  &lt;li&gt;싱글톤 패턴&lt;/li&gt;
  &lt;li&gt;프로로타입 패턴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;GoF의 디자인 패턴 p132 - p143&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 18 Apr 2020 18:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/abstract-factory-pattern</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/abstract-factory-pattern</guid>
        
        <category>디자인 패턴</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>Vim 어린이가 만든 GitHub Co-Author Vim Plugin</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#github-co-author&quot; id=&quot;markdown-toc-github-co-author&quot;&gt;GitHub Co-Author?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#난-이-기능이-좋다&quot; id=&quot;markdown-toc-난-이-기능이-좋다&quot;&gt;난 이 기능이 좋다.&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#co-author-표시하기&quot; id=&quot;markdown-toc-co-author-표시하기&quot;&gt;Co-Author 표시하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#막상-작성을-해보려고-하면&quot; id=&quot;markdown-toc-막상-작성을-해보려고-하면&quot;&gt;막상 작성을 해보려고 하면?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vim-을-이용하자&quot; id=&quot;markdown-toc-vim-을-이용하자&quot;&gt;vim 을 이용하자&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#기획&quot; id=&quot;markdown-toc-기획&quot;&gt;기획&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#사전학습&quot; id=&quot;markdown-toc-사전학습&quot;&gt;사전학습&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#vimscript-연습&quot; id=&quot;markdown-toc-vimscript-연습&quot;&gt;vimscript 연습&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#배열-다루기&quot; id=&quot;markdown-toc-배열-다루기&quot;&gt;배열 다루기&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#파일-읽기&quot; id=&quot;markdown-toc-파일-읽기&quot;&gt;파일 읽기&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#키맵핑-하기&quot; id=&quot;markdown-toc-키맵핑-하기&quot;&gt;키맵핑 하기&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#개발완료&quot; id=&quot;markdown-toc-개발완료&quot;&gt;개발완료&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;github-co-author&quot;&gt;GitHub Co-Author?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Co-Author&lt;/code&gt; 의 사전적 의미를 네이버에 검색하면 공동저자라고 나온다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77842393-8f51ef00-71cc-11ea-94fb-005522612e99.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub 는 이렇게 하나의 커밋에 2명 이상의 기여자가 존재할 경우에 누가 이 커밋에 기여했는지 UI로 표현해주는 기능을 제공한다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77842434-06878300-71cd-11ea-846c-2f2ad3e8407e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;난-이-기능이-좋다&quot;&gt;난 이 기능이 좋다.&lt;/h2&gt;
&lt;p&gt;현재 회사에서는 코드를 작성하면 모든 코드는 빠짐없이 PR 과정을 거치게 된다.&lt;br /&gt;
그렇다보니, 내 코드에 다른 사람의 의견이 반영되는 경우도 빈번하게 발생 하는데, 이런 경우에 GitHub 에서 지원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Co-Author&lt;/code&gt; 기능을 이용하면 해당 변경사항에 어떤 사람이 기여했는지 기록을 남기는 동시에 UI 로 표시까지 해주니 금상첨화다.&lt;/p&gt;

&lt;h3 id=&quot;co-author-표시하기&quot;&gt;Co-Author 표시하기&lt;/h3&gt;
&lt;p&gt;간단하다&lt;em&gt;(귀찮다)&lt;/em&gt; 커밋 메시지를 작성할 때 GitHub 에서 &lt;a href=&quot;https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors&quot;&gt;가이드&lt;/a&gt; 하는 포멧에 맞추어 작성하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;막상-작성을-해보려고-하면&quot;&gt;막상 작성을 해보려고 하면?&lt;/h3&gt;
&lt;p&gt;간단한데, 막상 작성하려고 하면 되게 귀찮은 작업이다. 
팀원의 GitHub 계정명도 알아야하고, 이메일정보도 알아야 하는데 어디에 복사해 두고 하자니 커밋 메시지 작성하는데 한 세월이 걸릴 것 같은 느낌적인 느낌이 들었다. (완전 노가다)
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77842923-d0e59880-71d2-11ea-8124-28bcd51cb7d7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서, 커밋 메시지에 컨트리뷰터 작성할 때 꿀팁이 있는지 &lt;a href=&quot;https://johngrib.github.io/&quot;&gt;기계인간 존그립&lt;/a&gt;님에게 질문해보았다.&lt;/p&gt;

&lt;p&gt;존그립 님이 이런 답변을 주었다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;vim 의 자동완성 기능을 이용하면 될듯하다. 만들어두면 쓸만하겠는데요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;vim-을-이용하자&quot;&gt;vim 을 이용하자&lt;/h2&gt;
&lt;p&gt;존그립 님이 과거에 커밋메시지 관련하여 만든 &lt;a href=&quot;https://github.com/johngrib/vim-git-msg-wheel&quot;&gt;플러그인&lt;/a&gt;을 참고하면 도움이 될 거라고 하였다.&lt;/p&gt;

&lt;h3 id=&quot;기획&quot;&gt;기획&lt;/h3&gt;

&lt;p&gt;내가 만드려고 기획한 플러그인의 사용 시나리오는 이렇다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;커밋 메시지 입력 화면으로 이동한다.&lt;/li&gt;
  &lt;li&gt;공동저자 입력을 위해 단축키를 누른다&lt;/li&gt;
  &lt;li&gt;팀원 목록이 리스트로 출력된다.&lt;/li&gt;
  &lt;li&gt;팀원을 선택한다.&lt;/li&gt;
  &lt;li&gt;선택한 팀원정보로 공동저자 정보가 커밋메시지에 추가된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;팀원 리스트는 설정 파일로 관리한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;사전학습&quot;&gt;사전학습&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vimscript&lt;/code&gt; 의 문법을 모르는 상태이기 때문에 &lt;a href=&quot;https://devhints.io/vimscript&quot;&gt;여기에서&lt;/a&gt; 도움을 많이 받았다.&lt;/p&gt;

&lt;h4 id=&quot;vimscript-연습&quot;&gt;vimscript 연습&lt;/h4&gt;

&lt;h5 id=&quot;배열-다루기&quot;&gt;배열 다루기&lt;/h5&gt;
&lt;p&gt;이 스크립트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;team&lt;/code&gt; 이라는 변수를 배열로 초기화 하고, 배열에 값을 추가하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; TestFunction&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; team &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; team &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;team&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'박제희'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; team &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;team&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'존그립'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  echo team
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77843363-6f73f880-71d7-11ea-83c5-f23595e8c9df.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;파일-읽기&quot;&gt;파일 읽기&lt;/h5&gt;
&lt;p&gt;이 스크립트는 현재경로에 존재하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;example&lt;/code&gt; 이라는 파일을 읽어서 라인별로 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 를 하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; TestFunction&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; fileAbsolutePath &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%:p:h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; records &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; readfile&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;fileAbsolutePath &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/example'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; record &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; records
    echo record
  &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77843575-6be17100-71d9-11ea-8fdc-88df9fe273dd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;키맵핑-하기&quot;&gt;키맵핑 하기&lt;/h5&gt;
&lt;p&gt;이 코드는 vim 편집모드에서 ctrl + l 키를 입력할 시 TestFunction을 실행하라는 코드이다.&lt;br /&gt;
기대 하는 결과는 편집모드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Co-Authored-By: jehuipark &amp;lt;email&amp;gt;&lt;/code&gt; 텍스트가 입력될 것이다.&lt;/p&gt;
&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; TestFunction&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Co-Authored-By: jehuipark &amp;lt;email&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R&lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt;TestFunction&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77843700-af88aa80-71da-11ea-820e-2884d8a10d8d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개발완료&quot;&gt;개발완료&lt;/h3&gt;
&lt;p&gt;이렇게 단위별로 기능을 작성하는 연습을 끝낸 후에 본격적으로 내가 원하는 플러그인을 만들기 위해 개발을 시작하였고, 조악한 코드지만 어찌어찌 완성을 하였다!&lt;/p&gt;

&lt;p&gt;이렇게 만든 스크립트는 &lt;a href=&quot;https://github.com/JeHuiPark/github-co-author-vim-plugin&quot;&gt;GitHub 저장소&lt;/a&gt;에 올려두었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;설정파일의 내용&lt;/strong&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77854220-de773e80-7223-11ea-9608-cdbe1d7506c7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자! 이제 사용을 해보자 
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77853939-11203780-7222-11ea-8414-48b336fed2a8.gif&quot; alt=&quot;github-co-plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하하하하하 잘된다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/johngrib/vim-git-msg-wheel&quot;&gt;기계인간 존그립 님의 포스팅1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://johngrib.github.io/wiki/vim-auto-completion/&quot;&gt;기계인간 존그립 님의 포스팅2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/johngrib/vim-git-msg-wheel&quot;&gt;박준근 님의 vim-plug&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://devhints.io/vimscript&quot;&gt;vim script cheatsheet&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://blog.semanticart.com/2017/01/05/lets-write-a-basic-vim-plugin/&quot;&gt;어떤 외국인 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 29 Mar 2020 14:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/vim-plugin-create</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/vim-plugin-create</guid>
        
        <category>vim</category>
        
        <category>github</category>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>JPA 에서 UUID 사용할 때 주의할 점</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#uuid로-조회가-안된다&quot; id=&quot;markdown-toc-uuid로-조회가-안된다&quot;&gt;UUID로 조회가 안된다.&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#혼란이-온다&quot; id=&quot;markdown-toc-혼란이-온다&quot;&gt;혼란이 온다.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#성공적인-구글링&quot; id=&quot;markdown-toc-성공적인-구글링&quot;&gt;성공적인 구글링&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#왜-그럴까&quot; id=&quot;markdown-toc-왜-그럴까&quot;&gt;왜 그럴까?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#한줄-요약&quot; id=&quot;markdown-toc-한줄-요약&quot;&gt;한줄 요약&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#확인-해보자&quot; id=&quot;markdown-toc-확인-해보자&quot;&gt;확인 해보자&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;uuid로-조회가-안된다&quot;&gt;UUID로 조회가 안된다.&lt;/h2&gt;

&lt;p&gt;최근에 엔티티를 만들면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Id&lt;/code&gt; 컬럼의 타입을 UUID 로 지정하면서 경험했던 이슈가 있다.&lt;/p&gt;

&lt;p&gt;평소처럼 엔티티를 클래스를 작성하고, 기본적인 비즈니스 로직(1번 로직)을 구현하고, 비즈니스 로직에 대응하는 TC 를 작성하고 문제없이 동작하는 것을 확인한 후에 나는 다음 비즈니스 로직(2번 로직)을 구현하였다.&lt;/p&gt;

&lt;p&gt;그런데, 다음 비즈니스 로직을 구현하고 검증하는 과정에서 문제가 발생했다.&lt;/p&gt;

&lt;p&gt;2번 로직은 요약하면 이런 구성이였다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UUID 값을 전달받는다.
    &lt;ol&gt;
      &lt;li&gt;UUID 값이 없다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; 을 &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt; 한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;UUID 값을 이용해 조회후 값을 변경한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;검증하는 과정에서는 정상적인 컨텍스트에서 실행을 했기 때문에 이 메소드는 예외를 발생시키지 않고 정상 리턴되야 했는데 이상하게 UUID 값이 없다는 예외를 발생시키고 있엇다.&lt;/p&gt;

&lt;h3 id=&quot;혼란이-온다&quot;&gt;혼란이 온다.&lt;/h3&gt;

&lt;p&gt;원인 파악을 위해 2번째 로직을 작성하기 전에 1번째 로직과 1번째 로직을 검증하는 TC 를 찬찬히 살펴보았다.&lt;br /&gt;
이상하게도 1번째 로직과 TC 에는 아무런 문제가 없었고, 혹시나 하는 마음에 TC 의 검증로직을 다르게 작성해보기도 했지만, 당연하게도 테스트 검증결과에는 녹색불이 들어왔다.&lt;/p&gt;

&lt;p&gt;다만, 1번 로직과 2번로직을 검증하는 환경에는 한 가지 차이점이 존재했다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1번 로직을 테스트할 때는 H2 인메모리 데이터베이스&lt;/strong&gt;를 사용했다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2번 로직을 테스할 때는 개발 데이터베이스&lt;/strong&gt;를 사용했다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;성공적인-구글링&quot;&gt;성공적인 구글링&lt;/h3&gt;
&lt;p&gt;혹시나 해서 구글링을 해보니 &lt;a href=&quot;https://phauer.com/2016/uuids-hibernate-mysql/&quot;&gt;이런 글&lt;/a&gt;을 확인할 수 있었고, 중간에 몇 가지 문구가 눈에 들어왔다.&lt;br /&gt;
“&lt;em&gt;UUID 에는 16 바이트가 필요합니다&lt;/em&gt;”&lt;br /&gt;
“&lt;em&gt;UUID 를 저장할 땐 &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;BINARY(16)&lt;/code&gt; 컬럼을 이용하세요&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;그리고 개발 데이터베이스를 확인해보니 UUID 를 저장하는 컬럼이 &lt;code class=&quot;highlighter-rouge&quot;&gt;BINARY(255)&lt;/code&gt; 으로 설정된 것을 확인할 수 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://phauer.com/2016/uuids-hibernate-mysql/&quot;&gt;이 글&lt;/a&gt;에서 전하고자 하는 내용의 주제가 내가 필요로 하는 주제는 아니였지만, 문구 하나가 나에게는 많은 도움이 되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일단 테이블 컬럼을 직접 수정하는 방법도 있지만, 개발 단계이기 때문에(?) 그냥 테이블을 삭제시켜 버리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt; 클래스의 메타정보를 수정하기로 결정하였다. (그게 더 깔끔하다고 판단)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;수정전&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GenericGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;수정후&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GenericGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uuid2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columnDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BINARY(16)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;수정후 2번 로직을 테스트해보니 예상하던 결과가 떨어지는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;1번 로직을 구현하고 테스트하는 시점에 이 문제를 알았다면, 더 좋았을텐데 라는 생각이 든다. 나는 이 문제를 &lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt; 타입을 처리하는 DBMS의 차이(H2와 MySQL)로 이런 결과가 생긴것이라고 &lt;strong&gt;추측&lt;/strong&gt;하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;왜-그럴까&quot;&gt;왜 그럴까?&lt;/h2&gt;
&lt;p&gt;해결은 했지만, 이렇게 두루뭉술하게 넘어가기엔 너무 찝찝하다. 그래서 자료조사를 조금 더 해보았고, &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html&quot;&gt;오피셜 문서&lt;/a&gt;를 발견하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77825064-49544700-714a-11ea-98bb-6298edda3a10.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;한줄-요약&quot;&gt;한줄 요약&lt;/h3&gt;
&lt;p&gt;저장할 때 남는 길이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;RPAD&lt;/code&gt; 처리하고 저장한다. (아 이래서 조회를 못한거구나?)&lt;/p&gt;

&lt;h3 id=&quot;확인-해보자&quot;&gt;확인 해보자&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;검증을 위해 (잘못된?) 테이블을 생성하자
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BINARY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트용 데이터를 만들자.
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8f886d50-70ff-11ea-b498-02dd0a2dce82&lt;/code&gt; 라는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UUID&lt;/code&gt; 를 생성했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;UUID의 길이를 확인해보자.&lt;br /&gt;
UUID의 길이는 16바이트의 길이를 요구한다고 하였다. 눈으로 직접 확인해보자
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8f886d50-70ff-11ea-b498-02dd0a2dce82'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77825438-acdf7400-714c-11ea-9fae-955273b19a67.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
약속대로 16 이라는 길이가 나온다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터를 저장해보자&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; 에서 가이드 하는대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 를 공백으로 치환하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt; 타입으로 변경하여 데이터를 밀어 넣자.
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8f886d50-70ff-11ea-b498-02dd0a2dce82'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;조회를 해보자&lt;br /&gt;
 레퍼런스에서는 남는 공간은 패딩처리 한다고 했다.&lt;br /&gt;
 그러니까 나는 16바이트의 길이를 가진 데이터를 저장했지만, 실제로는 255 길이를 소유한 데이터가 있어야 한다.&lt;br /&gt;
 &lt;br /&gt;
 그걸 눈으로 확인하기 위해 아래와 같은 쿼리를 날렸다.
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77825566-6fc7b180-714d-11ea-8b53-c417115a261a.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;레퍼런스에서 설명한대로 우측에 패딩값이 들어간 것을 확인할 수 있다.&lt;br /&gt;
 미리 생성해둔 UUID 로 조회를 시도해보자&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;내가 경험한 이슈를 흉내낸 것이다&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8f886d50-70ff-11ea-b498-02dd0a2dce82'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;조회가 안된다.&lt;br /&gt;
 패딩값 때문에 당연한 결과일 것이다.
 &lt;br /&gt;
 &lt;strong&gt;그렇다면 조회조건에 패딩값을 포함하면 조회가 되야 되겠지?&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUBSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin_uuid&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'8f886d50-70ff-11ea-b498-02dd0a2dce82'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;예상대로 조회가 되는 것을 확인할 수 있다.&lt;br /&gt;
 &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/77825850-47d94d80-714f-11ea-94f2-4068c05b2f1e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 22:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/java/my-sql-binary-reference</link>
        <guid isPermaLink="true">https://jehuipark.github.io/java/my-sql-binary-reference</guid>
        
        <category>mysql</category>
        
        <category>uuid</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>3항 연산자와 Unboxing 그리고 NullPointException</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#떡밥&quot; id=&quot;markdown-toc-떡밥&quot;&gt;떡밥&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#왜-nullpointexception-&quot; id=&quot;markdown-toc-왜-nullpointexception-&quot;&gt;왜 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; ?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#어떻게-알아내었는가&quot; id=&quot;markdown-toc-어떻게-알아내었는가&quot;&gt;어떻게 알아내었는가&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#unboxing-의-동작방식이-궁금해&quot; id=&quot;markdown-toc-unboxing-의-동작방식이-궁금해&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 의 동작방식이 궁금해&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1짤-요약&quot; id=&quot;markdown-toc-1짤-요약&quot;&gt;1짤 요약&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#후기&quot; id=&quot;markdown-toc-후기&quot;&gt;후기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;떡밥&quot;&gt;떡밥&lt;/h2&gt;

&lt;p&gt;얼마전에 팀 내에서 재밌는 이슈가 나왔다.&lt;br /&gt;
대충 아래와 같은 방식으로 리턴하는 메소드가 존재하였는데.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booleanExpression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primitiveValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integerObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;booleanExpression&lt;/code&gt; 의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 일 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;integerObj&lt;/code&gt; 의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 이면 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; 오류가 터지는 문제였다.&lt;/p&gt;

&lt;p&gt;언뜻 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;booleanExpression&lt;/code&gt; 의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 이면, &lt;code class=&quot;highlighter-rouge&quot;&gt;integerObj&lt;/code&gt; 의 값이 무엇이던 그대로 반환할 것 같은 메소드이지만, 알고보면 그렇지 않다.&lt;/p&gt;

&lt;p&gt;이 오류를 재현하기 위해 간단한 테스트를 작성하고, 실행 해보자&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NullPointerException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;예상되는 에러&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;테스트 결과&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/76698396-bb0da900-66e5-11ea-9b27-9ef98bcbdacd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;왜-nullpointexception-&quot;&gt;왜 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; ?&lt;/h3&gt;

&lt;p&gt;결론부터 말하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 과 관련된 이슈였다.&lt;/p&gt;

&lt;p&gt;요악하면 변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 를 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 하는 과정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; 이 발생한다.&lt;/p&gt;

&lt;h4 id=&quot;어떻게-알아내었는가&quot;&gt;어떻게 알아내었는가&lt;/h4&gt;

&lt;p&gt;머릿속에 여러 생각이 들었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;이펙티브 자바&lt;/code&gt; 책의 한 구절이 떠올랐다.
    &lt;blockquote&gt;
      &lt;p&gt;컴파일러로 인해 개발자가 작성한 코드가 예상과 다르게 동작할 수 있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; 예외가 발생할 수 있는 포인트가 3항 연산자 이외에는 보이지 않는다.&lt;/li&gt;
  &lt;li&gt;3항 연산자의 2항의 반환 타입이 &lt;code class=&quot;highlighter-rouge&quot;&gt;primitive&lt;/code&gt; 인게 걸린다.&lt;/li&gt;
  &lt;li&gt;혹시 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 로 초기화 된 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 를 언박싱 하려고 하니?&lt;/li&gt;
  &lt;li&gt;만약 2항의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;boxing object&lt;/code&gt; 이면 에러없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 을 반환할까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나름의 정보를 종합하여, 한가지 가설을 세우고 바로 테스트를 작성해 보았다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;테스트 결과&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/76698556-bfd35c80-66e7-11ea-84cb-b4754df909f0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;내가 세운 가설&lt;/strong&gt;은 이랬다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2항의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;primitive&lt;/code&gt; 이기 때문에, 3항의 &lt;code class=&quot;highlighter-rouge&quot;&gt;boxing object&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt;이 되는 것은 아닐까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 나는 테스트 코드를 통해 이번 3항 연산자 떡밥은 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 과 관련이 있다는 것이 증명 되었다고 판단하였다.&lt;/p&gt;

&lt;h3 id=&quot;unboxing-의-동작방식이-궁금해&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 의 동작방식이 궁금해&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boxing&lt;/code&gt; 이라던지 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 키워드는 정말 지겹도록 들어봤을 것이며, 이것을 설명하는 것은 주제를 넘어가니 생략한다.&lt;/p&gt;

&lt;p&gt;당시에, 나는 2가지의 키워드가 의미하는 바가 무엇인지는 알고 있었지만, 솔직히 말하면 실제로 어떻게 동작하는지에 대해서는 구체적으로 알고 있는 상태는 아니였다.&lt;/p&gt;

&lt;p&gt;이때의 계기로 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;unboxing&lt;/code&gt; 이 어떻게 동작하는지 알아보고 싶어져서 &lt;code class=&quot;highlighter-rouge&quot;&gt;바이트 코드&lt;/code&gt; 를 읽어보기로 결정하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/76698970-c5cb3c80-66eb-11ea-8627-85a41970551e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지에 보이는 자바코드 두줄은 바이트 코드로 이렇게 표현되고 있었다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;L0&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;LINENUMBER&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;L0&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;ACONST_NULL&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;ASTORE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;L3&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;LINENUMBER&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;L3&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;ALOAD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;INVOKEVIRTUAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;INVOKESTATIC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ljava&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;ASTORE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;천천히 순서대로 읽어보자. (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.astore&quot;&gt;오라클 문서&lt;/a&gt;와 같이 보면 도움이 된다.)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LO&lt;/code&gt; 은 자바코드 12번 라인에 대응하는 코드이다.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ASTORE 1&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 이라는 상수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;로컬 참조변수 저장소&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;에 저장한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L3&lt;/code&gt; 은 자바코드 13번 라인에 대응하는 코드이다.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALOAD 1&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;로컬 참조변수 저장소&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;에서 객체를 로드 해라. (&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 예상)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INVOKEVIRTUAL java/lang/Integer.intValue ()I&lt;/code&gt; -&amp;gt; 로드한 객체를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;intValue&lt;/code&gt; 메소드를 실행해라. (&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 참조 상태이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;intValue()&lt;/code&gt; 메소드를 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; 이 발생&lt;/strong&gt;한다.)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;valueOf&lt;/code&gt;라는 정적 메소드를 실행하면서 I를 넘겨라. 정적 메소드의 반환 타입은 &lt;code class=&quot;highlighter-rouge&quot;&gt;java/lang/Integer&lt;/code&gt; 이다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ASTORE 2&lt;/code&gt; -&amp;gt; 반환값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;로컬 참조변수 저장소&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;에 저장하라&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;바이트 코드에서 보면 13번 라인의 3항 연산자가 삭제된 것을 확인할 수 있는데, 이것은 1항의 값이 컴파일 시점에 이미 결정되어 있기 때문에 실행시점에는 2항의 값이 쓸모없는 값이 되어 버린다 그렇기 때문에, 컴파일러가 최적화한 결과라고 생각하면 되며, 이 글에서 중요하지 않는 부분이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;바이트 코드를 읽어보니 언박싱이 어떻게 동작하는 건지 알 수 있을것 같다.&lt;br /&gt;
바이트 코드 분석중 2-2 를 확인해보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;INVOKEVIRTUAL java/lang/Integer.intValue ()I&lt;/code&gt; 이 부분이 박싱 객체를 언박싱하는 과정으로 보이는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 참조를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;intValue()&lt;/code&gt; 메소드를 실행하려고 시도하니 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointException&lt;/code&gt; 이 발생한 것이였다.&lt;/p&gt;

&lt;h2 id=&quot;1짤-요약&quot;&gt;1짤 요약&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/76700066-e9e04b00-66f6-11ea-9263-1f4f049917a3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;
&lt;p&gt;퇴근 직전에 재밌는 떡밥이였다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 이슈는 알고보니 아주 유명한 이슈라고 한다.
    &lt;ul&gt;
      &lt;li&gt;이것도 자바 스펙중 하나로 오라클에 &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.25&quot;&gt;오피셜 문서&lt;/a&gt;가 존재한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3항 연산자에 박싱 객체와 언박싱 객체가 공존할 때, 언박싱 객체를 박싱객체로 변환하는 방법도 있을법 하지만, 컴파일러는 언박싱 처리를 하도록 하고 있다. 이유가 뭘까?
    &lt;ul&gt;
      &lt;li&gt;그냥 단순히 객체 생성 비용을 아끼기 위해서 일까? 다른 이유가 있을까?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 15 Mar 2020 15:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/java/java-conditional-operator</link>
        <guid isPermaLink="true">https://jehuipark.github.io/java/java-conditional-operator</guid>
        
        <category>java</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Github Action 을 이용하여 Github 블로그 배포하기</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#시작하기-전에&quot; id=&quot;markdown-toc-시작하기-전에&quot;&gt;시작하기 전에&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github-action-이-딱이네&quot; id=&quot;markdown-toc-github-action-이-딱이네&quot;&gt;Github Action 이 딱이네&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#github-action-은&quot; id=&quot;markdown-toc-github-action-은&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Github Action&lt;/code&gt; 은&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github-action-을-만들어보자&quot; id=&quot;markdown-toc-github-action-을-만들어보자&quot;&gt;Github Action 을 만들어보자&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#github-action-생성&quot; id=&quot;markdown-toc-github-action-생성&quot;&gt;Github Action 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#github-action-몸빵으로-배우기&quot; id=&quot;markdown-toc-github-action-몸빵으로-배우기&quot;&gt;Github Action 몸빵으로 배우기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#완성된-github-action-dsl&quot; id=&quot;markdown-toc-완성된-github-action-dsl&quot;&gt;완성된 Github Action DSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#깃헙액션-동작-결과&quot; id=&quot;markdown-toc-깃헙액션-동작-결과&quot;&gt;깃헙액션 동작 결과&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시작하기-전에&quot;&gt;시작하기 전에&lt;/h2&gt;

&lt;p&gt;Github Action을 이용하기 전에 나는 블로그를 이런식으로 운영하고 있었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;블로그의 빌드방식을 github 의존 방식이 아닌 로컬 빌드방식을 이용&lt;/li&gt;
  &lt;li&gt;블로그를 배포하는 방법으로 루비 Rakefile 스크립트 이용&lt;/li&gt;
  &lt;li&gt;블로그 개발환경을 도커로 구성
    &lt;blockquote&gt;

      &lt;p&gt;&lt;a href=&quot;https://jehuipark.github.io/blog/blog-publish&quot;&gt;배포 자동화&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://jehuipark.github.io/blog/blog-env-setting-with-docker&quot;&gt;블로그 개발환경 도커로 구성하기&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;블로그 개발환경을 도커 구성으로 변경하면서, 기존 배포방식에 문제가 발생 하면서 문제점이 보이기 시작했다.&lt;/p&gt;

&lt;p&gt;배포를 Rakefile 태스크에 의존하다 보니, 배포 또한 도커를 이용하게 되었는데 컨테이너 환경에서는 github 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 하기 위한 권한이 없기 때문에 아래와 같은 추가적인 작업이 필요한 상황이 발생한 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;basic credentials 으로 직접 로그인 - &lt;strong&gt;귀찮음&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;컨테이너에 ssh 설정 - &lt;strong&gt;배포환경이 달라질 때 마다 설정을 해줘야 함&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결정적으로 나는 &lt;strong&gt;개발환경 구축이 되어 있지 않더라도, 배포가 가능한 환경을 원했다.&lt;/strong&gt;&lt;br /&gt;
이런 환경이라면, 단순한 수정은 인터넷만 가능하다면 퀵 하게 처리가 가능할 테니까&lt;/p&gt;

&lt;h2 id=&quot;github-action-이-딱이네&quot;&gt;Github Action 이 딱이네&lt;/h2&gt;
&lt;p&gt;내 요구사항을 처리하기에 딱 좋은 녀석은 얼마전에 회사에서 공유 받은적이 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Action&lt;/code&gt; 이 딱이라고 생각하였다.&lt;br /&gt;
나도 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Action&lt;/code&gt; 을 사용해본 경험은 없기 때문에, 사전조사를 간략하게 진행 하였다.&lt;/p&gt;

&lt;h3 id=&quot;github-action-은&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Github Action&lt;/code&gt; 은&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;깃헙 레파지토리에서 발생하는 이벤트를 받아서 처리할 수 있게 인터페이스 제공&lt;/li&gt;
  &lt;li&gt;레파지토리별 가상 서버를 깃헙에서 제공
    &lt;ul&gt;
      &lt;li&gt;자체 호스팅 서버를 이용도 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;깃헙에서 제공하는 가상서버에는 해당 레파지토리에 대한 접근권한 설정이 미리 되어있는 상태&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GITHUB_TOKEN&lt;/code&gt; 을 이용한다고 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 정도의 정보를 갖고 행동으로 옮겼고, 삽질 끝에 배포 자동화 환경을 구축했다.&lt;/p&gt;

&lt;p&gt;배포 과정을 요약하면 이렇다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;github 저장소의 &lt;code class=&quot;highlighter-rouge&quot;&gt;work&lt;/code&gt; 브랜치에 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;를 한다.&lt;/li&gt;
  &lt;li&gt;원격지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드&lt;/code&gt;를 수행한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;빌드&lt;/code&gt; output을 github 저장소의 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 한다. (&lt;strong&gt;배포완료&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;github-action-을-만들어보자&quot;&gt;Github Action 을 만들어보자&lt;/h2&gt;

&lt;h3 id=&quot;github-action-생성&quot;&gt;Github Action 생성&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75607351-8b816d00-5b39-11ea-9a42-447925b85cbe.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성 버튼을 누르니 깃헙설정 경로에 &lt;code class=&quot;highlighter-rouge&quot;&gt;yml&lt;/code&gt; 파일이 생성되는 걸 보니 &lt;strong&gt;DSL&lt;/strong&gt; 의 느낌이 온다.
그래서 &lt;a href=&quot;https://help.github.com/en/actions&quot;&gt;Github Action Help&lt;/a&gt; 레퍼런스를 잠깐 읽었는데 머리도 아프고 역시 몸빵이 최고인 것 같아서 레퍼런스를 켜두고 일단 시작했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/actions&quot;&gt;Github Action Help&lt;/a&gt; 어디에선가 발췌한 Hello World 스크립트를 갖고 바로 몸빵을 시작하기로 결정했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hello World 스크립트&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Greet Everyone&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This workflow is triggered on pushes to the repository.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Job name is Greeting&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Greeting&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This job runs on Linux&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This step uses GitHub's hello-world-javascript-action: https://github.com/actions/hello-world-javascript-action&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Hello world&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/hello-world-javascript-action@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;who-to-greet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Mona&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Octocat'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This step prints an output (time) from the previous step's action.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Echo the greeting's time&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo 'The time was $.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;github-action-몸빵으로-배우기&quot;&gt;Github Action 몸빵으로 배우기&lt;/h3&gt;

&lt;p&gt;깃헙 액션을 몸빵으로 체득하다 보면 커밋 히스토리가 지저분해질게 뻔히 보여서 일단 리모트 &lt;strong&gt;브랜치를 분리&lt;/strong&gt;하는 작업을 먼저 진행 하였다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;work-flow-test 브랜치 생성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;분리된 브랜치에서 깃헙액션 DSL 을 생성하고, 사전에 찾아뒀던 Hello World 스크립트를 저장하였다.&lt;br /&gt;
저장하는 순간 github 에 push 이벤트가 발생하였고, 아래와 같이 깃헙 액션 실행결과를 확인할 수 있었다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75607494-20389a80-5b3b-11ea-901c-e98d3204e967.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;깃헙액션의 실행결과를 눈으로 확인하고 나서 바로 든 생각은 &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;신기하네 약간 도커같은 느낌인걸?&lt;/code&gt;&lt;/em&gt; 이였다.&lt;/p&gt;

&lt;p&gt;그리고 job 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 을 하나씩 단계별로 구성하면 내가 하려던 작업을 충분히 할 수 있겠다고 직감했고 깃헙 액션을 조금씩 채워나가기 시작했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;소스 체크아웃 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기
이런저런 삽질을 해보다가 이정도는 이미 만들어져 있지 않을까 해서 찾아보니 &lt;a href=&quot;https://github.com/actions/checkout&quot;&gt;깃헙에서 제공&lt;/a&gt;하고 있어서 그걸 사용했다.&lt;/li&gt;
  &lt;li&gt;ruby 설치하기 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기
지킬 블로그는 ruby 패키지에 의존하여 동작하기 때문에 필수적으로 필요한 요소이다.&lt;br /&gt;
이것도 &lt;a href=&quot;https://github.com/actions/setup-ruby&quot;&gt;깃헙에서 제공&lt;/a&gt;한다.&lt;/li&gt;
  &lt;li&gt;gem 설치하기 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기&lt;br /&gt;
지킬 블로그에 빌드에 필요한 gem 을 설치해야 한다. (내 로컬과 동일하게)&lt;br /&gt;
여기서 삽질을 좀 했다.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;이 존재하지 않아서 gem 설치가 순서대로 되지 않아서 오류 발생&lt;/li&gt;
      &lt;li&gt;젬 디펜던시 설치가 너무 오래 걸림 (액션이 돌때마다 새로 설치)&lt;br /&gt;
 이에 대한 솔루션도 &lt;a href=&quot;https://github.com/actions/cache&quot;&gt;깃헙에서 제공&lt;/a&gt;하고 있어서 몇번 삽질 후에 성공적으로 적용하였다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;블로그 빌드 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기&lt;br /&gt;
&lt;a href=&quot;https://github.com/actions/cache&quot;&gt;기존에 프로덕션 배포시 사용하던 Rakefile을 일부 활용&lt;/a&gt;하였다. &lt;code class=&quot;highlighter-rouge&quot;&gt;rake site:generate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;블로그 배포 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기&lt;br /&gt;
쉘 스크립트 작성에 능숙치 못해서 여기에서 가장 많은 시간을 소요했다&lt;br /&gt;
대충 요악하면 여기에서 진행하려고 하던 작업은 이렇다.
    &lt;ol&gt;
      &lt;li&gt;블로그 빌드 결과물을 임시 디렉토리로 이동&lt;/li&gt;
      &lt;li&gt;작업 브랜치를 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치로 이동&lt;/li&gt;
      &lt;li&gt;블로그 빌드 결과물 적용&lt;/li&gt;
      &lt;li&gt;변경사항 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 내용을 github 저장소의 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치로 push&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;완성된-github-action-dsl&quot;&gt;완성된 Github Action DSL&lt;/h2&gt;

&lt;p&gt;내가 삽질하면서 작성한 Github Action DSL 은 &lt;a href=&quot;https://github.com/JeHuiPark/JeHuiPark.github.io/pull/3&quot;&gt;여기서&lt;/a&gt; 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;캐시경로를 상대 경로로 설정 하였던 부분이 &lt;strong&gt;블로그 배포 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; 만들기&lt;/strong&gt; 부분의 작업내용과 충돌하는 부분이 있어서, &lt;code class=&quot;highlighter-rouge&quot;&gt;cache hit&lt;/code&gt; 를 하지 못하는 이슈가 발생해서 아래와 같은 스텝으로 조치하였다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JeHuiPark/JeHuiPark.github.io/pull/11&quot;&gt;캐시 강제업데이트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JeHuiPark/JeHuiPark.github.io/pull/13&quot;&gt;캐시경로 변경&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;깃헙액션-동작-결과&quot;&gt;깃헙액션 동작 결과&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/75608419-9391da80-5b42-11ea-87ed-498fc2f5a657.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Feb 2020 22:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/blog-publish-with-github-action</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/blog-publish-with-github-action</guid>
        
        <category>github</category>
        
        
        <category>note</category>
        
      </item>
    
  </channel>
</rss>
