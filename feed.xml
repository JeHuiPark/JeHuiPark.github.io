<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

  <channel>
    <title>JH Blog</title>
    <description>developer JH website.</description>
    <link>https://jehuipark.github.io/</link>
    <atom:link href="https://jehuipark.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 08 Mar 2021 08:29:06 +0900</pubDate>
    <lastBuildDate>Mon, 08 Mar 2021 08:29:06 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>MongoDB 기초 공부</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#인덱스&quot; id=&quot;markdown-toc-인덱스&quot;&gt;인덱스&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#컴파운드-인덱스&quot; id=&quot;markdown-toc-컴파운드-인덱스&quot;&gt;컴파운드 인덱스&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#b-tree-인덱스의-정렬-및-스캔-방향&quot; id=&quot;markdown-toc-b-tree-인덱스의-정렬-및-스캔-방향&quot;&gt;B-Tree 인덱스의 정렬 및 스캔 방향&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#b-tree-인덱스&quot; id=&quot;markdown-toc-b-tree-인덱스&quot;&gt;B-Tree 인덱스&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#해시-인덱스&quot; id=&quot;markdown-toc-해시-인덱스&quot;&gt;해시 인덱스&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#멀티-키-인덱스&quot; id=&quot;markdown-toc-멀티-키-인덱스&quot;&gt;멀티 키 인덱스&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#프라이머리-키와-세컨드리-인덱스&quot; id=&quot;markdown-toc-프라이머리-키와-세컨드리-인덱스&quot;&gt;프라이머리 키와 세컨드리 인덱스&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#유니크-인덱스&quot; id=&quot;markdown-toc-유니크-인덱스&quot;&gt;유니크 인덱스&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sparse-인덱스-와-partial-인덱스&quot; id=&quot;markdown-toc-sparse-인덱스-와-partial-인덱스&quot;&gt;Sparse 인덱스 와 Partial 인덱스&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#불완전한-결과&quot; id=&quot;markdown-toc-불완전한-결과&quot;&gt;불완전한 결과&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ttl-인덱스&quot; id=&quot;markdown-toc-ttl-인덱스&quot;&gt;TTL 인덱스&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#인덱스-콜레이션&quot; id=&quot;markdown-toc-인덱스-콜레이션&quot;&gt;인덱스 콜레이션&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#잠금&quot; id=&quot;markdown-toc-잠금&quot;&gt;잠금&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#잠금-양보-yield&quot; id=&quot;markdown-toc-잠금-양보-yield&quot;&gt;잠금 양보 (Yield)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#트랜잭션&quot; id=&quot;markdown-toc-트랜잭션&quot;&gt;트랜잭션&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#쓰기충돌-write-conflict&quot; id=&quot;markdown-toc-쓰기충돌-write-conflict&quot;&gt;쓰기충돌 (Write Conflict)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#단일-도큐먼트-트랜잭션&quot; id=&quot;markdown-toc-단일-도큐먼트-트랜잭션&quot;&gt;단일 도큐먼트 트랜잭션&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mongodb-서버의-격리-수준과-정렬&quot; id=&quot;markdown-toc-mongodb-서버의-격리-수준과-정렬&quot;&gt;MongoDB 서버의 격리 수준과 정렬&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#readconcern-writeconcern-readpreference&quot; id=&quot;markdown-toc-readconcern-writeconcern-readpreference&quot;&gt;ReadConcern, WriteConcern, ReadPreference&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#writeconcern&quot; id=&quot;markdown-toc-writeconcern&quot;&gt;WriteConcern&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#레플리카-셋-간의-동기화-제어&quot; id=&quot;markdown-toc-레플리카-셋-간의-동기화-제어&quot;&gt;레플리카 셋 간의 동기화 제어&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#readconcern&quot; id=&quot;markdown-toc-readconcern&quot;&gt;ReadConcern&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#readpreference&quot; id=&quot;markdown-toc-readpreference&quot;&gt;ReadPreference&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#데이터-모델링&quot; id=&quot;markdown-toc-데이터-모델링&quot;&gt;데이터 모델링&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#컬렉션&quot; id=&quot;markdown-toc-컬렉션&quot;&gt;컬렉션&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#뷰&quot; id=&quot;markdown-toc-뷰&quot;&gt;뷰&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bson-도큐먼트&quot; id=&quot;markdown-toc-bson-도큐먼트&quot;&gt;BSON 도큐먼트&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#정규화-역정규화&quot; id=&quot;markdown-toc-정규화-역정규화&quot;&gt;정규화, 역정규화&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#쿼리-개발-및-튜닝&quot; id=&quot;markdown-toc-쿼리-개발-및-튜닝&quot;&gt;쿼리 개발 및 튜닝&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#쿼리-실행계획&quot; id=&quot;markdown-toc-쿼리-실행계획&quot;&gt;쿼리 실행계획&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고서적&quot; id=&quot;markdown-toc-참고서적&quot;&gt;참고서적&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인덱스&quot;&gt;인덱스&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;단일 값이나 단일 필드는 인덱스를 생성해도 필드의 이름이 인덱스에 저장되지 않고 인덱스의 메타 정보에서만 관리되므로, 필드 이름의 크기는 인덱스의 크기에 영향을 미치지 않는다.&lt;br /&gt;
  하지만 서브 도큐먼트를 값으로 가지는 필드는 그 서브 도큐먼트의 자식 필드 이름이 모두 인덱스에 저장되므로 자식 필드의 이름이 길면 그만큼 인덱스의 크기에 영향을 미친다.&lt;br /&gt;
  서브 도큐먼트의 필드명이 길 때에는 이 값들이 인덱스의 크기를 훨씬 더 크게 만드는 역효과를 만들기도 한다.&lt;/li&gt;
  &lt;li&gt;WiredTiger 스토리지 엔진은 데이터 파일은 기본적으로 압축을 적용하지만, 인덱스 데이터 파일은 압축을 하지 않는다.&lt;/li&gt;
  &lt;li&gt;인덱스 키값의 크기는 &lt;strong&gt;1KB&lt;/strong&gt;를 넘을 수 없기 때문에 인덱스로 지정한 필드의 사이즈가 &lt;strong&gt;1KB&lt;/strong&gt; 초과할 경우 오류를 발생시킨다.&lt;/li&gt;
  &lt;li&gt;서브 도큐먼트 필드에 대해서 생성되는 인덱스를 사용하려면 조건절에 서브 도큐먼트의 필드를 모두 가지고, 순서가 같을 때만 인덱스를 활용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;인덱스 인터섹션&lt;/strong&gt;: MongoDB에서는 대부분의 DBMS와 다르게 하나의 컬렉션이 가진 두 개 이상의 인덱스를 검색하여 각 검색 결과를 만들고, 그 결과 집합의 교집합을 찾는 최적화를 제공한다.&lt;br /&gt;
  &lt;em&gt;책에서는 인덱스 인터섹션이 효율적인 경우가 별로 없다고 한다.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*공간 인덱스와 전문 인덱스는 아직 나의 관심사가 아니므로 공부 대상에서 제외한다**&lt;/p&gt;

&lt;h3 id=&quot;컴파운드-인덱스&quot;&gt;컴파운드 인덱스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스의 N번째 컬럼은 N-1번째 컬럼이 같은 레코드 내에서 다시 정렬된다. 그렇기 때문에 인데스 내에서 각 필드의 순서는 상당히 중요하며, 신중하게 결정해야 한다.&lt;/li&gt;
  &lt;li&gt;N번째 컬럼없이 N-1번째 컬럼만으로는 인덱스를 사용할 수 없다.&lt;/li&gt;
  &lt;li&gt;해시 인덱스는 컴파운드 인덱스에서 사용할 수 없다. (B-Tree 알고리즘만 지원)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래와 같은 도큐먼트가 있을 때&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;field1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;field1_1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;field1_2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;field2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2020-08-16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;field3&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;박제희&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스가 하나의 필드를 가지면 단일 필드라고 정의한다. 여기서 단일 필드는 서브 도큐먼트도 포함한다.&lt;br /&gt;
  복합 필드 인덱스는 서브 도큐먼트의 필드도 포함할 수 있으며, 1레벨과 서브 도큐먼트의 필드와 혼용하는 것도 가능하다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;field1&lt;/code&gt; 를 지정하면 단일 필드이다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;field2&lt;/code&gt; 를 지정하면 단일 필드이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인덱스가 복수의 필드를 가지면 복합 필드라고 정의한다. (컴파운드 인덱스 혹은 컴포지트 인덱스)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;field1&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;field2&lt;/code&gt; 를 지정하면 복합 필드이다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;field1.field1_1&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;field1.field1_2&lt;/code&gt; 를 지정하면 복합 필드이다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;field1.field1_1&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;field3&lt;/code&gt; 를 지정하면 복합 필드이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서브 도큐먼트를 갖는 필드(&lt;code class=&quot;highlighter-rouge&quot;&gt;field1&lt;/code&gt;) 를 대상으로 단일 인덱스 (&lt;code class=&quot;highlighter-rouge&quot;&gt;idx1&lt;/code&gt;) 를 생성했을 때와 복합 인덱스(&lt;code class=&quot;highlighter-rouge&quot;&gt;idx2&lt;/code&gt;)를 생성했을 때는 어떤 차이점이 존재할까?&lt;br /&gt;
Ex)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;idx1&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;field1&lt;/code&gt; 필드를 갖는 단일 인덱스&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;idx2&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;field1.field1_1&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;field1.field1_2&lt;/code&gt; 필드를 갖는 복합 인덱스&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;idx1&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;field1&lt;/code&gt; 에 어떤 서브 도큐먼트가 저장되든 &lt;strong&gt;BSON&lt;/strong&gt; 으로 변환하여 인덱스 키 엔트리로 사용한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;idx2&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;field1&lt;/code&gt; 에 저장되는 서브 도큐먼트가 어떤 필드를 가지던지 관계없이 인덱스에 명시한 서브 필드의 조합으로 컴파운드 인덱스를 생성한다.&lt;/p&gt;

&lt;h3 id=&quot;b-tree-인덱스의-정렬-및-스캔-방향&quot;&gt;B-Tree 인덱스의 정렬 및 스캔 방향&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스 내에서 각 필드를 어떻게 정렬할 것인지는 인덱스를 최초에 생성하는 시점에 결정된다.&lt;/li&gt;
  &lt;li&gt;인덱스를 어떤 방향으로 읽을지는 쿼리가 원하는 값에 따라 옵티마이져가 만드는 실행계획에 따라 결정된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인덱스의 스캔 방향은 옵티마이저에 의해 결정되기 때문에, 인덱스 생성 시점에 조회 쿼리를 상상하며 ASC, DESC 를 고민할 필요는 없다.&lt;/p&gt;

&lt;p&gt;컴파운드 인덱스에서 ASC 와 DESC 를 혼합해서 효과적으로 사용하는 경우는 어떤 경우인가?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;검색조건에 컴파운드 인덱스에 명시한 필드가 포함된다.&lt;/li&gt;
  &lt;li&gt;정렬조건에 컴파운드 인덱스에 명시한 필드가 포함된다. (인덱스와 동일하게 혼합되어 있다면 인덱스 스캔 방향만 변경하여 탐색하면 되므로 인덱스에 최적화된 탐색이 가능하다)&lt;/li&gt;
  &lt;li&gt;검색범위가 범위 검색이다 (동등 비교가 아니다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;b-tree-인덱스&quot;&gt;B-Tree 인덱스&lt;/h3&gt;

&lt;h3 id=&quot;해시-인덱스&quot;&gt;해시 인덱스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;필드값을 해싱하여 인덱스 키값을 관리하기 때문에 오직 동등성을 판단하는 검색에서만 인덱스를 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;해시 인덱스는 컴파운드 인덱스로 생성할 수 없다. (서브 도큐먼트는 가능)&lt;/li&gt;
  &lt;li&gt;MongoDB의 해시 인덱스는 내부적으로는 B-Tree 알고리즘을 이용한다.&lt;/li&gt;
  &lt;li&gt;인덱스를 생성할 때 인덱스 필드의 값을 &lt;strong&gt;MD5&lt;/strong&gt; 알고리즘을 이용하여 저장하기 때문에 인덱스 필드의 크기와 관계없이 인덱스의 크기는 항상 &lt;strong&gt;8Byte&lt;/strong&gt;이다.&lt;/li&gt;
  &lt;li&gt;B-Tree 인덱스와 장점보다 단점이 많은 알고리즘으로, 특수한 상황에 인덱스의 특징을 알아야 적절히 사용할 수 있음 (&lt;strong&gt;샤딩시 필수&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;멀티-키-인덱스&quot;&gt;멀티 키 인덱스&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;하나의 도큐먼트&lt;/strong&gt;에 하나의 인덱스에 대하여 &lt;strong&gt;여러개의 키&lt;/strong&gt;가 존재하면 멀티 키 인덱스라고 부른다.&lt;br /&gt;
Ex)
아래와 같은 구조를 가지는 도큐먼트가 있을 때&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;multi&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;multi&lt;/code&gt; 필드에 대하여 인덱스를 생성하면 하나의 인덱스에 5개의 인덱스 키가 생성되는데 이것을 멀티 키 인덱스라고 부른다.&lt;/p&gt;

&lt;p&gt;멀티 키를 이용하여 범위 검색을 할 때, 의식의 흐름대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;BETWEEN&lt;/code&gt; 연산을 이용하듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;find({ multi : { $gte : 3, $lte : 4 } })&lt;/code&gt; 이런 쿼리를 작성하면
각 조건을 따로 비교한 다음에, 두 개의 결과를 병합한 결과를 리턴한다 (&lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; 연산처럼 동작한다)&lt;/p&gt;

&lt;p&gt;멀티 키를 이용하여 범위 검색을 하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;$elemMatch&lt;/code&gt; 연산자를 이용해야 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;find({ multi : { $elemMatch: { $gte : 3, $lte : 4 } } })&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;제한사항&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;샤드 키로 사용 불가&lt;/li&gt;
  &lt;li&gt;해시 알고리즘 사용 불가&lt;/li&gt;
  &lt;li&gt;커버링 인덱스 처리 불가&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프라이머리-키와-세컨드리-인덱스&quot;&gt;프라이머리 키와 세컨드리 인덱스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;MongoDB의 프라이머리 키는 강제되며, 무조건 &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; 라는 이름으로 도큐먼트에 저장 되어야 한다.&lt;/li&gt;
  &lt;li&gt;컬렉션마다 단 하나의 프라이머리 키만 가질 수 있으며, 나머지 인덱스는 모두 세컨드리 인덱스라고 한다.&lt;/li&gt;
  &lt;li&gt;컬렉션이 샤딩 되어있는 경우에는 하나의 샤드에서 중복 값에 대한 체크는 MongoDB 서버에서 처리하지만, 각 샤드간 프라이머리 키 값의 중복 체크는 응용 프로그램에서 처리해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;유니크-인덱스&quot;&gt;유니크 인덱스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; 값을 제한하지 않는다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; 과 존재하지 않는 값(도큐먼트에 필드를 명시하지 않음)을 동일하게 취급한다&lt;/li&gt;
  &lt;li&gt;도큐먼트 간의 중복값은 체크를 하지만, 도큐먼트 내부에서 중복된 값을 체크하지는 않는다.&lt;/li&gt;
  &lt;li&gt;샤딩이 적용된 경우에는 샤드키를 선행 필드로 가지는 인덱스에서만 유니크 인덱스를 생성할 수 있다.&lt;/li&gt;
  &lt;li&gt;해시 알고리즘을 적용할 수 없다. (해시 충돌 가능성을 가지고 있기 때문)&lt;/li&gt;
  &lt;li&gt;Mongo DB 의 유니크 인덱스는 일반 인덱스와 동일한 역할을 하므로 중복해서 인덱스를 생성하지 않도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sparse-인덱스-와-partial-인덱스&quot;&gt;Sparse 인덱스 와 Partial 인덱스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sparse&lt;/strong&gt; 인덱스
    &lt;ul&gt;
      &lt;li&gt;인덱스 대상 필드를 명시한 도큐먼트만 인덱스에 키 엔트리를 저장한다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; 포함)&lt;/li&gt;
      &lt;li&gt;컴파운드 인덱스인 경우에는 인덱스를 구성하는 필드 중에서 하나라도 명시하면 인덱싱 대상이 된다.&lt;/li&gt;
      &lt;li&gt;인덱스가 커버할 수 없는 쿼리에서는 인덱스를 사용할 수 없다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Partial&lt;/strong&gt; 인덱스 : 특정 조건에 따라 인덱싱 가능
    &lt;ul&gt;
      &lt;li&gt;인덱스를 생성할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;partialFilterExpression&lt;/code&gt; 옵션을 이용하여 인덱스 생성 조건을 명시&lt;/li&gt;
      &lt;li&gt;인덱스 생성 조건에는 인덱스 대상 필드와 무관한 필드에 대해서도 조건으로 사용하는 것이 가능하다.&lt;/li&gt;
      &lt;li&gt;Partial 인덱스를 사용하려면 &lt;strong&gt;인덱스 생성 조건과 일치&lt;/strong&gt;하거나 부분 범위의 조건을 명시해야만 한다&lt;/li&gt;
      &lt;li&gt;샤드키에 사용 불가&lt;/li&gt;
      &lt;li&gt;인덱스가 커버할 수 없는 쿼리에서는 인덱스를 사용할 수 없다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;불완전한-결과&quot;&gt;불완전한 결과&lt;/h4&gt;
&lt;p&gt;Sparse 인덱스나 Partial 인덱스는 컬렉션에 저장되는 도큐먼트가 특정 조건을 만족하는 경우에만 인덱싱을 진행하게 된다.&lt;br /&gt;
그렇기 때문에 인덱스로 참조할 수 없는 도큐먼트가 분명히 존재하게 되어 인덱스 탐색을 하게 될 경우에 불완전환 결과를 리턴할 수 있다.&lt;br /&gt;
그래서 옵티마이저는 인덱스가 커버할 수 없는 쿼리라고 판단하면 인덱스를 사용하지 않도록 하고 있지만, 
사용자가 인덱스 힌트를 직접 명시하면 옵티마이저는 사용자가 이런 불완전한 결과에 대한 가능성을 충분히 인지하고 있다고 가정하고 
인덱스 탐색을 하도록 실행 계획을 수립하도록 한다.&lt;/p&gt;

&lt;p&gt;예시)&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 컬렉션과 Sparse 인덱스 생성&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sparse&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 더미 데이터 생성&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AAA&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;BBB&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CCC&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DDD&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 인덱스를 사용하지 않지만 완전한 결과&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 3과 4 도큐먼트를 리턴한다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
   &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 인덱스를 사용하지만 불완전한 결과&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 3 도큐먼트만 리턴한다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
   &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ttl-인덱스&quot;&gt;TTL 인덱스&lt;/h3&gt;
&lt;p&gt;컬렉션의 도큐먼트가 언제까지 유효한지를 판단하여 더 이상 유효하지 않은 도큐먼트는 자동으로 삭제되게 하는 기능의 인덱스&lt;br /&gt;
도큐먼트 삭제는 TTL Monitor 라는 쓰레드가 지정된 시간 간격(기본:1분)마다 지정된 시간보다 오래된 도큐먼트를 찾아서 삭제한다.&lt;br /&gt;
TTL 인덱스는 쿼리의 검색 성능 향상 목적보다는 TTL Monitor 쓰레드가 삭제할 도큐먼트를 찾기 위한 인덱스로 보는게 정확하다.&lt;/p&gt;

&lt;p&gt;TTL 인덱스는 지정된 필드가 Date 타입이거나 Date 타입의 값을 배열로 가지는 필드에 대해서만 자동 삭제가 실행된다.&lt;/p&gt;

&lt;p&gt;예시 )&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;expireAfterSeconds&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// TTL Monitor 수도코드&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;expiredDateTime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;expireAfterSeconds&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// TTL Monitor 수도코드&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expiredDateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Partial 인덱스 옵션과 조합하여 선별적 자동 삭제도 가능하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예시 )&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;partialFilterExpression&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;is_admin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// TTL Monitor 수도코드&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NOW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isNotAdmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;인덱스-콜레이션&quot;&gt;인덱스 콜레이션&lt;/h3&gt;
&lt;p&gt;MongoDB는 모든 문자열 비교에서 대소문자를 구분하는 Case-Sensitive 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;jehui&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Jehui&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt;&amp;gt; not found&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.4 버전 부터 컬렉션과 인덱스에 대해서 콜레이션을 지정가능
컬레이션을 지정하면 영어의 대소문자 비교 구분뿐만 아니라 국가별 언어에 맞는 정렬 및 비교 규칙을 사용자의 요구사항에 맞게 적절히 선택할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;컬렉션의 인덱스를 생성한 이후에는 다른 콜레이션으로 변경할 수 없다. (콜레이션을 변경하라면 인덱스 삭제 -&amp;gt; 생성 과정을 거쳐야 한다.)&lt;/li&gt;
  &lt;li&gt;인덱스를 생성할 때 별도의 콜레이션을 명시하지 않으면 컬렉션의 기본 콜레이션을 상속받게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잠금&quot;&gt;잠금&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;WiredTiger&lt;/strong&gt; 스토리지 엔진은 글로벌(인스턴스 레벨) 잠금과 데이터베이스와 컬렉션 레벨의 인텐션 잠금을 지원한다.&lt;br /&gt;
인텐션 잠금은 데이터베이스 레벨이나 컬렉션 레벨의 명령과 도큐먼트 레벨의 명령이 최적의 동시성을 유지하면서 실행될 수 있게 해준다.&lt;/p&gt;

&lt;h3 id=&quot;잠금-양보-yield&quot;&gt;잠금 양보 (Yield)&lt;/h3&gt;
&lt;p&gt;MongoDB 서버는 트랜잭션보다는 높은 동시성 처리의 우선순위가 더 높기 때문에 설정된 시간보다 오래 걸리거나, 많은 자원을 소모하는 경우에는 잠깐 쉬었다(Yield)가 다시 처리한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;읽기를 위한 IS 잠금(Intention Shared) 획득 (REV1 스냅샷 획득)&lt;/li&gt;
  &lt;li&gt;데이터 탐색&lt;/li&gt;
  &lt;li&gt;잠금 양보 (스냅샷 해제)&lt;/li&gt;
  &lt;li&gt;읽기를 위한 IS 잠금(Intention Shared) 획득 (REV2 스냅샷 획득)&lt;/li&gt;
  &lt;li&gt;loop …&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이러한 특성 때문에 쿼리 일관성이 깨질 수 있다는 문제점을 가지고 있음&lt;/p&gt;

&lt;p&gt;관련 설정&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;internalQueryExecYieldIterations&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;internalQueryExecYieldPeriodMs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;트랜잭션&quot;&gt;트랜잭션&lt;/h2&gt;
&lt;p&gt;2.6 버전 까지 사용되던 &lt;strong&gt;MMAPv1&lt;/strong&gt; 스토리지 엔진은 트랜잭션이라고 할 만한 요소가 별로 없다. (대부분 운영체제 시스템 콜에 의존)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WiredTiger&lt;/strong&gt; 스토리지 엔진이 제공하는 트랜잭션의 &lt;strong&gt;ACID&lt;/strong&gt; 속성&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;최고 레벨의 격리 수준은 &lt;strong&gt;SNAPSHOT&lt;/strong&gt;(RR)&lt;/li&gt;
  &lt;li&gt;트랜잭션의 커밋과 체크포인트 2가지 형태로 영속성 보장&lt;/li&gt;
  &lt;li&gt;커밋되지 않은 변경 데이터는 공유 캐시 크기보다 작아야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MongoDB 서버에 내장된 &lt;strong&gt;WiredTiger&lt;/strong&gt; 의 격리 수준은 &lt;strong&gt;SNAPSHOT&lt;/strong&gt;으로 고정되어 있다.&lt;br /&gt;
MongoDB 서버는 &lt;strong&gt;WiredTiger&lt;/strong&gt; 스토리지 엔진의 &lt;strong&gt;SNAPSHOT&lt;/strong&gt; 격리수준을 100% 지원하지는 않는다.&lt;/p&gt;

&lt;h3 id=&quot;쓰기충돌-write-conflict&quot;&gt;쓰기충돌 (Write Conflict)&lt;/h3&gt;

&lt;p&gt;MongoDB는 쓰기 충돌이 발생하면 RDBMS 와는 다른 방식으로 해결한다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/90974620-e683a200-e567-11ea-81cb-e6669c657693.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;변경하고자 하는 도큐먼트에 잠금이 걸려있을 경우에는 즉시 업데이트 실행을 취소하고 재시도를 수행한다.&lt;br /&gt;
이런 과정들은 MongoDB 서버 프로세스 내부에서만 실행되기 때문에 응용 프로그램에는 투명하게 작동한다.&lt;/p&gt;

&lt;p&gt;기존 RDBMS 는 쓰기 충돌이 발생하면 잠금 대기상태에 들어가기 때문에 커넥션이 일시적으로 증가하는 반면에 MongoDB 는 UPDATE 문을 재시도하는 방식이기 때문에 하나의 도큐먼트에 변경이 집중되면 &lt;strong&gt;쓰기 충돌→재시도&lt;/strong&gt; 과정이 반복되어 CPU 의 사용량이 높아지는 현상이 발생될 수 있다.  (CPU 사용량만 증가하고 처리능력은 저하된다)&lt;/p&gt;

&lt;h3 id=&quot;단일-도큐먼트-트랜잭션&quot;&gt;단일 도큐먼트 트랜잭션&lt;/h3&gt;
&lt;p&gt;MongoDB 서버는 단일 도큐먼트의 트랜잭션만 지원한다.
단일 도큐먼트의 변경에 대해서는 원자 단위의 처리가 보장 되지만, &lt;strong&gt;문장 단위의 트랜잭션은 지원되지 않는다.&lt;/strong&gt;  (MongoDB 서버에서 작업을 쪼개서 진행)&lt;/p&gt;

&lt;p&gt;예시)&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AAA&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;BBB&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 몽고DB 수도코드&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AAA&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;END&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;BBB&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; {_id:1, name:&quot;AAA&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{multi:true}&lt;/code&gt; 옵션을 명시한 &lt;strong&gt;UPDATE&lt;/strong&gt; 명령도 동일하다&lt;/p&gt;

&lt;h3 id=&quot;mongodb-서버의-격리-수준과-정렬&quot;&gt;MongoDB 서버의 격리 수준과 정렬&lt;/h3&gt;

&lt;p&gt;MongoDB 서버는 도큐먼트를 조회할 때 기본적으로 스냅샷을 기반으로 처리하며 스냅샷은 도큐먼트 건수나 일정 시간을 기준으로 초기화가 진행된다.&lt;br /&gt;
그런데 실행하는 쿼리가 &lt;strong&gt;정렬&lt;/strong&gt;이 필요하다면 MongoDB 서버는 컬렉션의 데이터를 모두 가져와서 메모리에 적재하고 정렬을 실행하여 그 결과를 클라이언트로 보내게 된다.&lt;/p&gt;

&lt;p&gt;요약하면 정렬이 포함되지 않거나 정렬이 인덱스로 보장될(정렬 SKIP) 때에는 스냅샷 격리 수준이 제한적으로만 보장된다.&lt;/p&gt;

&lt;h3 id=&quot;readconcern-writeconcern-readpreference&quot;&gt;ReadConcern, WriteConcern, ReadPreference&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ReadConcern&lt;/strong&gt; 과 &lt;strong&gt;WriteConcern&lt;/strong&gt; 는 데이터 읽기/쓰기를 시도할 때 동기화 수준을 결정
&lt;strong&gt;ReadPreference&lt;/strong&gt; 는 레플리카 셋의 어느 MongoDB 서버로 요청을 보낼 것인지 결정&lt;/p&gt;

&lt;h4 id=&quot;writeconcern&quot;&gt;WriteConcern&lt;/h4&gt;

&lt;p&gt;클라이언트의 변경요청을 어디까지 처리하고 응답을 내려보낼 것인지 결정하는 옵션으로 클라이언트, 데이터베이스, 컬렉션 수준까지 지정이 가능하다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNACKNOWLEDGED&lt;/code&gt; 변경 요청에 대한 응답을 기다리지 않는다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ACKNOWLEDGED&lt;/code&gt; 변경 내용을 메모리까지만 적용하고 클라이언트로 응답을 보낸다 (기본값)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JOURNALED&lt;/code&gt; 변경 내용을 저널로그까지 기록하고 클라이언트로 응답을 보낸다 (2.6 버전부터 지원)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FSYNC&lt;/code&gt; 변경 내용을 데이터파일까지 기록하고 클라이언트로 응답을 보낸다.
    &lt;ul&gt;
      &lt;li&gt;MMAPv1 스토리지 엔진에서 사용되던 옵션&lt;/li&gt;
      &lt;li&gt;WiredTiger 스토리지 엔진은 이 스펙을 지원하지 않는다 (저널로그로 대체)&lt;/li&gt;
      &lt;li&gt;클라이언트의 드라이버에서 제거될 옵션이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/92327939-300bdb00-f098-11ea-8404-952cb435dc08.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;레플리카-셋-간의-동기화-제어&quot;&gt;레플리카 셋 간의 동기화 제어&lt;/h4&gt;
&lt;p&gt;레플리카 셋에서 변경 결과를 어느정도 수준으로 동기화 시킬건지 제어할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{ w : 2 }&lt;/code&gt; 레플리카 셋에서 2대 이상의 멤버가 &lt;strong&gt;WriteConcern&lt;/strong&gt; 조건을 만족 해야한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{ w : &quot;majority&quot;}&lt;/code&gt; 레플리카 셋에서 과반수 이상의 멤버가  &lt;strong&gt;WriteConcern&lt;/strong&gt; 조건을 만족 해야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;readconcern&quot;&gt;ReadConcern&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;WriteConcern&lt;/strong&gt; 옵션에 따라 MongoDB 레플리카 셋의 멤버들은 서로 다른 상태를 가질 수 있다.&lt;br /&gt;
이런 특징이 데이터를 읽어갈 때 문제점을 유발할 가능성이 있기 때문에 데이터 읽기를 일관성 있게 유지할 수 있도록 지원하는 옵션이다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt; 쿼리가 실행되는 MongoDB 서버가 가진 최신의 데이터를 반환 (기본값)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;majority&lt;/code&gt; 레플리카 셋에서 과반수 이상의 멤버가 가진 최신의 데이터를 반환
    &lt;ul&gt;
      &lt;li&gt;WiredTiger 스토리지 엔진만 지원&lt;/li&gt;
      &lt;li&gt;3.2 이상부터 지원&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enableMajorityReadConcern&lt;/code&gt; 옵션 활성화가 전제조건&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linearizable&lt;/code&gt; 레플리카 셋의 모든 멤버가 가진 변경 사항에 대해서만 쿼리 결과를 반환
    &lt;ul&gt;
      &lt;li&gt;3.4 이상부터 지원&lt;/li&gt;
      &lt;li&gt;프라이머리 멤버에서 쿼리를 실행할 때만 사용가능&lt;/li&gt;
      &lt;li&gt;레플리카 셋의 특정 멤버에 장애가 발생할 경우 무한정 대기상태에 빠질 수 있기 때문에 쿼리 타임아웃을 지정하는 것을 권장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;readpreference&quot;&gt;ReadPreference&lt;/h3&gt;

&lt;p&gt;드라이버 수준에서 클라이언트의 쿼리를 어떤 MongoDB 서버로 요청해서 실행할 것인지 결정하는 옵션이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;primary&lt;/code&gt; 프라이머리 멤버로만 쿼리를 요청한다 (기본값, 레플리카 셋에서 프라이머리 멤버가 없으면 쿼리 실행은 실패)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;primaryPreferred&lt;/code&gt; 레플리카 셋에서 프라이머리 멤버가 없으면 세컨드리 멤버로 쿼리를 요청한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;secondary&lt;/code&gt; 쿼리를 레플리카 셋의 세컨드리 멤버로만 요청한다 (세컨드리 멤버가 없으면 쿼리 실행은 실패)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;secondaryPreferred&lt;/code&gt; 레플리카 셋에서 세컨드리 멤버가 없으면 프라이머리 멤버로 쿼리를 요청한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nearest&lt;/code&gt; 레플리카 셋에서 쿼리의 응답 시간이 빠른 멤버로 쿼리를 요청한다.  (레플리카 셋의 멤버들이 글로벌하게 분산되어 있을 경우에 적절한 옵션)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;primaryPreferred&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;secondaryPreferred&lt;/code&gt; 옵션을 사용하는 경우에 일시적인 장애로 커넥션에서 쿼리를 처리하는 멤버가 변경 되었을 경우에는 커넥션이 종료될 때까지 쿼리를 처리하는 멤버는 변경되지 않는다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;세컨드리 읽기는 복제 지연에 대해 검토한 후에 적용하는 것이 좋다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;세컨드리 멤버는 OpLog 를 적용할 때 글로벌 잠금을 획득한다&lt;/li&gt;
  &lt;li&gt;세컨드리에서 실행되는 무거운 쿼리는 OpLog 적용을 지연시킨다&lt;/li&gt;
  &lt;li&gt;MongoDB 매뉴얼에서는 세컨드리 읽기를 가능하면 사용하지 않는 것을 권장한다 (정확히는 사용자 서비스를 세컨드리 읽기에서 처리하는 것)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터-모델링&quot;&gt;데이터 모델링&lt;/h2&gt;

&lt;h3 id=&quot;컬렉션&quot;&gt;컬렉션&lt;/h3&gt;
&lt;p&gt;MongoDB 의 매뉴얼에서 MongoDB는 조인을 지원하지 (3.2부터 제한적으로 지원) 않기 때문에 MongoDB의 도큐먼트는 &lt;strong&gt;가능하면&lt;/strong&gt; 많은 데이터를 포함할 것을 권장하고 있다.&lt;/p&gt;

&lt;p&gt;이 권장사항은 조인 제거, 트랜잭션 보장등의 장점도 있는 반면에 단점도 존재하기 때문에 데이터 특성에 따라 적절한 트레이드 오프가 필요하다&lt;/p&gt;

&lt;p&gt;도큐먼트의 크기가 커지면 발생하는 단점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메모리 캐시 효율 저하&lt;/li&gt;
  &lt;li&gt;디스크 읽기 오퍼레이션 증가&lt;/li&gt;
  &lt;li&gt;네트워크 사용량 증가&lt;/li&gt;
  &lt;li&gt;도큐먼트의 최대 사이즈는 16MB&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;뷰&quot;&gt;뷰&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;성능상의 장점은 없다&lt;/li&gt;
  &lt;li&gt;Materialized View, Updatable View 와 같은 기능은 제공하지 않는다&lt;/li&gt;
  &lt;li&gt;컬렉션을 캡슐화함으로써 얻는 장점을 제공&lt;/li&gt;
  &lt;li&gt;생성된 뷰는 컬렉션처럼 취급하면 된다 &lt;code class=&quot;highlighter-rouge&quot;&gt;db..find()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;db..drop()&lt;/code&gt; 등등&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bson-도큐먼트&quot;&gt;BSON 도큐먼트&lt;/h3&gt;
&lt;p&gt;MongoDB는 도큐먼트를 BSON으로 처리한다 &lt;a href=&quot;http://bsonspec.org/&quot;&gt;BSON 스펙&lt;/a&gt;을 한번 훑어본다면 MongoDB 사용에 도움이 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BSON이 갖고 있는 특징&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lightweight 공간 최적화 : 단순히 문자열로 저장하지 않고 데이터 타입에 맞추어 이진 데이터 타입으로 저장한다&lt;/li&gt;
  &lt;li&gt;Traversable 빠른 탐색 : BSON 도큐먼트는 도큐먼트의 크기, 필드 값의 데이터 타입, 필드 값의 크기와 같은 정보를 포함하고 있어서, 빠른 탐색이 가능 하도록 설계되어 있다&lt;/li&gt;
  &lt;li&gt;Efficient 효율적 : C 언어의 Primitive 타입을 이용하기 때문에 대부분의 언어에서 빠르게 처리가 가능하다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;도큐먼트 구성&lt;/strong&gt;&lt;br /&gt;
4바이트 (도큐먼트 크기)&lt;br /&gt;
1바이트 (필드 값의 타입)&lt;br /&gt;
필드 명&lt;br /&gt;
0x00 (필드 명의 끝)&lt;br /&gt;
4바이트 (필드 값의 크기)&lt;br /&gt;
필드 값&lt;br /&gt;
0x00 (필드 값의 끝)&lt;br /&gt;
0x00 (도큐먼트의 끝)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/blog-sample/tree/master/bson-sample&quot;&gt;BSON 이해를 위한 샘플 코드&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * expected.
 *
 * {&quot;key&quot;:&quot;value&quot;}
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{\&quot;key\&quot;: \&quot;value\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INPUT_BSON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 도큐먼트 사이즈 20&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 문자열 필드&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x6b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x79&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필드명: key&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필드명의 끝 (null)&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x06&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필드 길이: 6 (null 포함)&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x76&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x61&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x75&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필드: value&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필드의 끝 (null)&lt;/span&gt;
    &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 도큐먼트의 끝 (null)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;정규화-역정규화&quot;&gt;정규화, 역정규화&lt;/h3&gt;

&lt;p&gt;아래는 &lt;a href=&quot;https://wikibook.co.kr/real-mongodb/&quot; title=&quot;대용량 데이터 처리를 위한 Real MongoDB&quot;&gt;참고서적&lt;/a&gt;에 적힌 내용중 하나
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/92492094-ee149d80-f22d-11ea-95d3-e53bb88c4671.jpg&quot; alt=&quot;KakaoTalk_20200908_234751372&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;쿼리-개발-및-튜닝&quot;&gt;쿼리 개발 및 튜닝&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;맵 리듀스&lt;/li&gt;
  &lt;li&gt;Aggregation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;쿼리-실행계획&quot;&gt;쿼리 실행계획&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;쿼리 실행계획 분석&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고서적&quot;&gt;참고서적&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wikibook.co.kr/real-mongodb/&quot; title=&quot;대용량 데이터 처리를 위한 Real MongoDB&quot;&gt;대용량 데이터 처리를 위한 Real MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 16 Aug 2020 13:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/mongo-study</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/mongo-study</guid>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>레디스 기초 공부</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#레디스-주요정보-및-특징&quot; id=&quot;markdown-toc-레디스-주요정보-및-특징&quot;&gt;레디스 주요정보 및 특징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#기본-명령어&quot; id=&quot;markdown-toc-기본-명령어&quot;&gt;기본 명령어&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#문자열-명령&quot; id=&quot;markdown-toc-문자열-명령&quot;&gt;문자열 명령&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#리스트-명령&quot; id=&quot;markdown-toc-리스트-명령&quot;&gt;리스트 명령&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#셋-명령&quot; id=&quot;markdown-toc-셋-명령&quot;&gt;셋 명령&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#정렬된-셋-명령&quot; id=&quot;markdown-toc-정렬된-셋-명령&quot;&gt;정렬된 셋 명령&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#해시-명령&quot; id=&quot;markdown-toc-해시-명령&quot;&gt;해시 명령&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#데이터-처리-명령어&quot; id=&quot;markdown-toc-데이터-처리-명령어&quot;&gt;데이터 처리 명령어&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#접두사와-접미사&quot; id=&quot;markdown-toc-접두사와-접미사&quot;&gt;접두사와 접미사&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#문자열&quot; id=&quot;markdown-toc-문자열&quot;&gt;문자열&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#해시-데이터&quot; id=&quot;markdown-toc-해시-데이터&quot;&gt;해시 데이터&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#셋-데이터&quot; id=&quot;markdown-toc-셋-데이터&quot;&gt;셋 데이터&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#정렬된-셋-데이터&quot; id=&quot;markdown-toc-정렬된-셋-데이터&quot;&gt;정렬된 셋 데이터&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#리스트-데이터&quot; id=&quot;markdown-toc-리스트-데이터&quot;&gt;리스트 데이터&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#키-제어-명령어&quot; id=&quot;markdown-toc-키-제어-명령어&quot;&gt;키 제어 명령어&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#레디스-프로토콜&quot; id=&quot;markdown-toc-레디스-프로토콜&quot;&gt;레디스 프로토콜&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#클러스터&quot; id=&quot;markdown-toc-클러스터&quot;&gt;클러스터&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#복제&quot; id=&quot;markdown-toc-복제&quot;&gt;복제&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#샤딩&quot; id=&quot;markdown-toc-샤딩&quot;&gt;샤딩&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#레디스-운영-시-고려사항&quot; id=&quot;markdown-toc-레디스-운영-시-고려사항&quot;&gt;레디스 운영 시 고려사항&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#기타&quot; id=&quot;markdown-toc-기타&quot;&gt;기타&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;레디스-주요정보-및-특징&quot;&gt;레디스 주요정보 및 특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;영속성을 지원하는 인메모리 데이터 저장소&lt;/li&gt;
  &lt;li&gt;읽기 성능 증대를 위한 서버 측 복제를 지원&lt;/li&gt;
  &lt;li&gt;쓰기 성능 증대를 위한 클라이언트 측 샤딩을 지원&lt;/li&gt;
  &lt;li&gt;5가지 데이터형 (문자열, 리스트, 해시, 셋, 정렬된 셋) 을 지원&lt;/li&gt;
  &lt;li&gt;메모리 이외의 영구 저장소를 지원하므로 인스턴스 재시작에 대한 캐시 웜업에 대한 고려가 필요하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기본-명령어&quot;&gt;기본 명령어&lt;/h2&gt;

&lt;h3 id=&quot;문자열-명령&quot;&gt;문자열 명령&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;레디스의 증감처리는 signed integer 로 표현할 수 있는 범위에서만 가능하다(시스템 종속적인 정수형을 가지지 않는다)&lt;br /&gt;
표현범위를 넘어설 경우 overflow 오류 발생&lt;/li&gt;
  &lt;li&gt;문자열 데이터의 최대 크기는 &lt;code class=&quot;highlighter-rouge&quot;&gt;512MB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;set&lt;/td&gt;
      &lt;td&gt;OK&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;주어진 키에 값을 저장한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;append&lt;/td&gt;
      &lt;td&gt;문자열의 전체 길이&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;키가 존재하면 append, 아니면 set 과 동일&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;incr&lt;/td&gt;
      &lt;td&gt;결과값(value)을 리턴&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;증가연산 (1씩, 숫자만 해당)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;decr&lt;/td&gt;
      &lt;td&gt;결과값(value)을 리턴&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;감소연산 (1씩, 숫자만 해당)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;리스트-명령&quot;&gt;리스트 명령&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;리스트 데이터는 논리적으로 링크드 리스트의 구현이다 (이중 연결 리스트)&lt;/li&gt;
  &lt;li&gt;데이터가 입력된 순서대로 저장되고 조회된다는 특징 때문에 먼저 입력한 자료를 먼저 처리하는 큐로 사용되기도 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;lpush&lt;/td&gt;
      &lt;td&gt;명령이 수행된 후 리스트 사이즈&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;맨 앞쪽에 입력된 요소를 저장한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lrange&lt;/td&gt;
      &lt;td&gt;해당 범위의 요소들, 존재하지 않으면 nil&lt;/td&gt;
      &lt;td&gt;O(S+N)&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;리스트의 시작 인덱스 부터 종료 인덱스 범위의 요소를 조회한다 (&lt;a href=&quot;#negative-index-sample&quot;&gt;예시&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;셋-명령&quot;&gt;셋 명령&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sadd&lt;/td&gt;
      &lt;td&gt;성공이면 입력된 값의 개수, 이미 존재하면 0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(N) N은 입력된 값의 개수&lt;/td&gt;
      &lt;td&gt;지정된 셋에 입력된 값을 저장한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;smembers&lt;/td&gt;
      &lt;td&gt;조회된 값 목록, 존재하지 않으면 nil&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(N) N은 입력된 값의 개수&lt;/td&gt;
      &lt;td&gt;지정된 셋에 저장된 모든 값의 목록을 조회한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;정렬된-셋-명령&quot;&gt;정렬된 셋 명령&lt;/h3&gt;
&lt;p&gt;저장된 요소에 가중치를 부여하여 ASC 정렬을 제공한다.&lt;br /&gt;
가중치가 동일할 경우에는 정렬 안정성을 보장하지 않는다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;zadd&lt;/td&gt;
      &lt;td&gt;성공이면 입력된 값의 개수, 이미 존재하면 0&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
      &lt;td&gt;O(log(N))&lt;/td&gt;
      &lt;td&gt;정렬된 셋에 가중치와 값으로 우리우전 데이터를 저장한다. 단, 이미 존재하는 값이면 기존의 가중치를 입력된 가중치로 덮어쓴다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zrange&lt;/td&gt;
      &lt;td&gt;조회된 값 목록, 값이 존재하지 않으면 nil&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
      &lt;td&gt;O(log(N)+M) N은 입력되어 있는 값의 개수, M은 조회된 값으 개수&lt;/td&gt;
      &lt;td&gt;정렬된 셋의 시작 인덱스부터 종료 인덱스 범위에 해당하는 값들을 가중치 오름차순으로 조회한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;해시-명령&quot;&gt;해시 명령&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hset&lt;/td&gt;
      &lt;td&gt;존재하지 않는 필드일 때 1, 존재하는 필드일 때 0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;지정된 해시에 요청한 필드와 값을 저장한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;hget&lt;/td&gt;
      &lt;td&gt;지정된 필드가 존재할 때 저장된 값, 아니면 nil&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;지정된 해시에 저장된 필드의 값을 조회한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;hgetall&lt;/td&gt;
      &lt;td&gt;지정된 키에 저장된 모든 필드와 값의 목록&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;O(N)&lt;/td&gt;
      &lt;td&gt;지정된 키에 저장된 모든 필드와 값을 조회한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;데이터-처리-명령어&quot;&gt;데이터 처리 명령어&lt;/h2&gt;
&lt;h3 id=&quot;접두사와-접미사&quot;&gt;접두사와 접미사&lt;/h3&gt;
&lt;p&gt;레디스는 기본적인 명령에 접두사와 접미사를 조합한 명령어를 제공한다. (몇 가지 예외 사항은 존재)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;접두사 커맨드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;멀티&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s&lt;/td&gt;
      &lt;td&gt;멀티&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;z&lt;/td&gt;
      &lt;td&gt;정렬된 셋&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;해시 데이터&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;접미사 커맨드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;nx&lt;/td&gt;
      &lt;td&gt;값이 없을 경우에만 처리 (&lt;strong&gt;원자성 보장&lt;/strong&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;by&lt;/td&gt;
      &lt;td&gt;주어진 값만큼 증가/감소 처리 (&lt;code class=&quot;highlighter-rouge&quot;&gt;incr&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;decr&lt;/code&gt; 커맨드와 조합하여 사용, 값의 부호에 영향을 받으며 수학적 개념과 동일)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;문자열&quot;&gt;문자열&lt;/h3&gt;
&lt;p&gt;레디스는 비트연산을 통해 저장되는 문자열 데이터를 비트 단위로 처리할 수 있다.&lt;br /&gt;
레디스는 데이터의 저장을 바이트 단위로 하기 때문에 키가 존재하지 않을 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;setbit&lt;/code&gt; 의 실행 결과로 생성되는 데이터의 크기는 &lt;code class=&quot;highlighter-rouge&quot;&gt;(오프셋/8) + 1&lt;/code&gt; 이다&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;getset&lt;/td&gt;
      &lt;td&gt;이전에 저장된 값을 리턴&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;입력된 값을 저장하고, 저장되어 있던 값을 리턴한다. 없으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; 리턴&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;setbit&lt;/td&gt;
      &lt;td&gt;이전에 저장된 비트의 값&lt;/td&gt;
      &lt;td&gt;2.2&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;입력된 오프셋 위치에 저장된 bit 값을 변경한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getbit&lt;/td&gt;
      &lt;td&gt;비트&lt;/td&gt;
      &lt;td&gt;2.2&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;입력된 오프셋 위치에 저장된 bit 값을 리턴한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bitcount&lt;/td&gt;
      &lt;td&gt;지정된 범위에 저장된 비트 중 1의 개수&lt;/td&gt;
      &lt;td&gt;2.6&lt;/td&gt;
      &lt;td&gt;O(N)&lt;/td&gt;
      &lt;td&gt;주어진 키값의 비트 중 1인 값의 개수를 조회한다. 인덱스 범위는 바이트 단위 인덱스다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;해시-데이터&quot;&gt;해시 데이터&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;해시 데이터는 2&lt;sup&gt;32&lt;/sup&gt;-1개의 필드와 값을 저장할 수 있다 (약 42억)&lt;/li&gt;
  &lt;li&gt;경험적으로 이해할 수 있는 명령어라 명령어 표는 생략
&lt;code class=&quot;highlighter-rouge&quot;&gt;hmset&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hsetnx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hmget&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hlen&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hdel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hkeys&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hvals&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hincrby&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hincrbyfloat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;해시에 저장된 데이터의 필드값이 숫자일 때 증감연산을 이용할 수 있다 (소수점은 17자리로 고정)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#redis-zipmap&quot;&gt;해시 데이터의 특별한 유형&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;셋-데이터&quot;&gt;셋 데이터&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;셋 데이터는 2&lt;sup&gt;32&lt;/sup&gt;-1개의 필드와 값을 저장할 수 있다 (약 42억)&lt;/li&gt;
  &lt;li&gt;셋의 특성상 값이 저장될 때 중복에 대한 확인 작업을 수행하기 때문에 nx 접미사 명령은 존재하지 않는다&lt;/li&gt;
  &lt;li&gt;집합 연산을 지원한다 (합집합, 교집합, 차집합)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sinter&lt;/td&gt;
      &lt;td&gt;교집합에 해당하는 값&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(N)&lt;/td&gt;
      &lt;td&gt;주어진 키에 저장된 요소들의 교집합을 돌려준다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;scard&lt;/td&gt;
      &lt;td&gt;저장된 요소의 개수&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;주어진 키에 저장된 요소들의 개수를 리턴한다 (card 는 cardinality 의 약자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;srem&lt;/td&gt;
      &lt;td&gt;제거된 값의 수&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;주어진 키에 저장된 요소를 제거하고 제거된 요소의 개수를 리턴한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spop&lt;/td&gt;
      &lt;td&gt;제거된 값&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;주어진 키에 저장된 요소 중에서 임의의 요소를 제거하고 리턴한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sismember&lt;/td&gt;
      &lt;td&gt;존재하면 1, 존재하지 않으면 0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;입력된 요소가 주어진 키에 저장되어 있는지에 대한 여부를 리턴한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;smove&lt;/td&gt;
      &lt;td&gt;이동되었으면 1, 실패하면 0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;원본키에 저장된 요소를 대상키로 이동하고 이동 결과를 리턴한다. 원본키가 존재하지 않으면 결과로 0을 리턴하고, 대상 키가 존재하지 않으면 새로운 셋 데이터를 생성하고 요소를 이동시킨다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;정렬된-셋-데이터&quot;&gt;정렬된 셋 데이터&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;z와 명령어 가운데에 &lt;code class=&quot;highlighter-rouge&quot;&gt;rev&lt;/code&gt; 라는 접두사가 추가되면 내림차순 정렬을 의미한다&lt;br /&gt;
zrevrange 명령은 내림차순으로 정렬된 결과를 리턴한다&lt;/li&gt;
  &lt;li&gt;저장 가능한 요소의 수는 셋 데이터와 동일하다&lt;/li&gt;
  &lt;li&gt;LIMIT 키워드를 이용하여 일부의 데이터만 조회하는 것이 가능하다 MySQL 의 LIMIT 과 유사 (다른 명령어와의 조합도 가능할 것 같은데? 더 공부해봐야겠음)&lt;/li&gt;
  &lt;li&gt;정렬된 셋의 명령 중에서 가중치의 범위를 인자로 사용하는 명령은 특별한 표현식을 포함하여 사용할 수 있다
    &lt;ul&gt;
      &lt;li&gt;무한대 표현식 &lt;code class=&quot;highlighter-rouge&quot;&gt;+inf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-inf&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;초과/미만 표현식 &lt;code class=&quot;highlighter-rouge&quot;&gt;zrangebyscore ex-key (1 (3&lt;/code&gt; (ex-key 키에 저장된 요소중에 가중치가 1보다 크고 3보다 작은 범위에 해당하는 요소를 조회한다)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;zincrby&lt;/td&gt;
      &lt;td&gt;적용된 가중치 값&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
      &lt;td&gt;O(log(N))&lt;/td&gt;
      &lt;td&gt;주어진 키에 저장된 셋 데이터 중 지정된 요소의 가중치를 입력된 값만큼 증가 시킨다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zrank&lt;/td&gt;
      &lt;td&gt;값이 존재하면 가중치 오름차순으로 정렬된 순위, 없으면 nil&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;O(log(N))&lt;/td&gt;
      &lt;td&gt;주어진 키에 저장된 셋 데이터 중 지정된 요소의 순위를 조회한다. (zero base)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zrevrank&lt;/td&gt;
      &lt;td&gt;값이 존재하면 내림차순 순위, 없으면 nil&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;O(log(N))&lt;/td&gt;
      &lt;td&gt;주어진 키에 저장된 셋 데이터 중 지정된 요소의 순위를 조회한다. (zero base)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zrangebyscore&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;정렬된 셋의 점수 범위에 해당하는 데이터 조회&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zremrangebyrank&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;정렬된 셋에서 순위에 해당하는 범위의 데이터 제거&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zremrangebyscore&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;정렬된 셋에서 가중치에 해당하는 범위의 데이터 제거&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;리스트-데이터&quot;&gt;리스트 데이터&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;저장 가능한 요소의 수는 셋 데이터와 동일하다&lt;/li&gt;
  &lt;li&gt;이중 연결 리스트로 구현되어 있기 때문에 첫 번째 요소와 마지막 요소이 조회 시간이 가장 빠르며 리스트의 중간에 저장된 데이터를 조회하는 시간이 가장 오래 걸린다&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;커맨드&lt;/th&gt;
      &lt;th&gt;응답&lt;/th&gt;
      &lt;th&gt;지원버전&lt;/th&gt;
      &lt;th&gt;시간복잡도&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;lindex&lt;/td&gt;
      &lt;td&gt;해당 인덱스 위치에 저장된 요소&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;O(N)&lt;/td&gt;
      &lt;td&gt;지정된 리스트에 저장된 요소의 인덱스에 해당하는 요소의 값을 조회한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blpop&lt;/td&gt;
      &lt;td&gt;조회된 요소&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;지정된 리스트에 저장된 요소 중 맨 왼쪽 요소를 조회한다. 단 저장된 데이터가 없거나 키가 존재하지 않을 때는 만료시간에 지정된 시간만큼 대기한다 (단위:초). 0이면 무한히 대기)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;brpop&lt;/td&gt;
      &lt;td&gt;조회된 요소&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;지정된 리스트에 저장된 요소 중 맨 오른쪽 요소를 조회한다. 단 저장된 데이터가 없거나 키가 존재하지 않을 때는 만료시간에 지정된 시간만큼 대기한다 (단위:초). 0이면 무한히 대기)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;키-제어-명령어&quot;&gt;키 제어 명령어&lt;/h2&gt;

&lt;h2 id=&quot;레디스-프로토콜&quot;&gt;레디스 프로토콜&lt;/h2&gt;

&lt;h2 id=&quot;클러스터&quot;&gt;클러스터&lt;/h2&gt;

&lt;h3 id=&quot;복제&quot;&gt;복제&lt;/h3&gt;
&lt;p&gt;프라이머리 노드(쓰기 전용)와 세컨더리 노드(읽기 전용)를 구성하여 트래픽을 분산하는 기법&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;세컨더리 노드는 언제든지 확장이 가능하다 (데이터 복제 요청을 세컨더리 노드가 프라이머리 노드에게 요청하기 때문에 프라이머리 노드의 무중단이 보장됨)&lt;br /&gt;
단, 세컨더리 노드가 처음 올라올 때 프라이머리 노드의 모든 데이터를 복제해야 하는데 이때 최대한의 리소스를 사용하기 때문에 복제하는 동안에 프라이머리 노드의 성능이 저하될 수 있다.&lt;/li&gt;
  &lt;li&gt;프라이머리 노드에 쓰기 작업이 발생하면 세컨더리 노드에 변경 이벤트를 전파하여 데이터 일관성을 유지한다.&lt;/li&gt;
  &lt;li&gt;노드를 복제 한다고 해서 성능이 선형으로 증가하지는 않는다 (데이터 대역폭, 네트워크 대역폭, 데이터 동기화 작업) 이를 임계점이라고 함&lt;/li&gt;
  &lt;li&gt;레디스 클라이언트에서 쓰기/읽기 노드를 모두 알고 있어야 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;샤딩&quot;&gt;샤딩&lt;/h3&gt;
&lt;p&gt;데이터를 특정 조건에 따라 나누어 저장&lt;br /&gt;
레디스 2.6 버전은 서버측 샤딩을 지원하지 않기 때문에 위치 투명성이 보장되지 않는다. (클라이언트측 샤딩 기법을 이용해야 함)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수직 샤딩 (Vertical Sharding) 데이터 성격에 따라 분리&lt;/li&gt;
  &lt;li&gt;범위 샤딩 (Range Sharding) 데이터의 범위에 따라 분리&lt;/li&gt;
  &lt;li&gt;해시 기반 샤딩 (Hash Based Sharding) 키값을 해싱하고 해싱된 값을 이용하여 저장소를 선택하는 방법으로 일관된 해싱(Consistent Hashing)이라고 부르기도 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;레디스-운영-시-고려사항&quot;&gt;레디스 운영 시 고려사항&lt;/h2&gt;
&lt;p&gt;레디스는 데이터 저장과 조회에 단일 스레드를 사용한다 (하나의 CPU 코어만 이용), 그렇기 때문에 멀티코어는 레디스 성능에 큰 영향을 주지 않는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU 임계점&lt;/li&gt;
  &lt;li&gt;메모리 대역폭&lt;/li&gt;
  &lt;li&gt;네트워크 대역폭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q. 만약 레디스에 저장될 데이터의 크기를 산정하지 못하여 레디스 설정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;maxmemory&lt;/code&gt; 값을 지정하지 못했다면?&lt;br /&gt;
A. 레디스에 데이터가 계속 추가되어 물리 메모리가 부족하게 되면 스왑 메모리를 이용하게 되며 스왑 메모리에 데이터가 저장되기 시작하면 성능이 저하된다&lt;br /&gt;
스왑 메모리 공간이 부족해지면 OOM 킬러가 동작한다&lt;/p&gt;

&lt;p&gt;레디스가 &lt;code class=&quot;highlighter-rouge&quot;&gt;AOF&lt;/code&gt;나 스냅샷과 같은 영구 저장소를 사용하도록 설정되어 있다면 스왑영역은 최소한 물리 메모리 크기만큼의 스왑영역을 설정해야 한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;레디스에서 스냅샷을 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; 함수가 동작하면 레디스가 점유하는 메모리만큼의 메모리를 다시 할당하려고 시도하게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;레디스 복제 구성에서는 프라이머리 노드의 스냅샷 설정이 꺼져 있더라도, 새로운 세컨더리 노드가 프라이머리 노드에 추가되면 프라이머리 노드는 전체 데이터를 복제하기 위해 스냅샷을 생성한다.&lt;br /&gt;
레디스는 복제를 위해서 스냅샷을 생성하고 스냅샷 데이터를 세컨더리 노드로 전송하기 위한 버퍼를 생성하는데, 이 버퍼의 크기가 지정된 크기보다 커지면 세컨더리 노드의 연결을 강제로 끊게 된다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;관련설정 &lt;code class=&quot;highlighter-rouge&quot;&gt;client-output-buffer-limit&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;기타&quot;&gt;기타&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;레디스의 키 이름에는 제한이 없으며 어떤 문자도 사용할 수 있다 (관례상 콜론은 키에 의미를 부여하는 구분자로 사용된다.)&lt;/li&gt;
  &lt;li&gt;응답값을 가지는 레디스 명령은 상태응답, 에러응답, 숫자응답, 단일 벌크응답, 멀티 벌크응답으로 나&lt;/li&gt;
  &lt;li&gt;레디스 명령의 인덱스 표현에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; 은 조금 특별하다 (음수가 입력되면 인덱스를 맨 마지막부터 센다.)&lt;br /&gt;
  &lt;span id=&quot;negative-index-sample&quot;&gt;예시&lt;/span&gt;)
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lrange key 0 -2&lt;/code&gt; (키의 이름이 &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;인 리스트의 0번째부터 마지막에서 두번째까지의 데이터를 조회하라)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;CAP 정리&lt;br /&gt;
일관성(Consistency), 가용성(Availability), 분할 허용성(Partition Tolerance) 모두를 동시에 지원하는 분산 컴퓨터 시스템은 없다&lt;/li&gt;
  &lt;li&gt;레디스는 정전과 같은 하드웨어 장애 발생 시에 데이터 유실을 방지하기 위하여 AOF(Append Only File) 를 사용한다.&lt;/li&gt;
  &lt;li&gt;https://blog.nahurst.com/visual-guide-to-nosql-systems&lt;/li&gt;
  &lt;li&gt;&lt;span id=&quot;redis-zipmap&quot;&gt;해시 데이터의 특별한 유형&lt;/span&gt;
레디스는 메모리 공간을 절약하기 위해서 세 가지 내부 저장구조(zipmap, ziplist, intset)를 사용한다.&lt;br /&gt;
이 내부 저장구조를 사용하게 되면 CPU를 더 사용하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이것이 레디스다 (저자: 정경석 출판사: 한빛 미디어)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Aug 2020 18:39:29 +0900</pubDate>
        <link>https://jehuipark.github.io/study/redis-study</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/redis-study</guid>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>Spring Transactional 과 메소드 접근제어 수준</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#transactional-선언-메소드는-public-으로-지정하자&quot; id=&quot;markdown-toc-transactional-선언-메소드는-public-으로-지정하자&quot;&gt;Transactional 선언 메소드는 public 으로 지정하자&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#이유를-파헤쳐보자&quot; id=&quot;markdown-toc-이유를-파헤쳐보자&quot;&gt;이유를 파헤쳐보자&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#관련링크&quot; id=&quot;markdown-toc-관련링크&quot;&gt;관련링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transactional-선언-메소드는-public-으로-지정하자&quot;&gt;Transactional 선언 메소드는 public 으로 지정하자&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; 어노테이션을 이용하여 선언적 트랜잭션 메소드를 작성할 때는 주의해야 할 점이 있다.&lt;br /&gt;
메소드의 접근제어 수준을 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; 으로 설정해야 &lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt; 에서 지원하는 트랜잭션을 획득 할 수 있다는 점인데, 이 스펙을 지키지 않으면 원하는 동작을 기대할 수 없을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;이유를-파헤쳐보자&quot;&gt;이유를 파헤쳐보자&lt;/h2&gt;
&lt;p&gt;스프링이 어플리케이션 컨텍스트를 구성하는 과정중에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; 어노테이션을 스캔하여 트랜잭션 후보군을 탐색하는 과정이 존재한다.&lt;/p&gt;

&lt;p&gt;트랜잭션 후보군을 탐색하는 작업은 &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractFallbackTransactionAttributeSource&lt;/code&gt;&lt;/a&gt; 클래스를 상속받은 &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnnotationTransactionAttributeSource&lt;/code&gt;&lt;/a&gt; 클래스가 담당하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractFallbackTransactionAttributeSource&lt;/code&gt;&lt;/a&gt; 에서 트랜잭션 후보군 탐색 로직의 일부분을 확인해보자
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/87243130-5897a000-c46e-11ea-8d62-9092da18b680.png&quot; alt=&quot;image&quot; /&gt;
이 메소드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;allowPublicMethodsOnly()&lt;/code&gt; 값과 타겟 메소드의 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; 여부에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 을 &lt;code class=&quot;highlighter-rouge&quot;&gt;fast - return&lt;/code&gt; 하도록 작성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;allowPublicMethodsOnly()&lt;/code&gt; 메소드를 확인 해보자
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/87243854-694b1480-c474-11ea-8bff-6ba005c8e7bd.png&quot; alt=&quot;image&quot; /&gt;
기본 전략은 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 를 리턴하게 되어 있지만, 재구현을 가능성을 고려하여 설계된 메소드이다.&lt;/p&gt;

&lt;p&gt;기본 구현체인 &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnnotationTransactionAttributeSource&lt;/code&gt;&lt;/a&gt; 클래스를 확인해보자.
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/87243148-7402ab00-c46e-11ea-8870-442e89dc95ca.png&quot; alt=&quot;image&quot; /&gt;
설정변경이 가능하긴 하지만, 기본값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; 메소드만 허용하는 것으로 되어있는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;기본 설정이 이렇기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; 메소드가 아니라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; 어노테이션이 선언되어 있다고 하더라도, 메소드 접근제어 수준이 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; 이 아니라면 트랜잭션을 획득하지 못한다.&lt;/p&gt;

&lt;h2 id=&quot;관련링크&quot;&gt;관련링크&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/5.2.x/spring-framework-reference/data-access.html#transaction-declarative-annotations&quot;&gt;Spring Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 12 Jul 2020 18:39:29 +0900</pubDate>
        <link>https://jehuipark.github.io/spring/spring-transaction-1</link>
        <guid isPermaLink="true">https://jehuipark.github.io/spring/spring-transaction-1</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>Springboot 2.2.x MockMvc 인코딩 이슈</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#springboot-mockmvc-한글깨짐&quot; id=&quot;markdown-toc-springboot-mockmvc-한글깨짐&quot;&gt;SpringBoot MockMvc 한글깨짐&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#해결법-찾기&quot; id=&quot;markdown-toc-해결법-찾기&quot;&gt;해결법 찾기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#해결&quot; id=&quot;markdown-toc-해결&quot;&gt;해결&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#정리&quot; id=&quot;markdown-toc-정리&quot;&gt;정리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#관련링크&quot; id=&quot;markdown-toc-관련링크&quot;&gt;관련링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;springboot-mockmvc-한글깨짐&quot;&gt;SpringBoot MockMvc 한글깨짐&lt;/h2&gt;
&lt;p&gt;SpringBoot 2.1.x 를 사용하다가 2.2.x 로 버전을 변경한 이후에 눈에 거슬리는게 생겼다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt; 에는 요청과 응답에 관한 정보를 이쁘게 출력해주는 기능이 포함되어 있는데, 
버전을 변경한 이후 MockMvc 에서 출력시 이용하는 인코딩이 맞지 않아 글자가 박살난 것을 확인할 수 있다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/87222377-1eff6000-c3ae-11ea-89bd-353cae7f4038.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 한글깨짐 현상은 SpringBoot 2.2 로 넘어오면서 적용된 변경사항에 대한 사이드 이펙트로 추측 (이거 버그 같은데)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Spring 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;MediaType.APPLICATION_JSON_UTF8&lt;/code&gt; 사용중단 결정이 내려지고, 해당 변경사항이 SpringFramework 5.2 버전에서 적용이 되었는데, SpringBoot 2.2.x 버전부터 SpringFramework 버전을 5.2 변경&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아무튼 실제 코드 동작에는 영향이 없기도 하고 귀찮아서 그냥 방치하고 있었는데, MockMvcFilter 에 UTF8 인코딩 필터를 추가하면 된다는 정보를 확인했다.&lt;/p&gt;

&lt;h2 id=&quot;해결법-찾기&quot;&gt;해결법 찾기&lt;/h2&gt;
&lt;p&gt;좋은 정보를 얻었으니 직접 해결 해보자&lt;/p&gt;

&lt;p&gt;우선 현재의 테스트 코드는 어플리케이션 컨텍스트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt; 를 주입받고 있는 방식이니 &lt;code class=&quot;highlighter-rouge&quot;&gt;@AutoConfigureMockMvc&lt;/code&gt; 의 주석을 확인 해보았다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/87222728-46a3f780-c3b1-11ea-852f-9b3cf2a7171a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;주석에서 시키는대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvcAutoConfiguration&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootMockMvcBuilderCustomizer&lt;/code&gt; 를 확인해 보았다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvcAutoConfiguration&lt;/code&gt; 의 일부분인데 자주 보이는 패턴이라서 어떤 느낌인지 알 것 같다.&lt;br /&gt;
&lt;em&gt;자동 설정에 대하여 확장 포인트를 제공하기 위해 이런식으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;hook&lt;/code&gt; 을 제공하는 패턴이 많음&lt;/em&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/87222798-042eea80-c3b2-11ea-9858-6cee042fb4a8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고, &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootMockMvcBuilderCustomizer&lt;/code&gt; 를 살펴보자.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBootMockMvcBuilderCustomizer&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvcAutoConfiguration&lt;/code&gt; 에서 확인했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvcBuilderCustomizer&lt;/code&gt; 인터페이스의 기본 구현체다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;builder&lt;/code&gt; 를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt; 에 필터를 추가할 수 있겠다는 정보를 얻을 수 있다. 
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/87222819-3e988780-c3b2-11ea-987b-9706f6155af1.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;커스텀 설정 어노테이션을 작성한다
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;SampleConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
   &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;MockMvcBuilderCustomizer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;utf8Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFilters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharacterEncodingFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트에 커스텀 설정을 추가한다
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@SampleConfig&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleApplicationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
   &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
   &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
   &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;한글&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    
     &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;테스트 코드를 변경했으니 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt; 인코딩이 깨지나 안깨지나 로깅을 확인 해보자&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/87223171-a9978d80-c3b5-11ea-96cb-c23f938cc016.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;안깨진다 👍👍👍 샘플 코드는 &lt;a href=&quot;https://github.com/JeHuiPark/blog-sample/tree/master/boot2-2-x-mock-mvc-sample&quot;&gt;여기에서&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;p&gt;영어 능력이 부족해서 100% 맞는 내용이다 장담할 수는 없지만 나름대로 요약하면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7159&quot;&gt;RFC 7159&lt;/a&gt; 가 폐기되고, &lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt; 로 대체 되었다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt; 에 따르면 JSON 문자열은 UTF-8 을 이용하여 인코딩 하여야 한다.&lt;/li&gt;
  &lt;li&gt;메이저 브라우저인 크롬에는 이미 &lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt; 스펙이 적용되어 있다.&lt;/li&gt;
  &lt;li&gt;스프링에서도 &lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt; 스펙을 적용하기로 결정하였다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt; 스펙 적용은 SpringFrameWork 5.2 버전에서 이루어졌다.&lt;/li&gt;
  &lt;li&gt;SpringBoot 2.2.x 버전은 SpringFrameWork 5.2 버전을 사용한다.&lt;/li&gt;
  &lt;li&gt;SpringBoot 테스트 도구에는 RFC 8259 스펙 적용이 되지 않은듯 하다. (2.3.0 버전도 확인해 보았으나, 동일한 이슈 존재)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;관련링크&quot;&gt;관련링크&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JeHuiPark/blog-sample/tree/master/boot2-2-x-mock-mvc-sample&quot;&gt;샘플 코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes&quot;&gt;SpringBoot 2.2 Release Note&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#deprecation-of-mediatypeapplication_json_utf8-and-mediatypeapplication_problem_json_utf8&quot;&gt;Upgrading to Version 5.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/issues/22788&quot;&gt;미디어 타입 깃헙 이슈&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7159&quot;&gt;RFC 7159&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 11 Jul 2020 19:22:17 +0900</pubDate>
        <link>https://jehuipark.github.io/spring/boot-2-2-x-mock-mvc-encoding-issue</link>
        <guid isPermaLink="true">https://jehuipark.github.io/spring/boot-2-2-x-mock-mvc-encoding-issue</guid>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>MS Excel csv 한글깨짐</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#증상&quot; id=&quot;markdown-toc-증상&quot;&gt;증상&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#원인&quot; id=&quot;markdown-toc-원인&quot;&gt;원인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#해결&quot; id=&quot;markdown-toc-해결&quot;&gt;해결&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#예제코드&quot; id=&quot;markdown-toc-예제코드&quot;&gt;예제코드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#매직넘버-적용결과&quot; id=&quot;markdown-toc-매직넘버-적용결과&quot;&gt;매직넘버 적용결과&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;증상&quot;&gt;증상&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;특정 편집기로는 CSV 파일을 열어볼 때는 글자 깨짐 현상 없음&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/85197661-72d1d880-b31d-11ea-8c75-716a66090d9b.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MS Excel 편집기로 CSV 파일을 열어볼 때는 글자 깨짐 현상 발생
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/85197684-8f6e1080-b31d-11ea-8a8a-4600bb13ef68.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;원인&quot;&gt;원인&lt;/h2&gt;
&lt;p&gt;MS Excel 에 파일의 인코딩을 알리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;BOM&lt;/code&gt; 누락 (매직넘버라고 부른다.)&lt;/p&gt;

&lt;p&gt;아래는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%B0%94%EC%9D%B4%ED%8A%B8_%EC%88%9C%EC%84%9C_%ED%91%9C%EC%8B%9D&quot;&gt;위키피디아&lt;/a&gt;의 문서의 내용을 발췌&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;마이크로소프트의 컴파일러와 인터프리터 그리고 노트패드와 같은 마이크로소프트 윈도우의 많은 소프트웨어들은 BOM을 휴리스틱을 이용하지 않고 필수적인 매직 넘버처럼 처리합니다. 이 도구들은 UTF-8로 텍스트를 저장할 때 BOM을 추가하며, BOM이 나타나지 않거나 파일에 ASCII만 포함되어 있지 않다면 UTF-8을 해석할 수 없습니다. 또한 구글 독스는 문서를 다운로드를 위한 플레인 텍스트로 변환할 때 BOM을 추가합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF8&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BOM&lt;/code&gt;[-17, -69, -65] 추가&lt;/p&gt;

&lt;h2 id=&quot;예제코드&quot;&gt;예제코드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/blog-sample/tree/master/ms-excel-utf8-sample&quot;&gt;예제코드 저장소&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noBomCsv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ms-excel-no-bom-example.csv&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomCsv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ms-excel-bom-example.csv&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noBomCsvWriter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noBomCsv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomCsvWriter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bomCsv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;이름,나이,성별\n&quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;박제희,29,남\n&quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;홍길동,30,남&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;noBomCsvWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;apply_MS_UTF8_Encoding_BOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bomCsvWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bomCsvWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_MS_UTF8_Encoding_BOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bomCsvWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bomCsvWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;매직넘버-적용결과&quot;&gt;매직넘버 적용결과&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/85197943-77978c00-b31f-11ea-820e-248f425463b7.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 20 Jun 2020 17:36:09 +0900</pubDate>
        <link>https://jehuipark.github.io/note/ms-excel-utf8</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/ms-excel-utf8</guid>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>Java 로깅전략 with MDC</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mdc&quot; id=&quot;markdown-toc-mdc&quot;&gt;MDC&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#예제코드&quot; id=&quot;markdown-toc-예제코드&quot;&gt;예제코드&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;어플리케이션에서 이루어지는 어떤 행위에는 보통 Context(문맥) 가 존재한다.&lt;br /&gt;
그렇기에 로그정보를 Context 단위로 볼 수 있다면, 더 유의미한 로그가 될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;mdc&quot;&gt;MDC&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Java 로깅 프레임워크에서는 관련 기능을 &lt;code class=&quot;highlighter-rouge&quot;&gt;MDC&lt;/code&gt; 라는 이름으로 제공하고 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MDC&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;key/value&lt;/code&gt; 저장소를 지원하며, 이 저장소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ThreadContext&lt;/code&gt; 에 의존한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;예제코드&quot;&gt;예제코드&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;의존성&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.apache.logging.log4j'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'log4j-slf4j-impl'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2.13.2'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.apache.logging.log4j'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'log4j-api'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2.13.2'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.apache.logging.log4j'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'log4j-core'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2.13.2'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;로그설정&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;%-8mdc{trace-id}&lt;/code&gt; &amp;lt;- mdc 포멧&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;자세한 정보는 참고자료에 명시한 Log4j2 Manual 에서 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Configuration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WARN&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Appenders&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Console&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Console&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SYSTEM_OUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;PatternLayout&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;
                    %highlight{%d{HH:mm:ss.SSS} [%-5t] [%-8mdc{trace-id}] [%-5level] %msg%n%throwable}
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/PatternLayout&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Console&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Appenders&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Loggers&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;AppenderRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Console&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Root&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Loggers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Java 코드&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;privilegedThreadFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trace-id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;실행결과&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80915551-f5163580-8d8d-11ea-94c0-f71259c4080d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/tree/master/logger-example&quot;&gt;예제코드 저장소&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://logging.apache.org/log4j/2.x/manual/configuration.html&quot;&gt;log4j2 manual&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 03 May 2020 20:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/java/java-logging-mdc</link>
        <guid isPermaLink="true">https://jehuipark.github.io/java/java-logging-mdc</guid>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>디자인 패턴 : Builder Pattern</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#정의&quot; id=&quot;markdown-toc-정의&quot;&gt;정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#특징&quot; id=&quot;markdown-toc-특징&quot;&gt;특징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#예제코드&quot; id=&quot;markdown-toc-예제코드&quot;&gt;예제코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;복잡한 객체를 생성하는 방법과 표현하는 방법을 정의하는 클래스를 분리하는 패턴&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;빌더에 의해 객체 생성방법이 추상화 되기 때문에 객체 생성 난이도가 낮아지며, 객체 생성방법이 클라이언트로 부터 어느정도 자유로워 질 수 있다.
    &lt;blockquote&gt;
      &lt;p&gt;외부에는 간결한 인터페이스를 제공하고, 내부적으로는 복잡한 생성로직을 처리한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예제코드&quot;&gt;예제코드&lt;/h2&gt;
&lt;p&gt;객체 생성을 위해 필요한 정보를 추상화된 인터페이스를 통하여 입력받고, 객체 생성 시점에 조립한다는 생각으로 설계한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;간단한 빌더패턴&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlRole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UrlRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlRoleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UrlRoleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UrlRole{&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;url='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;, role=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;, method=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UseBulkOperation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ManualArrayToCollectionCopy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlRoleBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;UrlRoleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlRoleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasAnyRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlRole&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UrlRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// do something for validate)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;GoF의 디자인 패턴 p144 - p155&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 02 May 2020 20:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/builder-pattern</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/builder-pattern</guid>
        
        <category>디자인 패턴</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>디자인 패턴 : Singleton</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#정의&quot; id=&quot;markdown-toc-정의&quot;&gt;정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#특징&quot; id=&quot;markdown-toc-특징&quot;&gt;특징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#예제코드&quot; id=&quot;markdown-toc-예제코드&quot;&gt;예제코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;클래스에 대한 인스턴스를 하나로 제한하는 패턴&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;인스턴스의 개수가 1개임을 보장&lt;/li&gt;
  &lt;li&gt;access point 제한&lt;/li&gt;
  &lt;li&gt;유일한 인스턴스이면서 서브 클래싱으로 확장을 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예제코드&quot;&gt;예제코드&lt;/h2&gt;
&lt;p&gt;생성자를 은닉시키고, 객체 생성을 제한하여 인스턴스가 1개임을 보장하는 것에 초점을 맞춘다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;간단한 싱글톤&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;thread-safe&lt;/code&gt; 요구사항이 없다면 아래와 같은 구현으로 충분하다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicSingleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BasicSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// thread non safe&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;안전한 싱글톤&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;thread safe&lt;/code&gt; 요구사항이 있다면 생성자 구현에 좀현 더 신경을 써야한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThreadSafeSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;safetyInitialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;safetyInitialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클래스 로더를 활용한 방법&lt;/strong&gt;&lt;br /&gt;
객체 생성을 &lt;code class=&quot;highlighter-rouge&quot;&gt;inner class&lt;/code&gt; 에게 위임하여 초기화 시점을 제어&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton2&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadSafeSingleton2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서브클래싱을 지원하는 싱글톤&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceRegistry&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE_REGISTRY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SuperSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;INSTANCE_REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookupInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookupInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookupInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE_REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;REGISTRY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;SuperSingleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/tree/master/design-pattern/src/main/java/com/example/jehuipark/singleton&quot;&gt;예제코드&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/tree/master/design-pattern/src/test/java/com/example/jehuipark/singleton&quot;&gt;예제코드 테스트&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;GoF의 디자인 패턴 p181 - p190&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 01 May 2020 20:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/singleton-pattern</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/singleton-pattern</guid>
        
        <category>디자인 패턴</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>디자인 패턴 : Prototype Design Pattern</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#정의&quot; id=&quot;markdown-toc-정의&quot;&gt;정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#효과&quot; id=&quot;markdown-toc-효과&quot;&gt;효과&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#구조&quot; id=&quot;markdown-toc-구조&quot;&gt;구조&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#적용예시&quot; id=&quot;markdown-toc-적용예시&quot;&gt;적용예시&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#고려-사항&quot; id=&quot;markdown-toc-고려-사항&quot;&gt;고려 사항&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고자료&quot; id=&quot;markdown-toc-참고자료&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;원본 객체를 사용하여 새로운 사본 객체를 생성하는 패턴&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;복사 객체의 타입은 서브 클래스에서 정의&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;효과&quot;&gt;효과&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트에서 같은 상태의 객체를 생성하기 위해 알아야 할 정보가 줄어든다.&lt;/li&gt;
  &lt;li&gt;팩토리 메소드와 다르게 객체 생성에 대한 책임을 클라이언트에게 일부 위임하기 때문에 인스턴스를 쉽게 다양화 시킬 수 있다.
    &lt;blockquote&gt;
      &lt;p&gt;서브 클래싱 감소&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스의 인스턴스들이 서로 다른 상태 조합중 하나일 때 유용하다.
    &lt;blockquote&gt;
      &lt;p&gt;프로토 타입 인스턴스를 기반으로 동적으로 클래스에 따라 설정을 변경하여 사용&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구조&quot;&gt;구조&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/tree/master/design-pattern/src/main/java/com/example/jehuipark/prototype_pattern&quot;&gt;예제코드&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/JeHuiPark/java-sample/blob/master/design-pattern/src/test/java/com/example/jehuipark/prototype_pattern/ClientTest.java&quot;&gt;예제코드 테스트&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80703013-f5f46080-8b1c-11ea-9dc0-f8b4d0aa94b1.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;적용예시&quot;&gt;적용예시&lt;/h2&gt;
&lt;p&gt;Java 에서 json 처리를 위해 자주 사용되는 라이브러리 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jackson&lt;/code&gt; 라이브러리를 살펴보면 원형패턴이 적용된 예시가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80708450-a4e96a00-8b26-11ea-9cc1-72b14688e92f.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80704003-c2b2d100-8b1e-11ea-95ac-491969cb41d4.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectMapper&lt;/code&gt; 에서 의존하는 몇몇 추상화 클래스들은 구현체에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; 메소드를 구현할 수 있도록 하여, &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectMapper&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; 메소드를 지원한다.&lt;/p&gt;

&lt;h2 id=&quot;고려-사항&quot;&gt;고려 사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;깊은 복사와 얕은 복사 타겟 설정
    &lt;blockquote&gt;
      &lt;p&gt;보통 상태머신 객체는 깊은 복사를, &lt;code class=&quot;highlighter-rouge&quot;&gt;stateless&lt;/code&gt; 객체는 얕은 복사를 하면 될 듯 하다&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;복사를 지원하지 않는 객체를 다수 포함하고 있다면, 복사기능을 구현하기 힘들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;GoF의 디자인 패턴 p169 - p180&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 30 Apr 2020 20:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/prototype_design_pattern</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/prototype_design_pattern</guid>
        
        <category>디자인 패턴</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>IntelliJ 잘 쓰기 Tip</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#no-newline-at-end-of-file&quot; id=&quot;markdown-toc-no-newline-at-end-of-file&quot;&gt;No newline at end of file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#보일러-플레이트-해결하기&quot; id=&quot;markdown-toc-보일러-플레이트-해결하기&quot;&gt;보일러 플레이트 해결하기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#livetemplate&quot; id=&quot;markdown-toc-livetemplate&quot;&gt;LiveTemplate&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#템플릿-만들기&quot; id=&quot;markdown-toc-템플릿-만들기&quot;&gt;템플릿 만들기&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#템플릿-적용위치-설정하기&quot; id=&quot;markdown-toc-템플릿-적용위치-설정하기&quot;&gt;템플릿 적용위치 설정하기&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#사용-예시&quot; id=&quot;markdown-toc-사용-예시&quot;&gt;사용 예시&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#filetemplate&quot; id=&quot;markdown-toc-filetemplate&quot;&gt;FileTemplate&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#vue-template&quot; id=&quot;markdown-toc-vue-template&quot;&gt;Vue Template&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#blog-template&quot; id=&quot;markdown-toc-blog-template&quot;&gt;Blog Template&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#터미널에서-intellij-실행하기&quot; id=&quot;markdown-toc-터미널에서-intellij-실행하기&quot;&gt;터미널에서 Intellij 실행하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;no-newline-at-end-of-file&quot;&gt;No newline at end of file&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;intelliJ&lt;/code&gt; 에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;커맨드&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; 단축키를 이용하여 테스트 클래스를 자동생성할 수 있는데, 이 기능을 그냥 이용하게 되면 거슬리는게 하나 있다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79998744-0b9ed000-84f6-11ea-845c-b0e5f621453b.gif&quot; alt=&quot;test_gen&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;소스트리&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80000609-4f92d480-84f8-11ea-81b9-685007f3347f.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;깃헙&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80001543-73a2e580-84f9-11ea-9614-1f321e55f53a.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;터미널&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79999509-f37b8080-84f6-11ea-9b31-2604fd811578.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EOF 전에 공백 라인이 없어서 생기는 문제인데, &lt;strong&gt;마지막 라인에 공백라인 하나만 추가&lt;/strong&gt;하면 해결된다.&lt;/p&gt;

&lt;p&gt;그런데 테스트 코드를 생성할 때 마다 공백라인을 추가하는 행위를 하자니 너무 원시적이며, 되게 자주 까먹는다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;PR 2번중에 1번꼴로 하는 실수였다.
이렇게 실수를 자주하다가 현타가와서 도구를 활용하기로 했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;더블 쉬프트 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;file and code templates&lt;/code&gt; 입력&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80002548-bfa25a00-84fa-11ea-866a-9af093ce17d1.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기에서 자주 사용하는 테스트 도구를 선택&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80002583-caf58580-84fa-11ea-8bc9-5889d91a3471.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;공백 라인을 추가한다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80002993-596a0700-84fb-11ea-9173-b05e93c795cf.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;끝!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;보일러-플레이트-해결하기&quot;&gt;보일러 플레이트 해결하기&lt;/h2&gt;
&lt;p&gt;코딩을 하다보면 보일러 플레이트가 상당히 많이 발생하는데 툴에서 지원하는 기능을 적절히 이용하면, 좀 더 스마트하게 작업을 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;livetemplate&quot;&gt;LiveTemplate&lt;/h3&gt;
&lt;p&gt;Example Java Test Code boilerplate&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences &amp;gt; Editor &amp;gt; Live Templates&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80306715-e06ef600-87ff-11ea-9cd5-541f0d5694a6.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;템플릿-만들기&quot;&gt;템플릿 만들기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80306796-668b3c80-8800-11ea-8a18-d0f53e5b3f51.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expression&lt;/code&gt; 에서는 이런식으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;groovy&lt;/code&gt; 문법을 지원한다.
    &lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;groovyScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_editor.getDocument().getText().split(\&quot;@.*Test\&quot;).length-1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;템플릿-적용위치-설정하기&quot;&gt;템플릿 적용위치 설정하기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80307282-fd58f880-8802-11ea-87ef-295d50537179.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java 파일에서 선언문 작성시에 라이브템플릿을 활성화 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;사용-예시&quot;&gt;사용 예시&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80307461-275eea80-8804-11ea-8634-69ea9ff0304c.gif&quot; alt=&quot;live_template&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filetemplate&quot;&gt;FileTemplate&lt;/h3&gt;

&lt;h4 id=&quot;vue-template&quot;&gt;Vue Template&lt;/h4&gt;
&lt;p&gt;뷰로 프론트 작업을 한적이 있는데, 보일러플레이트 코드가 상당히 많아서 파일 템플릿을 적절하게 수정하여 작업 효율성을 높였다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences &amp;gt; Editor &amp;gt; file and code templates&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/80306590-34c5a600-87ff-11ea-81be-af466056dfc0.png&quot; alt=&quot;image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;blog-template&quot;&gt;Blog Template&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/85196498-91cc6c80-b315-11ea-804d-11dd10ad93a9.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/85196691-f1774780-b316-11ea-833f-af856d70330a.gif&quot; alt=&quot;blog-template&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;터미널에서-intellij-실행하기&quot;&gt;터미널에서 Intellij 실행하기&lt;/h2&gt;
&lt;p&gt;작업을 하다보면 &lt;strong&gt;터미널에서 intellij 를 실행하고 싶을 때&lt;/strong&gt;가 자주있다.&lt;br /&gt;
그럴땐 이런 설정을 이용하면 된다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79994673-3d616800-84f1-11ea-9bc7-60151edc62ee.png&quot; alt=&quot;image&quot; width=&quot;300px&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/79996611-9c27e100-84f3-11ea-81c2-c80c3b7c8152.gif&quot; alt=&quot;idea_open_in_terminal&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Apr 2020 23:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/use-intellij-more-well</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/use-intellij-more-well</guid>
        
        
        <category>note</category>
        
      </item>
    
  </channel>
</rss>
