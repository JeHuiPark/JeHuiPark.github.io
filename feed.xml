<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

  <channel>
    <title>JH Blog</title>
    <description>developer JH website.</description>
    <link>https://jehuipark.github.io/</link>
    <atom:link href="https://jehuipark.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 23 Feb 2020 05:03:35 +0900</pubDate>
    <lastBuildDate>Sun, 23 Feb 2020 05:03:35 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>GitHub 블로그 개발 환경을 Docker로 구성하자</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#블로그를-방치했던-가장-큰-이유&quot; id=&quot;markdown-toc-블로그를-방치했던-가장-큰-이유&quot;&gt;블로그를 방치했던 가장 큰 이유&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#환경-구성이-귀찮았던-이유&quot; id=&quot;markdown-toc-환경-구성이-귀찮았던-이유&quot;&gt;환경 구성이 귀찮았던 이유&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#내-블로그-살리자&quot; id=&quot;markdown-toc-내-블로그-살리자&quot;&gt;내 블로그 살리자&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#계획&quot; id=&quot;markdown-toc-계획&quot;&gt;계획&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#실행-고군분투기&quot; id=&quot;markdown-toc-실행-고군분투기&quot;&gt;실행 (고군분투기)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#보너스&quot; id=&quot;markdown-toc-보너스&quot;&gt;보너스&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마치며&quot; id=&quot;markdown-toc-마치며&quot;&gt;마치며&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#앞으로-할-일&quot; id=&quot;markdown-toc-앞으로-할-일&quot;&gt;앞으로 할 일&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;몇 가지 이유로 나는 이 블로그를 거의 1년간 방치하고 있었다. (&lt;del&gt;&lt;em&gt;사실 핑계&lt;/em&gt;&lt;/del&gt;)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2019년 06월 이직&lt;/li&gt;
  &lt;li&gt;지킬 블로그 개발환경 구성이 너무나 귀찮다&lt;/li&gt;
  &lt;li&gt;올바른 객체지향 설계를 위한 개념 잡기에 몰두&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;블로그를-방치했던-가장-큰-이유&quot;&gt;블로그를 방치했던 가장 큰 이유&lt;/h1&gt;
&lt;p&gt;개발환경 구성이 너무나 귀찮다는 점이다.&lt;/p&gt;

&lt;h2 id=&quot;환경-구성이-귀찮았던-이유&quot;&gt;환경 구성이 귀찮았던 이유&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;운영환경으로 부터 독립적이지 못함 (여기서 운영환경은 지킬서버가 돌아가는 환경을 말함 -&amp;gt; 개발환경)&lt;/li&gt;
  &lt;li&gt;깃헙에게 지킬 빌드를 위임하는 방식이 아닌 로컬 빌드 방식을 택함 (그 이유는 &lt;a href=&quot;https://jehuipark.github.io/blog/blog-publish&quot;&gt;여기에&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내-블로그-살리자&quot;&gt;내 블로그 살리자&lt;/h1&gt;
&lt;p&gt;일단 기존의 문제점은 내가 가장 잘 알고있는 상태이기 때문에 어떻게 살릴지에 대한 추상적은 계획은 세워두었다.&lt;/p&gt;

&lt;h2 id=&quot;계획&quot;&gt;계획&lt;/h2&gt;
&lt;p&gt;아주 간단하다 도커를 활용하여 운영환경에서 분리하여 손쉽게 개발환경 구축이 가능하게 만들면 된다.&lt;br /&gt;
다만, 나는 도커에 자신이 없다. (걸음마 수준)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;그래서 나는 &lt;a href=&quot;https://www.44bits.io/ko/post/how-docker-image-work&quot;&gt;이 글&lt;/a&gt;을 참고하여 작업했다. (감사합니다 ❤️)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;실행-고군분투기&quot;&gt;실행 (고군분투기)&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;가장 먼저 jekyll 이미지를 땡겨 받자.  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull jekyll/jekyll&lt;/code&gt;&lt;br /&gt;
&lt;a href=&quot;https://hub.docker.com&quot;&gt;도커허브&lt;/a&gt;에서 jekyll을 검색하면 pull command를 확인할 수 있으며, 기초적인 레퍼런스도 확인이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git에서 내 블로그 소스코드를 clone하자.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 블라블라블라블라&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;터미널에서 내 블로그 소스코드 위치로 이동하자.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605023-56bbf180-5107-11ea-8605-3a9851342ce3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;레퍼런스에 있는 커맨드를 그대로 일단 터미널에 때리자
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.8
docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll:&lt;span class=&quot;nv&quot;&gt;$JEKYLL_VERSION&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;때리고 나서 확인해보니 현재 경로를 컨테이너의 &lt;code class=&quot;highlighter-rouge&quot;&gt;/srv/jekyll&lt;/code&gt; 경로로 마운팅 시킨다는 옵션이 있는걸 확인했다. (&lt;del&gt;제대로 했군ㅋ&lt;/del&gt;)&lt;br /&gt;
명령어를 확인해보면 3.8 버전을 사용하도록 하고 있는데, 지킬 블로그 구성할 때 지킬 버전이 몇이였는지 기억이 안난다. 문제생기면 확인 하기로 하고 일단 수정하지 않기로 했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오류가 난다… 역시 한번에 되면 섭하지&lt;br /&gt;
  오류 내용은 이랬다. -&amp;gt; 대충 &lt;code class=&quot;highlighter-rouge&quot;&gt;지킬 빌드에 필요한 어떤 디펜던시가 존재하지 않는다&lt;/code&gt; 라는 내용&lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605184-034aa300-5109-11ea-81dd-4cbe7e65a2c9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;처방전을 내리자.&lt;br /&gt;
  &lt;em&gt;여기선 이렇게 간단하게 쓰지만 지킬을 너무 오랜만에 접해서 기억을 더듬느라 힘들었음&lt;/em&gt;&lt;br /&gt;
  과거의 내가 왜 그랬는지 기억이 나질 않지만 루비 모듈 의존성을 관리하는 Gemfile을 과거에 삭제해서 생긴 문제이다.
    &lt;ol&gt;
      &lt;li&gt;Gemfile을 일단 생성하자.
        &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-sitemap&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;또 오류가 난다.&lt;br /&gt;
 여기서 지킬 블로그 설정을 관리하는 파일을 확인 해야겠다는 생각이 들었다. &lt;br /&gt;
 &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605336-a5b75600-510a-11ea-8fcd-f14aa01099e8.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 오류 내용과 플러그인 리스트가 일치하는 거 보니 내 예상이 맞는듯 하다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Gemfile을 지킬 설정과 동기화 시키자.
        &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-sitemap&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-mentions&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-seo-tag&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-gist&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-redirect-from&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jemoji&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이제 레퍼런스에 있는 커맨드를 그대로 일단 터미널에 때리자&lt;br /&gt;
  오오오오 뭔가 되는듯 하다가 오류없이 작업이 종료 되었다. (엥?)&lt;br /&gt;
  내가 원하는건 4000 포트로 로컬서버가 구동되는건데?&lt;br /&gt;
  커맨드를 자세히 보니 컨테이너 구동완료후 실행할 명령어가 내가 원하는 명령어가 아니였다&lt;br /&gt;
  레퍼런스 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;, &lt;strong&gt;내가 원하는 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;명령어를 수정하자 (1차)
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;오 이번엔 뭔가 된 것 같다?&lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605502-e9f72600-510b-11ea-97ff-28c307d10a26.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
  &lt;strong&gt;아니다 안된다&lt;/strong&gt;&lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605875-29734180-510f-11ea-9aeb-5a0e8bd001f5.png&quot; alt=&quot;image&quot; /&gt; 
  서버가 올라갔는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;으로 접속을 못하는 이유는 컨테이너와 호스트 포트 바인딩 문제라고 판단했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;명령어를 수정하자 (2차)
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll:3.8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;잘 된다&lt;/strong&gt;&lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/74605870-1c565280-510f-11ea-934d-2c695bfc4746.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
  잘 되지만 지금 상태에서는 &lt;strong&gt;문제점&lt;/strong&gt;이 있다.&lt;br /&gt;
  docker run을 할 때마다 루비 모듈을 처음부터 내려 받느라 엄청난 시간을 소요함&lt;br /&gt;
  도커허브의 jekyll 이미지 레퍼런스를 확인하니 &lt;a href=&quot;https://github.com/envygeeks/jekyll-docker/blob/master/README.md#caching&quot;&gt;이런내용&lt;/a&gt;이 존재했다.&lt;br /&gt;
  대충 &lt;code class=&quot;highlighter-rouge&quot;&gt;컨테이너의 루비 모듈 설치경로와 호스트의 볼륨을 마운팅 시켜라&lt;/code&gt;라는 내용&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;docker run할 때 컨테이너 이름을 지정하여 docker start와 stop을 이용하는 방법도 존재하며,&lt;br /&gt;
  이 방법은 컨테이너를 새로 생성할 경우에 루비 모듈을 처음부터 내려 받아야 한다&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;명령어를 수정하자 (3차)
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cache/bundle:/usr/local/bundle&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; blog &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll:3.8 
  jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;컨테이너의 루비 모듈 설치경로와 호스트 경로의 볼륨을 마운팅 하라는 옵션을 추가하고, 컨테이너 이름을 blog로 지정했다.&lt;br /&gt;
  추가로 루비 모듈 캐시경로를 git에서 추적하지 않도록 설정을 추가했다.&lt;br /&gt;
  이제 컨테이너를 지우고 다시 생성해도 &lt;code class=&quot;highlighter-rouge&quot;&gt;.cache&lt;/code&gt; 디렉토리에 미리 설치된 루비 모듈이 존재하니, &lt;strong&gt;한번이라도 환경구성을 했다면&lt;/strong&gt; 컨테이너 구동이 이전보다는 굉장히 빨라졌다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;docekr-compose를 작성하자&lt;br /&gt;
  최초 환경 구동시에 더 편하게 환경울 구성하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;을 작성했다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;보너스&quot;&gt;보너스&lt;/h2&gt;
&lt;p&gt;최초 환경 구동시에 더 편하게 환경울 구성하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;을 작성했다.&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;blog&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll/jekyll:3.8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4000:4000&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$PWD:/srv/jekyll&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$PWD/.cache/bundle:/usr/local/bundle&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll serve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;
&lt;p&gt;이 작업으로 나는 이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 블라블라블라&lt;/code&gt; 명령어와 도커를 이용하여 블로그 개발환경을 구성할 수 있게 되었다.&lt;br /&gt;
하지만 아직도 개선할 점은 남아있다.&lt;/p&gt;

&lt;h2 id=&quot;앞으로-할-일&quot;&gt;앞으로 할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CD 구성하기&lt;br /&gt;
  이건 과거에 윈도우 환경에서 &lt;a href=&quot;https://jehuipark.github.io/blog/blog-publish&quot;&gt;배포자동화&lt;/a&gt;를 위해 사용하던 Rakefile을 참고하면 될 듯 하다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 16 Feb 2020 16:26:00 +0900</pubDate>
        <link>https://jehuipark.github.io/blog/blog-env-setting-with-docker</link>
        <guid isPermaLink="true">https://jehuipark.github.io/blog/blog-env-setting-with-docker</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>오브젝트</title>
        <description>&lt;p&gt;오브젝트&lt;/p&gt;

&lt;p&gt;책을 보기위한 기본소양을 갖추기 위하여 아래와 같은 내용을 소개
개발자들은 코딩을 왜 할까? motivation = 돈
왜 그렇게 짰어? 돈이 덜드니까.. 이렇게 하면 돈을 버니까 왜 ???&lt;/p&gt;

&lt;h2 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h2&gt;
&lt;p&gt;철학에 관한 이야기&lt;/p&gt;

&lt;p&gt;켄트백은 생각하는 코드의 틀로 3가지를 제안&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Value 가치
    &lt;ul&gt;
      &lt;li&gt;Communication 소통하기 쉬운 코드&lt;/li&gt;
      &lt;li&gt;Simplicity 간단한 코드&lt;/li&gt;
      &lt;li&gt;Flexibility 유연한 코드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Principle 원칙 - 예외적인 상황을 즉각적으로 파악할 수 있게 한다.
    &lt;ul&gt;
      &lt;li&gt;Local consequenes 생명주기는 되도록이면 짧게&lt;/li&gt;
      &lt;li&gt;Minimize repetition 중복은 최소화 (중복은 발견되는 것)&lt;/li&gt;
      &lt;li&gt;Symmetry 짝을 맞추어라&lt;/li&gt;
      &lt;li&gt;Convention&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pattern 패턴 (가치와 원칙을 베이스로 하는 반복되는 유형 )
Xoriented // 이게뭐지? 어떠한 유형의 사고의 틀?
OOP: SOLID, DRY
Functional,
Reactive,
…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Q. 강의에서 아래 내용은 왜 나온것일까??&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Relativism: 토마스 쿤 (과학혁명의 구조)
  과학은 절대적인 진리가 아닌 상대적이다.&lt;br /&gt;
  현재 우리가 알고 있는 과학은 어떻게 보면 종교와 비슷하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rationalism: 러커토시 임레(수학적 발견의 논리: 증명과 반박)
  과학은 합리적이다라며 근거를 제시&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A. 합리주의를 통해 기준을 도출하고 기준점을 토대로 상대성을 갖는다
상대주의와 합리주의를 공존, 사고방식을 넓혀라&lt;/p&gt;

&lt;p&gt;시시각각 변화하는 요구사항을 계속 수렴하면서 납기일을 지켰다.
  어떻게? 그게 바로 이책의 주제
유연성, 격리성, 견고성&lt;/p&gt;

&lt;p&gt;변화에 따른 격리, 어떻게?
현재 객체지향 방법론에서 도메인을 격리시킬 유일한 수단은 역활모델
역활모델을 이해하고 OOP 세계에 입문해야 한다
역활모델 설계를 잘하려면? 추상화를 잘 해야한다.&lt;/p&gt;

&lt;h2 id=&quot;abstraction&quot;&gt;Abstraction&lt;/h2&gt;
&lt;p&gt;Generalization: 일반화 - modeling, function, algorithm
Association: 연관화 - reference, dependence
Aggregation: 집단화 - group, category&lt;/p&gt;

&lt;p&gt;데이터 추상화
  모델링: 어떤 목적에 맞추어서 필요한 정보를 추려내는 작업
  카테고리 분류
  공통분모&lt;/p&gt;

&lt;p&gt;절차(함수) 추상화
  일반화
    함수의 개수가 줄어든다 « 공통점을 찾아서 인터페이스를 추출&lt;/p&gt;

&lt;p&gt;캡슐화 (캡슐화에 대한 정의는 여러가지가 존재)
    캡슐화 개념이 왜 나왔을까?
      캡슐화에 실패한다면 복잡성이 노출되며 사용자의 지능이 높아져야한다. » 휴먼에러가 높아진다, (사용성이 낮아진다)
      캡슐화에 성공한다면 사용자의 사용성이 높아진다. » 휴먼에러가 낮아진다 (사용성이 높아진다)&lt;/p&gt;

&lt;p&gt;객체 추상화
  Generalization
  Realization
  Dependency
  Association
  ..&lt;/p&gt;

&lt;p&gt;객체지향이 어려운 이유는?? 실제로 코드레벨에 이러한 개념을 실제로 적용하는건 상당히 어렵다
이해하고 코드레벨에 적용이 된다면 유연성, 격리성, 견고성을 확보하게 될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;program--timing&quot;&gt;Program &amp;amp; Timing&lt;/h2&gt;
&lt;p&gt;프로그램 생명주기? (스크립트는 생략)
  LANGUAGE CODE // LINT TIME
  MACHINE LANGUAGE // COMPILE TIME
  FILE
  LOAD
  RUN  // RUN TIME
  TERMINATE&lt;/p&gt;

&lt;p&gt;폰 노이만 머신 (동기화 명령)
메모리 영역에 명령이 적재된 순서대로 실행
Runtime
  Loading
    메모리 명령세트와, 값세트가 로드
  Instruction Fetch &amp;amp; Decoding
    CPU 제어유닛(디코더), 연산유닛(제어정보), 데이터유닛(메모리 계수기) « 외부버스
    디코더는 메모리영역에 있는 명령을 페칭 후 디코딩 (메모리 영역에 있는 명령을 CPU가 이해할 수 있는 명령으로 변경하는 단계)
    그리고 연산유닛으로 명령을 전달
  execution
    연산유닛은 명령 실행을 위한 값을 데이터유닛으로 부터 전달 받고 실행후 결과값 데이터유닛에게 전달, 데이터유닛은 메모리의 특정영역에 값을 전달&lt;/p&gt;

&lt;p&gt;loading 과정을 좀 더 디테일하게 (언어마다 상이한점은 존재하지만 유사)
  essential definition loading 프로그램을 구동하기 위한 기초적인 정의부터 로딩 (컴파일러가 처리)
  vtable mapping 변수와 메모리가 매핑될 수 있는 이유 » 가상 메모리와 실제 메모리를 매핑하는 표를 생성
  run
  runtime definition loading 자바의 클래스로더를 생각하면 된다. (c는 해당 개념이 존재하지 않는다)
  run&lt;/p&gt;

&lt;p&gt;Runtime은 상대적이다, 유연하다, 애매모호&lt;/p&gt;

&lt;h2 id=&quot;pointer-of-pointer&quot;&gt;Pointer of Pointer&lt;/h2&gt;
&lt;p&gt;특정 포인터를 직접 가리키지 않고, 어떤 값을 얻기 위해서 포인터를 찾은 후 그 포인터를 보고 포인터를 다시 찾는다
a = “TEST”  // a의 주소는 11이라고 가정
b = &amp;amp;a      // b는 a의 주소인 11이라는 주소값을 갖겠지? 포인터b는 “TEST”가 될것이고
c = b, d = b // c와 d도 b가 가리키고 있는 a의 주소를 갖게 될꺼야
k = “ABC”   // k의 주소가 28이라고 가정
b = &amp;amp;k      // 여기부터 b는 k의 주소인 28을 가리키게 될꺼야&lt;/p&gt;

&lt;p&gt;여기서 발생하는 문제는????
c와 d는 b와 같은것이라고 착각하게 만든다 (직접참조의 문제) c,d != b&lt;/p&gt;

&lt;p&gt;b = {a: &amp;amp;b, v:3} // 참조에 참조 개념 (간접참조)
c = b, d = b
b.a = &amp;amp;k&lt;/p&gt;

&lt;p&gt;이러한 개념은 interface에 활용된다고 함&lt;/p&gt;

&lt;h1 id=&quot;value--identifier&quot;&gt;Value &amp;amp; Identifier&lt;/h1&gt;
&lt;p&gt;객체지향에서 객체의 동질성을 평가하는 방법은? 객체의 식별자&lt;/p&gt;

&lt;h1 id=&quot;polymoriphism&quot;&gt;Polymoriphism&lt;/h1&gt;
&lt;p&gt;Substituion 대체가능성
Internal identity 내적동질성&lt;/p&gt;

&lt;p&gt;대체 가능성에 대한 설명
객체의 다양성은 공짜가 아니다.
그만큼의 연산이 추가된다&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Worker implements Runnable {
  @Override public void run(){
    //..
  }
}
Runnable worker = new Worker();
worker.run();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해당 코드가 동작되는 실제 과정은 이렇다.
Runnable이라는 인터페이스 안에 있는 포인터안에서 run이라는 포인터를 찾고, 그대로 쓸 수없으니
구현체의 메소드의 포인터를 찾은 후 실행된다.
이러한 과정은 컴파일 타임에 개별 포인터 참조 구조체들을 데피니션 타임에 로딩 (이것은 C++베이스 코드 기반)&lt;/p&gt;

&lt;p&gt;내적 동질성을 설명하는 코드&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Worker implements Runnable {
  @Override public void run(){
    //..
  }
  public void print(){
    run();
  }
}
class HardWorker extends Worker {
  @Override void run(){
    // ...
  }
}
Runnable worker = new HardWorker();
worker.print();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 22 Jul 2019 00:00:00 +0900</pubDate>
        <link>https://jehuipark.github.io/study/object-chapter1</link>
        <guid isPermaLink="true">https://jehuipark.github.io/study/object-chapter1</guid>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>책봐라 제희야</title>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;제목&lt;/th&gt;
      &lt;th&gt;저자&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;이펙티브 자바&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt;조슈아 블로&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;클린코드 애자일 소프트웨어 장인정신&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt;로버트C. 마틴&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;도메인 주도 설계&lt;/td&gt;
      &lt;td&gt;에릭 에반스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;자바 ORM 표준 JPA 프로그래밍&lt;/td&gt;
      &lt;td&gt;김영한&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;del&gt;오브젝트&lt;/del&gt;&lt;/td&gt;
      &lt;td&gt;조양호&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;헤드퍼스트 디자인패턴&lt;/td&gt;
      &lt;td&gt;이거먼저 보고&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GOF의 디자인패턴&lt;/td&gt;
      &lt;td&gt;이거보는거 추천&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Sun, 16 Jun 2019 17:26:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/book-read-plan</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/book-read-plan</guid>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>트랜잭션이 동작하지 않는다.</title>
        <description>&lt;p&gt;팀장님으로부터 어떤 업무를 처리할 서버앱을 데모형태로 먼저 개발해달란 요청이 들어왔고, 여느때와 다름없이 springboot를 이용하여 빠르게 구축하였다.&lt;/p&gt;

&lt;p&gt;프로젝트에서 사용될 핵심 의존성은 대충 아래와 같았다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;의존성&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;querydsl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;web&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-data-jpa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mariadb&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;문제는 데이터 레이어 개발을 끝내고 테스트 진행중에 발생하였다……ㅠㅠ&lt;/p&gt;

&lt;h2 id=&quot;이슈-발견&quot;&gt;이슈 발견&lt;/h2&gt;

&lt;p&gt;Test를 위해 스프링부트에서 지원하는 DataJpaTest 어노테이션을 이용하여 슬라이싱 테스트를 진행하였고 몇번의 시행착오를 겪으며 테스트를 통과시킨 후 데이터베이스를 확인해봤는데, &lt;strong&gt;롤백됬어야 될 데이터들이 차곡차곡 쌓이고 있엇다..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;원래라면 DataJpaTest 어노테이션을 이용하여 테스트를 진행할경우 Transaction 옵션이 자동으로 활성화되며 JUnit Test에서 Transaction 옵션이 활성화 될 경우에 단위 테스트가 종료될 때마다 테스트 도중에 변경되었던 데이터는 자동으로 Rollback처리 되어야한다. 이게 기본 옵션이다.&lt;/p&gt;

&lt;h2 id=&quot;어떤-이슈&quot;&gt;어떤 이슈?&lt;/h2&gt;
&lt;p&gt;그럼에도 불구하고 데이터베이스에는 단위테스트에서 생성되고 있던 데이터가 차곡차곡 쌓이고 있었다.
&lt;strong&gt;여기에서 나는 트랜잭션이 정상적으로 동작하고 있지 않다고 판단했다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제가-없는데&quot;&gt;문제가 없는데?&lt;/h2&gt;
&lt;p&gt;이상해서 다시 테스트를 돌리며 로그를 자세히 확인해봤지만, 로그상으로는 전혀 문제가 없었다. 평소와 다름없이 트랜잭션이 열리고, 롤백처리되는 것 까지 전부 정상적인 로그뿐이였다.
&lt;strong&gt;여기서부터 멘붕이 오기 시작했다…&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;이유가-뭘까&quot;&gt;이유가 뭘까?????&lt;/h2&gt;
&lt;p&gt;데모 프로젝트는 아래처럼 멀티 프로젝트 구조를 가지고 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;root &lt;br /&gt;
└ module-a        (core, root에 의존) &lt;br /&gt;
└ module-b        (core, root에 의존) &lt;br /&gt;
└ module-core     (root에 의존) &lt;br /&gt;
└ &lt;strong&gt;module-demo&lt;/strong&gt; (root에 의존)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제일 먼저 module-core에서도 DataJpaTest 어노테이션을 이용하여 테스트를 진행 했었기 때문에, 혹시몰라서 테스트코드에 트랜잭션 롤백처리 테스트 코드도 추가를 하고 테스트를 진행 하였지만 아무 문제가 없었다.&lt;/p&gt;

&lt;p&gt;module-demo는 다른 node 수준의 프로젝트와는 무관한 프로젝트라고 생각하고 시작했지만, 막상 테스트도중 아무 문제가 없는거 같은데, 아니 없어야 되는데 이슈가 터지다보니 제정신이 아니였나보다… 여기서 내 자신을 의심하기 시작했다 ㅋㅋㅋㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;&lt;del&gt;혹시나 module-a와 module-demo에서 사용중인 restdoc플러그인 때문에??? 아니면 module-core와 module-demo에서 사용중인 querydsl플러그인 때문에??? 부끄럽다.. 진짜 의심할 수 있는 모든것을 의심하며 3일을 소비했다…&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;원인을-찾았고-해결했다&quot;&gt;원인을 찾았고 해결했다.&lt;/h2&gt;
&lt;p&gt;결론부터 말하면 &lt;strong&gt;데이터베이스 저장소 엔진이 문제였다.&lt;/strong&gt; &lt;del&gt;지식이 부족했음&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;MariaDB를 사용중이였는데, MySQL계열 데이터베이스에는 대표적인 StorageEngine으로 &lt;strong&gt;MyISAM&lt;/strong&gt; 엔진과 &lt;strong&gt;InnoDB&lt;/strong&gt;엔진이 있다고 한다. 여기서 &lt;strong&gt;MyISAM엔진은 트랜잭션을 지원하지 않는 엔진&lt;/strong&gt;인데 &lt;strong&gt;데모앱에서 액세스한 테이블만 MyISAM엔진&lt;/strong&gt;으로 설정이 되있었다…
(나머지는 다 InnoDB엔진 아니……. 왜? ㅋㅋㅋㅋㅋㅋㅋㅋ 그래서 다른 엔티티로 트랜잭션 테스트를 할땐 잘됬던……….)&lt;/p&gt;

&lt;p&gt;물론 데이터베이스 설정자체를 의심하지 않은것은 아니였다. 의심을 하긴 했지만, Global설정만 확인하여 문제점을 빠르게 찾지 못했던것 같았다. &lt;strong&gt;테이블별로 저장소 엔진 설정이 가능하다는 점을 알았어야 됬는데…&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어쩐지 프로젝트 구조 똑같이 새로만들어서 H2 DB 임베디드해서 테스트하니까 잘되더라 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 02 Jun 2019 20:26:00 +0900</pubDate>
        <link>https://jehuipark.github.io/note/transaction-do-not-work-issue</link>
        <guid isPermaLink="true">https://jehuipark.github.io/note/transaction-do-not-work-issue</guid>
        
        <category>database</category>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>Load Time Weaving 적용기 - Spring LTW</title>
        <description>&lt;p&gt;스프링 환경에서 IOC 대상이 아닌 일반객체도 별도의 코드 작성없이 스프링 컨테이너로부터 DI 받을 수 있는 방법을 공유합니다.&lt;/p&gt;

&lt;p&gt;전체소스는 &lt;strong&gt;&lt;a href=&quot;https://github.com/JeHuiPark/spring-study/tree/master/configurable&quot; title=&quot;깃허브로 이동&quot;&gt;깃허브&lt;/a&gt;&lt;/strong&gt; 에 존재합니다.&lt;/p&gt;

&lt;h2 id=&quot;의문점에서-시작&quot;&gt;의문점에서 시작&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Spring환경에서 개발을 진행하던중 문득 일반객체도 스프링 컨테이너에 빈으로 등록된 객체들을 별도의 코드작성없이 Autowired와 같은 어노테이션을 이용하여 DI받을 수는 없을까란 의문점이 생겼습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;즉, 제가 하고싶었던 것은 객체에 대한 제어는 제가 직접하지만, 별도의 코드작성없이 스프링 컨테이너에 등록된 빈들을 DI받는게 목적이 였습니다.&lt;/p&gt;

&lt;h2 id=&quot;왜-필요했는지&quot;&gt;왜 필요했는지?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;결론은 도메인주도 개발을 하고싶었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서버앱을 개발하다보면 어떤 규칙에 의해서 DB에서 관리되는 도메인의 속성이 변경되는 패턴이 상당히 많은 비중을 차지하게 됩니다. 그렇기 때문에 소프트웨어 구조적으로 따졌을때 이런 기능들은 서비스 레이어에 정의 되기보다는 도메인 레이어에 정의하고 서비스레이어는 이러한 기능들을 상황에 알맞게 호출만 하는것이 더 좋은 패턴이라고 저는 생각하고, 해당 방법으로 개발을 진행하였습니다.
  하지만, 저는 이 방법이 아직은 완전하지 않은 방법이라고 생각했습니다.
  Spring에서 보통 DB엑세스는 IOC로부터 관리되는 객체들을 이용하여 수행될텐데 도메인 객체는 IOC대상에 포함되지 않아서 DI가 불가능하기 때문에 외부상황에 의존되는 상황이였기 때문이죠.&lt;/p&gt;

&lt;h2 id=&quot;무엇이-필요한지&quot;&gt;무엇이 필요한지?&lt;/h2&gt;

&lt;p&gt;IOC 대상에는 포함되지 않는, 즉 런타임에 필요할 때 마다 생성되는 객체지만 추가 코드없이 스프링 컨테이너로부터 자동으로 DI받을 수 있는 기술이 필요합니다. 이게 가능하려면 aspectJ가 필요할 것입니다.
  클래스가 객체화되는 시점에 필요한 객체들이 DI되어야 하기 때문이죠&lt;/p&gt;

&lt;h2 id=&quot;사전-지식&quot;&gt;사전 지식&lt;/h2&gt;
&lt;p&gt;스프링에서 제공하는 AOP 기능은 IOC 대상에 포함되는 객체에만 사용할 수 있는 기술입니다. 그 이유는 스프링프레임웍이 부팅되면서 IOC 대상에 포함시킬 모든 클래스들을 찾아서 컨테이너에 빈으로 등록하게 될텐데 이때 해당 빈들은 모두 프록시 객체로 감싸지게 되어 실제 어떤 기능이 실행되더라도 프록시 객체를 통해 실행된다는 점을 이용하여 구체화된 기술이기 때문입니다. 이것을 RTW(RunTimeWeaving)이라고 부릅니다.&lt;/p&gt;

&lt;h2 id=&quot;찾아보고-적용해보기&quot;&gt;찾아보고 적용해보기&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;우선 해당기능이 구현된 LoadTimeWeaver 의존성을 추가해줍니다.&lt;/p&gt;

    &lt;p&gt;LoadTimeWeaver는 클래스로드 타임에 위빙하여 일반 클래스 또한 스프링에 의해 AOP처리가 가능하도록 하는 라이브러리입니다.&lt;/p&gt;

    &lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-aop'&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework:spring-instrument'&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instrumentLib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instrumentLibPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;jvmArgs&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-javaagent:${instrumentLib}&quot;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;bootRun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instrumentLib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instrumentLibPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;jvmArgs&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-javaagent:${instrumentLib}&quot;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instrumentLibPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileClasspath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spring-instrument&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;로드타임에 위빙하기 위해서는 spring-agent를 통해 jvm에 로드되어야 합니다. 때문에 jvm agent옵션으로 spring-instrument라이브러리 경로를 넘겨주어야 합니다.&lt;/strong&gt;
 저같은 경우는 실행할때마다 라이브러리 경로를 직접 명시해주는게 &lt;del&gt;너무&lt;/del&gt; 싫어서 위에처럼 라이브러리 경로를 자동으로 찾고 jvm옵션으로 전달하도록 하였습니다.
 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Application 최소설정
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@EnableSpringConfigured&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@EnableLoadTimeWeaving&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;EnableLoadTimeWeaving 어노테이션은 로드타임위빙이 가능하게 합니다.&lt;/li&gt;
      &lt;li&gt;EnableSpringConfigured 어노테이션은 일반클래스 또한 스프링설정을 주입받는게 가능하게 합니다.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Configurable 어노테이션을 이용하여 DI옵션 활성화&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Configurable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autowire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Autowire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BY_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Getter@Setter&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Transient&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUserRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Auto Dependency Injection&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userNm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;cm&quot;&gt;/**
    * 스테이터스 값 변경
    * @param status
    */&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;statusChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status origin = {}, status new = {} &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAndFlush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Configurable 어노테이션은 EnableSpringConfigured 어노테이션이 활성화 되있다면 DI 받겠다는 설정입니다.
 &lt;strong&gt;이 설정으로 User클래스는 IOC에게 관리되지 않지만, 스프링 컨테이너로부터 DI받는게 가능해집니다&lt;/strong&gt;
 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AOP 로그 소스 작성&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInitAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(com.example.configurable.user.domain.User.new())&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userInitBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.configurable.user.domain.User 생성전 &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(com.example.configurable.user.domain.User.new())&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userInitAfter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.configurable.user.domain.User 생성후 &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;User클래스는 IOC에게 관리되는 클래스가 아니기때문에 컴포넌트로 등록해선 안됩니다.&lt;/strong&gt;
 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AOP 설정&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;aop 설정파일 추가가 필요합니다. spring-agent에서 로드합니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/58369042-ebeed880-7f2f-11e9-9221-d9079be389a1.png&quot; alt=&quot;aop.xml 경로&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;aop.xml&lt;/p&gt;
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;aspectj&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;weaver&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;options=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-Xset:weaveJavaxPackages=true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;include&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;within=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.configurable..*&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/weaver&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;aspect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.configurable.aop.UserInitAspect&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/aspectj&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Test 코드작성&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextLoadTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ltwTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;아이디&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUserNm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;박제희&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveAndFlush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

     &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;persistUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;statusChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;테스트-해보기&quot;&gt;테스트 해보기&lt;/h2&gt;

&lt;p&gt;앞서 알려드린 것 처럼 jvm agent 옵션으로 spring-agent경로를 넘겨주어야 하며 두가지 방법이 존재합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;IDE
IDE를 이용하여 실행할 경우 Run/Debug Configuration에서 jvm옵션을 지정해주어야 합니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/58369101-c57d6d00-7f30-11e9-9acd-855ca36a1d24.png&quot; alt=&quot;idea-test&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gradle task
gradle을 이용할 경우 spring-agent경로를 알아서 찾을것이기 때문에 별도의 jvm옵션 지정은 필요하지 않습니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/58369211-23f71b00-7f32-11e9-97dd-77cc0b3d0c3a.png&quot; alt=&quot;gradle-task&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/58369148-72f08080-7f31-11e9-932f-899ff550c28b.png&quot; alt=&quot;test-log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;테스트 결과입니다. User클래스는 bean이 아니지만, DI가 정상적으로 실행되었습니다. 또한, 테스트용으로 작성한 Aspect 코드도 동작하는 모습을 확인하실 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;마지막으로 DI받는 과정을 이미지로 첨부하며 글을 마치겠습니다!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/58366604-cc47b800-7f0f-11e9-9f9c-d22e6a9846e8.png&quot; alt=&quot;di-handle&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 25 May 2019 22:26:00 +0900</pubDate>
        <link>https://jehuipark.github.io/java/generic-object-di-try-with-spring</link>
        <guid isPermaLink="true">https://jehuipark.github.io/java/generic-object-di-try-with-spring</guid>
        
        <category>spring</category>
        
        <category>ltw</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Springboot 시작하기 쉬운 Database H2</title>
        <description>&lt;p&gt;Springboot에서 가장 빠르게 접근할 수 있는 RDBMS H2를 TCP모드로 셋업하는 과정을 공유합니다.&lt;/p&gt;

&lt;h2 id=&quot;springboot--데모수준-앱--관계형-데이터베이스rdbms--인텔리제이intellij&quot;&gt;Springboot + 데모수준 앱 + 관계형 데이터베이스(RDBMS) + 인텔리제이(IntelliJ)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;이 4가지가 충족 된다면 H2 데이터베이스를 추천합니다.&lt;/strong&gt;
인텔리제이의 경우에 H2를 선택한다면 무설치에 가까운 행위로 손쉽게 데이타소스 설정이 가능합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/H2&quot; title=&quot;위키로 이동&quot;&gt;위키&lt;/a&gt;에 따르면 H2는 JAVA로 작성된 RDBMS로 JAVA앱에 임베디드 되거나 클라이언트-서버모드로 구동이 가능하다고 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;H2를 임메디드모드로 사용하는 방법은 다른 블로그에서도 설명이 잘 되어있으니 생략하고,&lt;/p&gt;

&lt;p&gt;여기에서는 H2를 서버(TCP)모드로 구동시키는 법을 소개할 것이며, 서버모드의 장점은 다른 DB처럼 데이터베이스 클라이언트를 활용하여 커넥션 할 수 있다는 장점이 있습니다.&lt;/p&gt;

&lt;p&gt;전체 소스는 &lt;a href=&quot;https://github.com/JeHuiPark/spring-study/tree/master/h2&quot; title=&quot;깃허브로 이동&quot;&gt;깃허브&lt;/a&gt;에서 확인하실 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;프로젝트에 의존성 주입&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.h2database:h2'&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16' 드라이버스파이&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;application 설정&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;continue-on-error&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;hikari&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;jdbc-url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jdbc:h2:tcp://localhost:9093/mem:management_db_9093&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;driver-class-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.h2.Driver&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;jpa&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;database-platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;H2&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;show-sql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;ddl-auto&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;jdbc:h2:tcp://localhost:9093/mem:management_db_9093&lt;/code&gt; &lt;strong&gt;이 라인을 이해해야셔야 다음 단계에서 수월하게 이해할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jdbc:h2:tcp://&lt;/code&gt; 여기까지는 프로토콜 즉 약속입니다. 해석하자면 h2데이터베이스를 사용할 것이고 tcp(클라이언트)모드로 사용할 것이다. 이 정도의 의미가 됩니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:9093&lt;/code&gt; 아시다시피 커넥션 할 목적지입니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mem:management_db_9093&lt;/code&gt; 이 부분은 모두가 알다시피 관리할 db 이름을 명시하는 곳인데 H2 DB를 TCP모드로 실행할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;management_db_{tcpPort}&lt;/code&gt;라는 데이터베이스가 자동으로 생성됩니다. database서버를 9093 포트로 서비스할 것이기 때문에 management_db_9093으로 명시해주었으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;mem:&lt;/code&gt;은 H2 드라이버에서 정의한 dbname 프로토콜로 보입니다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;해당 내용은 org.h2.Driver패키지에서 확인가능하며, org.h2.server.TcpServer 클래스에서 정의되어 있습니다.
 &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57580201-a2d76700-74e1-11e9-8914-cc7d81b65c22.png&quot; alt=&quot;h2 db prefix&quot; /&gt;
 &lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57580223-f47ff180-74e1-11e9-86c0-29251e4517a9.png&quot; alt=&quot;h2 dbname&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;테스트용 도메인&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt; @Builder
 @Data
 @Entity
 public class User {

   @Id
   @GeneratedValue
   private long id;
   @Column(unique = true)
   private String userId;
   private String userName;
   private int age;
 }

 @Repository
 public interface UserRepository extends CrudRepository&amp;lt;User, Long&amp;gt; {
 }

 @RequiredArgsConstructor
 @Service
 public class UserRegister {

   private final UserRepository userRepository;

   /**
    * 랜덤유저생성
    * @return 생성된 유저
    */
   public User randUser(){
     User rand = User.builder()
         .userId(System.currentTimeMillis() + &quot;&quot;)
         .age(new Random().nextInt(31)+1)
         .userName(new String[]{&quot;김철수&quot;, &quot;김영희&quot;, &quot;짱구&quot;, &quot;맹구&quot;, &quot;슛돌이&quot;, &quot;도꺠비&quot;, &quot;김삿갓&quot;}[new Random().nextInt(7)])
         .build();
     return userRepository.save(rand);
   }
 }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java 설정&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt; @Slf4j
 @Configuration
 @ComponentScan(includeFilters = @Filter(OptionalComponent.class))
 @Profile(&quot;local&quot;)
 public class H2ServerConfiguration {


 	/**
 	 * @see org.h2.server.TcpServer
 	 * @return
 	 * @throws SQLException
 	 */
 	@Bean
 	@ConfigurationProperties(&quot;spring.datasource.hikari&quot;)
 	public DataSource dataSource() throws SQLException {
 		//Server server = adviceRun(9093, &quot;external_db_name&quot;, &quot;dbname&quot;, FilePath.absolute);
 		Server server = defaultRun(9093);
 		if(server.isRunning(true)){
 			log.info(&quot;server run success&quot;);
 		}
 		log.info(&quot;h2 server url = {}&quot;, server.getURL());

 		return new HikariDataSource();
 	}

 	private Server adviceRun(int port, String externalDbName, String dbname, FilePath db_store) throws SQLException {
 		return Server.createTcpServer(
 				&quot;-tcp&quot;,
 				&quot;-tcpAllowOthers&quot;,
 				&quot;-ifNotExists&quot;,
 				&quot;-tcpPort&quot;, port+&quot;&quot;, &quot;-key&quot;, externalDbName, db_store.value2(dbname)).start();
 	}

 	private Server defaultRun(int port) throws SQLException {
 		return Server.createTcpServer(
 				&quot;-tcp&quot;,
 				&quot;-tcpAllowOthers&quot;,
 				&quot;-ifNotExists&quot;,
 				&quot;-tcpPort&quot;, port+&quot;&quot;).start();
 	}

 	enum FilePath {
 		absolute(&quot;~/&quot;),
 		relative(&quot;./&quot;);
 		String prefix;
 		FilePath(String prefix){
 			this.prefix = prefix;
 		}
 		public String value2(String dbname){
 			return prefix + dbname;
 		}
 	}
 }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;H2 DB도 &lt;a href=&quot;http://www.h2database.com/html/advanced.html&quot; title=&quot;h2 공식사이트로 이동&quot;&gt;공식사이트&lt;/a&gt;를 살펴보면 많은 옵션을 지원하는거 같은데요 저에게 필요한 기능만 가져와 보았습니다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;기본옵션으로 TCP모드를 실행할 경우 데이터베이스를 인메모리로 서비스&lt;/strong&gt;하기 때문에 서버종료시 데이터를 유지할 수 없습니다. 하지만 저는 일반적인 DB처럼 &lt;strong&gt;영속가능한 DB&lt;/strong&gt;를 원했기 때문에 사진에 보이는것 처럼 -key라는 옵션을 추가하였습니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57582566-3ec49b00-7501-11e9-81ab-37c7a0ac64aa.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;key의 첫번째 인자값은 **외부용 dbname으로 externalDbName은 db커넥션시 명시해줘야할 dbname을 말합니다.
        &lt;blockquote&gt;
          &lt;p&gt;해당옵션을 사용하였다면 datasource설정에서 url속성도 변경이 필요합니다.&lt;br /&gt;
ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;spring.datasource.url: jdbc:h2:tcp://{address}:{port}/{externalDbName}&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;key의 두번째 인자값은 내부적으로 관리될 dbname으로 &lt;strong&gt;prefix로 ./또는 ~/을 붙여주어야 합니다.&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;두번째 인자값이 ./{dbname}일 경우에는 상대경로에 &lt;strong&gt;{dbname}.mv.db&lt;/strong&gt;라는 파일이 생기며 해당 파일에 데이터영속화가 수행됩니다.
&lt;em&gt;상대경로의 기본경로는 모듈경로입니다. h2.iml파일에 명시되어있네요.&lt;/em&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;두번째 인자값이 ~/{dbname}일 경우에는 절대경로에 &lt;strong&gt;{dbname}.mv.db&lt;/strong&gt; 파일이 생기며 해당 파일에 데이터 영속화가 수행됩니다.
&lt;em&gt;절대경로의 기본경로는 -baseDir 옵션을 따로 지정하지 않았으니 OS에 로그인된 계정의 root경로 입니다.&lt;/em&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;서버실행 후 DB 클라이언트로 접속하기&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57582905-995ff600-7505-11e9-97f5-6cba6d0091e7.png&quot; alt=&quot;서버실행로그&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;도깨비라는 이름을 가진 USER가 생성되었네요&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57582949-1f7c3c80-7506-11e9-940e-7c694cdfd71d.png&quot; alt=&quot;IntelliJ database&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;사진에 보이는 메뉴가 없으면 인텔리제이의 액션기능(Ctrl+Shift+A)에 Database를 입력하시면 됩니다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57583012-19d32680-7507-11e9-85ab-47fb93aaf411.png&quot; alt=&quot;IntelliJ data source&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57583047-759daf80-7507-11e9-82b8-31e0a09eaea1.png&quot; alt=&quot;IntelliJ data source properties&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;사진처럼 커넥션 타입을 URL only로 설정하신후 URL에 db서버 주소를 명시해주세요. (remote 선택하셔도 무방합니다.)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57583099-06748b00-7508-11e9-9ada-15794a04f686.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/57583103-0eccc600-7508-11e9-91b3-720b62a3ad19.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;DB콘솔 활성화후 쿼리를 날려보니 아까전에 서버 실행로그에서 확인했던 도깨비라는 유저의 정보를 확인할 수 있네요!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;개인공부용으로 쓰기 위해 제가 분석한 H2의 내용은 여기까지 입니다. 내용상에 오류가 있다면 지적 부탁드리며, 여기까지 따라오느라 수고하셨습니다!&lt;/p&gt;

</description>
        <pubDate>Sun, 12 May 2019 16:26:00 +0900</pubDate>
        <link>https://jehuipark.github.io/java/springboot-h2-tcp-setup</link>
        <guid isPermaLink="true">https://jehuipark.github.io/java/springboot-h2-tcp-setup</guid>
        
        <category>spring</category>
        
        <category>h2</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>리퀴드 문법 탈출하기 liquid escape</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;지킬 블로그에서 글을 작성하다보면 코드블럭에 리퀴드문법을 작성하는 경우가 있는데, 그냥 작성하게 되면 코드블럭에 포함된 리퀴드코드가 빌드하는 과정에서 &lt;strong&gt;의도치 않게 리퀴드 코드가 실행될 수 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;예를들어서 리퀴드문법에 소개하는 글을 아래처럼 작성하고&lt;/p&gt;
&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;posts&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;제목&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;gs&quot;&gt;**리퀴드 문법에서 변수선언은 이렇게합니다 !!**&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;
&lt;/span&gt;{% assign var=&quot;어떤값을 저장할까.&quot; %}
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빌드후 실제로 렌더링된 페이지를 확인해보면
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/51786341-32147500-21a6-11e9-9e42-e426223a8e32.jpg&quot; alt=&quot;liquid_md_example&quot; /&gt;
이렇게 코드 템플릿 안에 있던 리퀴드 코드가 실행되어 공백으로 바뀐모습을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그래서 우리는 코드 템플릿에서 리퀴드 문법을 같이 표시하고 싶다면 리퀴드 코드에 대하여 이스케이프하는 작업을 해주어야 합니다. 리퀴드 코드를 이스케이프 하는 방법을 소개합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;리퀴드-코드를--raw-와--endraw-로-감싸주세요&quot;&gt;리퀴드 코드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;{% raw %}&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;{% endraw %}&lt;/code&gt;로 감싸주세요.&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;posts&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;제목&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;gs&quot;&gt;**리퀴드 문법에서 변수선언은 이렇게합니다 !!**&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;
&lt;/span&gt;{% raw %}{% assign title=&quot;제목입니다.&quot; %}{% endraw %}
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 26 Jan 2019 19:45:21 +0900</pubDate>
        <link>https://jehuipark.github.io/blog/markdown-liquid-escape</link>
        <guid isPermaLink="true">https://jehuipark.github.io/blog/markdown-liquid-escape</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>지킬 블로그 RSS Feed 설정하기</title>
        <description>&lt;p&gt;저는 지킬 블로그를 개설하면서 구글 웹마스터와, 네이버 웹마스터 두곳에 현 블로그를 등록하여 검색엔진에 노출되도록 설정했었습니다.&lt;/p&gt;

&lt;p&gt;구글 웹마스터 도구는 무리없이 사이트 등록이 깔끔하게 완료되었지만, 이상하게 NAVER 웹마스터에서만 RSS를 제출하려고 하면 서비스 거부를 당해서 방치;&lt;/p&gt;

&lt;p&gt;지킬 블로그에서 RSS 피드를 생성하는 방법은 두 가지가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;플러그인 사용&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RSS 피드 생성문 직접작성&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;저는 편하게 하고싶어서 &lt;strong&gt;jekyll-feed&lt;/strong&gt; 라는 플러그인을 사용하여 피드를 생성하고 있었는데, 이상하게 네이버 웹마스터에서 해당 플러그인으로 생성된 피드에 대하여 서비스를 거부하는 현상이 있어서, 플러그인을 포기하기로 결정했습니다. (&lt;em&gt;개인적인 생각으로는 RSS 버전이슈 같습니다. 피드문서 구조가 달랐거든요&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;현재상태
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/51785372-3cc90d00-219a-11e9-8afa-c70cbb441b76.jpg&quot; alt=&quot;RSS 제출 확인&quot; /&gt;&lt;/p&gt;

&lt;p&gt;찾아보니 &lt;a href=&quot;https://jekyllcodex.org/without-plugin/rss-feed/&quot;&gt;지킬 코드샘플 사이트에서&lt;/a&gt; 기본 솔루션을 제공해 주고 있었습니다.&lt;/p&gt;

&lt;p&gt;우선 아래처럼 RSS 피드를 생성하는 xml을 작성하고 원하는 이름으로 지킬 프로젝트 루트경로에 위치시킵니다. (기본 feed.xml)&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: null
---
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;rss&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:atom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2005/Atom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% assign feed_path = &quot;/feed.xml&quot; %} &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 피드경로 명시 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;channel&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt; {{ site.title | xml_escape }}  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;{{ site.description | xml_escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&amp;gt;&lt;/span&gt;{{ site.url }}{{ site.baseurl }}/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;atom:link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ feed_path | prepend: site.baseurl | prepend: site.url }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;self&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/rss+xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pubDate&amp;gt;&lt;/span&gt;{{ site.time | date_to_rfc822 }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;lastBuildDate&amp;gt;&lt;/span&gt;{{ site.time | date_to_rfc822 }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lastBuildDate&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;generator&amp;gt;&lt;/span&gt;Jekyll v{{ jekyll.version }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
    {% for post in site.posts limit:10 %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ post.title | xml_escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;{{ post.content | xml_escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;pubDate&amp;gt;&lt;/span&gt;{{ post.date | date_to_rfc822 }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&amp;gt;&lt;/span&gt;{{ post.url | prepend: site.baseurl | prepend: site.url }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;guid&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isPermaLink=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.url | prepend: site.baseurl | prepend: site.url }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/guid&amp;gt;&lt;/span&gt;
        {% for tag in post.tags %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;{{ tag | xml_escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
        {% endfor %}
        {% for cat in post.categories %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&amp;gt;&lt;/span&gt;{{ cat | xml_escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
        {% endfor %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    {% endfor %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/rss&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그후 head에 아래와 같은 태그를 추가시키면 됩니다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alternate&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/rss+xml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.url }}/feed.xml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.title }} Feed&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;의도한대로 동작하고 있는지 개발자도구(F12)를 실행시켜 확인해보고, feed URL을 체크해봅니다
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/51785473-95e57080-219b-11e9-9e01-8435e8952128.jpg&quot; alt=&quot;dev_tool_check&quot; /&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 동작하고 있는걸 확인했으니 네이버 웹마스터에 RSS 제출을 하겠습니다.
&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/51785371-3c307680-219a-11e9-99bb-fdfc60634a2b.jpg&quot; alt=&quot;RSS 제출&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/51785529-93374b00-219c-11e9-8fa6-6a1f7dcfa826.jpg&quot; alt=&quot;RSS 제출 확인&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Jan 2019 18:45:21 +0900</pubDate>
        <link>https://jehuipark.github.io/blog/without-plugin-rss-feed</link>
        <guid isPermaLink="true">https://jehuipark.github.io/blog/without-plugin-rss-feed</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>[JAVA] 제네릭(Generic)이란</title>
        <description>&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Interger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우리는 위와같이 꺽쇠안에 클래스 타입이 명시된 패턴을 자주 발견할 수 있다.&lt;/p&gt;

&lt;p&gt;이걸 &lt;strong&gt;제네릭(Generic)&lt;/strong&gt; 이라고 부르며, 제네릭 파라미터는 꺽쇠안에 포함하여 전달한다.&lt;/p&gt;

&lt;p&gt;제네릭이 하는게 무엇이고, 왜 사용할까? 라는 물음에서 시작하되어 포스팅을 시작한다.&lt;/p&gt;

&lt;h1 id=&quot;java에서-제네릭이란&quot;&gt;JAVA에서 제네릭이란?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;파라미터 타입이나 리턴 타입에 대한 정의를 외부로 미룬다&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;타입에 대해 유연성과 안정성을 확보한다&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;런타임 환경에 아무런 영향이 없는 컴파일 시점의 전처리 기술이다&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;타입을 유연하게 처리하며, 런타임에 발생할 수 있는 타입에러를 컴파일전에 검출한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
예시로 아래와 같이 하나의 제네릭 파라미터를 전달받는 클래스를 정의해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 *
 * @param &amp;lt;T&amp;gt; 클래스 초기화 시 한 가지의 클래스 타입을 제네릭 파라미터로 받는다
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 데이터의 타입은 제네릭 T&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     *
     * @param data 파라미터 타입은 클래스 초기화 시 지정한 타입과 동일하다.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     *
     * @return 리턴 타입은 클래스 초기화 시 지정한 타입과 동일하다.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
그리고 Sample클래스를 초기화시키면서 임의의 클래스를 제네릭 파라미터로 전달하여 Sample클래스의 T에 대한 타입을 지정해보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/51187783-ecdb8200-191f-11e9-8498-8749bfbb9ef2.jpg&quot; alt=&quot;generic_sample1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/51187784-ecdb8200-191f-11e9-83e8-a8af352164e2.jpg&quot; alt=&quot;generic_sample2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이처럼 제네릭 타입으로 어떤 클래스를 전달했냐에 따라서 메소드의 파라미터, 혹은 리턴타입이 제네릭 파라미터로 전달받은 클래스 타입으로 유연하게 바뀌며 동시에 강제성을 갖게 해주는 부분을 확인할 수 있다.
이로써 Sample클래스는 setData메소드나 getData메소드에 여러가지 타입을 이용할 수 있지만, &lt;strong&gt;제네릭 파라미터에 의해 타입이 고정되기 때문에 안정성이 확보되는 것을 확인 할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
만약 Sample클래스에 대응되는 클래스를 제네릭 타입없이 구현하게되면 아래처럼 될것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     *
     * @param data 모든 타입을 파라미터로 받기위해 파라미터 타입을 최상위 객체인 Object로 정의한다.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
AnotherSample클래스를 실제 사용할때는 아래의 예시처럼 Sample클래스와 다르게 캐스팅하느라 정신없고, 어떤 타입이 사용되었는지 &lt;u&gt;개발자가 직접 소스를 한줄 한줄 읽어가며 파약해야 하는 안티패턴을 가진 코드가 탄생하게 된다.&lt;/u&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;AnotherSample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integerSample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;integerSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integerSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;AnotherSample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringSample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integerSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;제네릭의-특징-및-사용법&quot;&gt;제네릭의 특징 및 사용법&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;클래스 혹은 메소드에 선언할 수 있다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;동시에 여러 타입을 선언할 수 있다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;와일드 카드를 이용하여 타입에 대하여 유연한 처리를 가능케 한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;제네릭 선언 및 정의시에 타입의 상속관계를 지정할 수 있다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;클래스 혹은 메소드에 선언할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제네릭은 &lt;u&gt;두가지 방법&lt;/u&gt;으로 선언된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;클래스에 제네릭 파라미터를 선언하는 방법&lt;/strong&gt; &lt;em&gt;(클래스 인스턴스화 시점에서 제네릭 파라미터를 통해 타입 전달)&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;인스턴스애서 타입을 공유할 경우에 사용되며, 컬렉션에서 자주볼수 있는 유형이다.&lt;/p&gt;

    &lt;p&gt;사용법은 클래스 우측에 제네릭 파라미터를 선언한다.&lt;/p&gt;

    &lt;p&gt;예시)&lt;/p&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anonyTypeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;메소드에 제네릭 파라미터 선언하는 방법&lt;/strong&gt; &lt;em&gt;(메소드 수행 시점에서 파라미터 타입과 비교하여 타입 전달)&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;제네릭 타입이 메소드 호출시점에 결정되야 할 경우 사용되며, 파라미터 타입에 따라 제네릭 타입이 결정되기 때문에 다이나믹한 처리를 가능케 한다.&lt;/p&gt;

    &lt;p&gt;사용법은 메소드의 반환타입 앞부분에 제네릭 파라미터를 선언한다.&lt;/p&gt;

    &lt;p&gt;예시)&lt;/p&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cm&quot;&gt;/**
  *
  * @param supplier java8의 함수형 인터페이스중 하나로 구현시점에 리턴값을 결정하며 타입이 정의된다.
  * @param &amp;lt;T&amp;gt; test2메소드 호출시 전달받을 타입 파라미터로 supplier의 반환타입이자 test2의 반환타입으로 정의한다.
  * @return
  */&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;supplier 인터페이스의 반환타입에 따라서 test2의 반환타입이 결졍된다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;동시에 여러 타입을 선언할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제네릭 파라미터를 정의하는곳에 &lt;u&gt;콤마를 기준으로 여러 타입을 선언&lt;/u&gt;하여 사용이 가능하다&lt;/p&gt;

&lt;p&gt;예시)&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 *
 * @param p Function 메소드에서 소비될 P타입의 인자이다.
 * @param function Function 제네릭 인자의 첫번째 타입의 파라미터를 소비하여 두번째 타입의 리턴값을 반환한다.
 * @param &amp;lt;P&amp;gt; Function 메소드의 소비 파라미터 타입으로 정의한다.
 * @param &amp;lt;R&amp;gt; Function 메소드의 리턴 타입으로 정의한다. test메소드의 리턴타입으로 정의한다.
 * @return
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnonyMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;와일드 카드를 이용하여 타입에 대하여 유연한 처리를 가능케 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;와일드 카드는 대입연산 수행시 유연한 처리를 돕는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JAVA 컴파일러는 대입연산을 수행할 때 left-value의 제네릭타입과 right-value의 제네릭타입이 정확하게 일치하지 않을 경우 컴파일 에러를 발생시킨다. 하지만, 와일드 카드를 사용한다면 컴파일러가 유연하게 대처하도록 할 수 있다.&lt;/p&gt;

&lt;p&gt;예시)&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 제네릭 타입이 일치하지 않기 때문에 컴파일 에러 발생&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 모든 제네릭 타입을 허용하기 때문에 컴파일 에러 없음&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// List의 제네릭타입으로 Object만 허용한다.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// List의 제네릭타입으로 모든 타입을 허용한다.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;method2처럼 제네릭 타입을 와일드 카드로 모든 타입에 대하여 허용하게 될 경우 param의 제네릭은 최상위 클래스인 Object로 정의되기 때문에 메소드 내부에서 특정 타입으로 캐스팅하여야 된다는 단점이 존재한다. 그래서 JAVA는 &lt;u&gt;제네릭 파라미터 대입 연산시 left-value와 right-value간의 캐스팅&lt;/u&gt;이 가능하도록 &lt;strong&gt;super&lt;/strong&gt; 와 &lt;strong&gt;extends&lt;/strong&gt; 라는 키워드로 지원하고 있다.
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;제네릭 선언 및 정의시에 타입의 상속관계를 지정할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;제네릭 타입 정의시 상속관계를 명시하는 방법&lt;/strong&gt; (와일드카드를 사용한다)&lt;/p&gt;

    &lt;p&gt;예시)&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
 &lt;span class=&quot;c1&quot;&gt;// List의 제네릭 인자를 Runnable을 상속받은 모든 타입에 대하여 허용하도록 정의&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunnableWrapp1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;====== BEFORE ======&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;====== AFTER  ======&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RunnableWrapp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;run1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;run2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;run3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;method4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;cm&quot;&gt;/**********************
      * ====== BEFORE ======
      * run1
      * ====== AFTER  ======
      * ====== BEFORE ======
      * run2
      * ====== AFTER  ======
      * ====== BEFORE ======
      * run3
      * ====== AFTER  ======
      **********************/&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


 &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSampleChild&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSampleChildOfChild&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSampleChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// List의 제네릭 인자를 AnotherSampleChild 클래스의 상위클래스만 허용토록 정의&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genericSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSampleChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
       &lt;span class=&quot;cm&quot;&gt;/****************************************************************************************
        * list 의 제네릭 와일드카드는 AnotherSampleChild 클래스의 상위 클래스이기 때문에
        * JAVA 컴파일러가 타입을 특정할 수 없기 때문에 list의 반환 요소타입은 Object로 추론한다.
        * **************************************************************************************/&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnotherSampleChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;AnotherSampleChild&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 컴파일 에러 발생&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AnotherSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AnotherSampleChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AnotherSampleChildOfChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;genericSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;genericSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;genericSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sample3의 리스트 타입은 AnotherSampleChildOfChild 이며, AnotherSampleChild의 상위 클래스가 아니기 때문에 컴파일 에러가 발생한다.&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;genericSample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sample4의 리스트 타입은 Runnable 이며, 마찬가지로 AnotherSampleChild의의 상위 클래스가 아니기 때문에 컴파일 에러가 발생한다.&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;제네릭 타입 선언시 상속관계를 명시하는 방법&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;예시)&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cm&quot;&gt;/**
  *
  * @param number T 타입의 인자
  * @param &amp;lt;T&amp;gt; Number를 상속받은 어떤 타입을 T로 정의한다.
  */&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;test6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;test6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;200.912&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;test6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;test6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1234.948&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
     &lt;span class=&quot;cm&quot;&gt;/*****************
      * 100
      * 200
      * 100
      * 1234
      *****************/&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기까지 자주 쓰이지만 지나치기 쉬운 JAVA의 제네릭에 대하여 알아보았다.&lt;/p&gt;

&lt;p&gt;제네릭 타입의 &lt;strong&gt;선언&lt;/strong&gt; 과 &lt;strong&gt;정의&lt;/strong&gt; 를 정확하게 구분한다면 어렵지 않게 제네릭 타입을 활용 할 수 있을 것 같다.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Jan 2019 00:45:21 +0900</pubDate>
        <link>https://jehuipark.github.io/java/java-generic</link>
        <guid isPermaLink="true">https://jehuipark.github.io/java/java-generic</guid>
        
        <category>generic</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>지킬 블로그를 깃헙 페이지로 배포하기</title>
        <description>&lt;p&gt;지킬 패키지로 작성된 블로그를 깃허브에 배포하는 방법에는 두 가지가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;master 브랜치로 빌드전 소스를 commit - push 하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;master 브랜치로 빌드완료된 정적 페이지 소스를 commit - push 하기&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;원래는 첫번째 방법으로 배포를 수행하다가 불편한점이 한 두가지가 아니여서, 두번째 방법으로 배포하는것으로 방법을 변경했습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;root경로에 Rakefile이 존재한다면 아래와 같이 작성해주세요. (&lt;em&gt;Rakefile이 없다면 생성후 진행해주세요.&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rubygems&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tmpdir&quot;&lt;/span&gt;

 &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler/setup&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;


 &lt;span class=&quot;c1&quot;&gt;# Change your GitHub reponame&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;GITHUB_REPONAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JeHuiPark/JeHuiPark.github.io&quot;&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# 운영환경 빌드 아웃풋 경로&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;PROD_DESTINATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_site_prod&quot;&lt;/span&gt;

 &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;레파지토리 경로 = https://github.com/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GITHUB_REPONAME&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;브랜치명을 입력해주세요&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;branch name = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;계속 진행하시려면 아무키나 입력해주세요&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pause&quot;&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:site&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Generate blog files&quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
     &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&quot;destination&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PROD_DESTINATION&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;production&quot;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;})).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


   &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Generate and publish blog&quot;&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:publish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
     &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mktmpdir&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;cp_r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PROD_DESTINATION&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;

       &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pwd&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;

       &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git init&quot;&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git add .&quot;&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Site updated at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;utc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git commit -m &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git remote add origin https://github.com/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GITHUB_REPONAME&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.git&quot;&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git push origin master:refs/heads/master --force&quot;&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pause&quot;&lt;/span&gt;

       &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;아래와 같이 batch파일을 작성한 후 저장합니다.&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-batch highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @echo &lt;span class=&quot;na&quot;&gt;off&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;chcp&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65001&lt;/span&gt;
 :: &lt;span class=&quot;kd&quot;&gt;batch&lt;/span&gt; 파일 위치에 따라 아래 라인을 수정해주세요.
 &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;JeHuiPark&lt;/span&gt;.github.io
 &lt;span class=&quot;kd&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;:publish&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;batch 파일을 실행후 아래와 같이 진행&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/25237661/51084921-67b46980-1775-11e9-91e9-4136de6f6f27.jpg&quot; alt=&quot;publ_step1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 13 Jan 2019 20:50:21 +0900</pubDate>
        <link>https://jehuipark.github.io/blog/blog-publish</link>
        <guid isPermaLink="true">https://jehuipark.github.io/blog/blog-publish</guid>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
