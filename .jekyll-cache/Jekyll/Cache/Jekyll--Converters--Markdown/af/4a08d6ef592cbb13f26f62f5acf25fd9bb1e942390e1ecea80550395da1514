I""<h3 id="이론">이론</h3>

<p>얼마전에 개발팀 팀장님을 통해 실시간 프로토콜을 흉내 낸 Polling과 LongPolling(지연응답)이라는 기술을 알게되었고 이에 대해 궁금증이 생겨서 훑어본 내용과 실제 작성한 소스를 공유하고자 합니다.</p>

<p><br />
폴링과 롱폴링 두 가지다 앞서 말한것 처럼 <strong>실시간 프로토콜을 흉내 낸 기술</strong> 이기때문에 웹 소켓과 다르게 서버와 클라이언트 간의 연결이 유지되는 방식이 아니며 HTTP프로토콜 기반으로 요청을 보냄으로써 서버의 상태값을 얻어옴을 목적으로 사용합니다.
성능상으로는 웹소켓보다 떨어지지만 브라우저의 영향을 받지 않는다는 점과 간단하게 구현할 수 있다는 장점이 존재합니다.</p>

<p>폴링과 롤폴링의 차이점은 즉시응답과 지연응답 딱 하나입니다.
이것에 대해서는 <a href="https://d2.naver.com/helloworld/1052">Naver 기술블로그</a>에서 잘 설명해 놓았네요.
요약해보면 폴링은 클라이언트에서 주기적으로 요청을 보내어 서버의 상태값을 알아옵니다.</p>

<p>롱폴링도 마찬가지로 클라이언트에서 주기적으로 요청을 보내지만 서버단에서 상태값이 변경되기 전까지 응답을 지연시키기 때문에 폴링에 비해 요청/응답 트래픽이 줄어든다는 장점이 있습니다. 추가적으로 마냥 요청을 지연시키는 것 또한 손해이기 때문에 일정시간이 지나면 서버는 상태값이 요청/응답을 해제시킵니다.</p>

<h3 id="실습">실습</h3>

<p>여기까지 이론이고 실제로 저는 롱폴링 구현화를 쉽게하도록 돕기위해 <strong>라이브러리로 작성하였습니다.</strong>
추가적으로 해야될 것은 라이브러리를 사용하기위해 의존성 추가</p>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// https://github.com/JeHuiPark/LongPolling</span>
<span class="n">repositories</span><span class="o">{</span>
  <span class="c1">// another repositories...</span>
  <span class="n">maven</span> <span class="o">{</span> <span class="n">url</span> <span class="s2">"https://jitpack.io"</span> <span class="o">}</span>
<span class="o">}</span>
<span class="n">dependencies</span> <span class="o">{</span>
  <span class="c1">// another dependencies...</span>
  <span class="n">compile</span> <span class="s1">'com.github.JeHuiPark:LongPolling:0.1.2'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>그리고 간단한 소스 몇줄</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">ResponseMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">progress</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">PollingManager</span> <span class="n">pollingManager</span>	<span class="o">=</span> <span class="nc">PollingManager</span><span class="o">.</span><span class="na">Lazy</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
	<span class="kt">long</span> <span class="no">LIFE_TIME</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">;</span>
	<span class="kt">long</span> <span class="no">TRANSACTION_TIME</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">;</span>
	<span class="kt">long</span> <span class="no">INTERVAL</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>

	<span class="nc">Builder</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Builder</span><span class="o">&lt;&gt;();</span>
	<span class="n">builder</span><span class="o">.</span><span class="na">setInterval</span><span class="o">(</span><span class="no">INTERVAL</span><span class="o">)</span>
	<span class="o">.</span><span class="na">setTransactionTime</span><span class="o">(</span><span class="no">TRANSACTION_TIME</span><span class="o">)</span>
	<span class="o">.</span><span class="na">setObserve</span><span class="o">(()-&gt;{</span>
		<span class="k">return</span> <span class="n">testMapper</span><span class="o">.</span><span class="na">count</span><span class="o">();</span>
	<span class="o">})</span>
	<span class="o">.</span><span class="na">setValidation</span><span class="o">((</span><span class="n">value</span><span class="o">,</span> <span class="n">origin</span><span class="o">)-&gt;{</span> <span class="c1">//param1: 최신 값, origin: 이전 값</span>
		<span class="kt">boolean</span> <span class="n">isUpdate</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
		<span class="k">if</span><span class="o">(!</span><span class="n">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">origin</span><span class="o">))</span>
			<span class="n">isUpdate</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
		<span class="k">return</span> <span class="n">isUpdate</span><span class="o">;</span>
	<span class="o">});</span>

	<span class="k">return</span> <span class="o">(</span><span class="nc">ResponseMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;)</span> <span class="n">pollingManager</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="no">LIFE_TIME</span><span class="o">,</span> <span class="n">builder</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>상태값의 제너릭을 빌더에 명시합니다. <code class="highlighter-rouge">Builder&lt;Integer&gt;</code></li>
  <li>상태값의 감시간격을 명시합니다. (ms) <code class="highlighter-rouge">setInterval(INTERVAL)</code></li>
  <li>폴링 한개의 최대 생명주기를 명시합니다. (ms) <code class="highlighter-rouge">setTransactionTime(TRANSACTION_TIME)</code></li>
  <li>어떤 상태값을 감시할것인지 명시합니다. <code class="highlighter-rouge">setObserve(()-&gt;{return value})</code></li>
  <li>상태값을 검증하는 로직을 명시합니다. <code class="highlighter-rouge">setValidation((value, origin)-&gt;{return true})</code> true:상태값 변경을 의미, false: 상태값이 변경되지 않았음을 의미</li>
  <li>Polling 초기화(이미 Polling이 생성된 상태라면 Builder및 LIFE_TIME은 무시되며 생성된 Polling에 접근) 및 폴링 프로세스 수행 <code class="highlighter-rouge">pollingManager.start(id, LIFE_TIME, builder)</code> 여기서 <strong>LIFE_TIME은 최대 지연시간입니다.</strong> 추후 클라이언트는 id를 이용하여 LIFE_TIME이내에 해당 Polling에 접근할 수 있습니다.</li>
</ul>

<h3 id="라이브러리-설명">라이브러리 설명</h3>

<ol>
  <li>PollingManager는 싱글톤입니다.</li>
  <li>Polling은 단독수행 및 초기화 되지 않습니다.</li>
  <li>PollingManager의 start메소드를 사용하여 새로운 폴링을 생성하거나 접근할 수 있습니다.</li>
  <li>PollingManager의 destroy메소드를 사용하여 특정 Polling을 강제로 완전 삭제시킬 수 있습니다.</li>
  <li>Polling은 PollingManager에 의해 수행되며 <strong>id로 관리됩니다.</strong></li>
  <li>Polling은 상태값이 변화하거나 TRANSACTION_TIME을 초과하면 자동으로 프로세스를 종료합니다.</li>
  <li>LIFE_TIME은 해당 Polling의 <strong>최대 생명주기</strong> 이며 마지막 요청 이후 클라이언트로부터 <strong>LIFE_TIME이내로 요청이 오지않는다면 해당 Polling은 destroy 됩니다.</strong></li>
  <li><strong>상태값이 변하지 않는다면 TRANSACTION_TIME 만큼 응답이 지연됩니다.</strong></li>
  <li>INTERVAL 주기로 setObserve를 통해 전달받은 메소드가 최신 상태값을 반환합니다. 그 후 setValidation을 통해 전달받은 메소드가 상태값 검증결과를 반환합니다.</li>
  <li><strong>상태값이 바뀌었다고 판단되면 TRANSACTION_TIME과 무관하게 즉시 Polling 프로세스가 종료됩니다.</strong></li>
  <li>Polling은 프로세스를 종료하면서 해당결과를 ResponseMap으로 반환합니다.</li>
</ol>
:ET